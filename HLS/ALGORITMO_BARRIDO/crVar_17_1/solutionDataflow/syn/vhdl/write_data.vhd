-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity write_data is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_V_ce0 : OUT STD_LOGIC;
    buf_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_AX_ALG_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_AX_ALG_TVALID : OUT STD_LOGIC;
    output_AX_ALG_TREADY : IN STD_LOGIC;
    output_AX_ALG_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALG_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALG_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALG_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_AX_ALG_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_AX_ALG_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of write_data is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal output_data_V_1_vld_in : STD_LOGIC;
    signal output_data_V_1_vld_out : STD_LOGIC;
    signal output_data_V_1_ack_in : STD_LOGIC;
    signal output_data_V_1_ack_out : STD_LOGIC;
    signal output_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal output_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal output_data_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_1_sel : STD_LOGIC;
    signal output_data_V_1_load_A : STD_LOGIC;
    signal output_data_V_1_load_B : STD_LOGIC;
    signal output_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_1_state_cmp_full : STD_LOGIC;
    signal output_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal output_keep_V_1_vld_in : STD_LOGIC;
    signal output_keep_V_1_vld_out : STD_LOGIC;
    signal output_keep_V_1_ack_in : STD_LOGIC;
    signal output_keep_V_1_ack_out : STD_LOGIC;
    signal output_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal output_keep_V_1_sel : STD_LOGIC;
    signal output_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal output_strb_V_1_vld_in : STD_LOGIC;
    signal output_strb_V_1_vld_out : STD_LOGIC;
    signal output_strb_V_1_ack_in : STD_LOGIC;
    signal output_strb_V_1_ack_out : STD_LOGIC;
    signal output_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal output_strb_V_1_sel : STD_LOGIC;
    signal output_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_user_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal output_user_V_1_vld_in : STD_LOGIC;
    signal output_user_V_1_vld_out : STD_LOGIC;
    signal output_user_V_1_ack_in : STD_LOGIC;
    signal output_user_V_1_ack_out : STD_LOGIC;
    signal output_user_V_1_sel_rd : STD_LOGIC := '0';
    signal output_user_V_1_sel : STD_LOGIC;
    signal output_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_last_V_1_vld_in : STD_LOGIC;
    signal output_last_V_1_vld_out : STD_LOGIC;
    signal output_last_V_1_ack_in : STD_LOGIC;
    signal output_last_V_1_ack_out : STD_LOGIC;
    signal output_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_last_V_1_sel_rd : STD_LOGIC := '0';
    signal output_last_V_1_sel_wr : STD_LOGIC := '0';
    signal output_last_V_1_sel : STD_LOGIC;
    signal output_last_V_1_load_A : STD_LOGIC;
    signal output_last_V_1_load_B : STD_LOGIC;
    signal output_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_last_V_1_state_cmp_full : STD_LOGIC;
    signal output_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal output_id_V_1_vld_in : STD_LOGIC;
    signal output_id_V_1_vld_out : STD_LOGIC;
    signal output_id_V_1_ack_in : STD_LOGIC;
    signal output_id_V_1_ack_out : STD_LOGIC;
    signal output_id_V_1_sel_rd : STD_LOGIC := '0';
    signal output_id_V_1_sel : STD_LOGIC;
    signal output_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_dest_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal output_dest_V_1_vld_in : STD_LOGIC;
    signal output_dest_V_1_vld_out : STD_LOGIC;
    signal output_dest_V_1_ack_in : STD_LOGIC;
    signal output_dest_V_1_ack_out : STD_LOGIC;
    signal output_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal output_dest_V_1_sel : STD_LOGIC;
    signal output_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_AX_ALG_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal tmp_reg_135 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter1_tmp_reg_135 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_101 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal i_1_fu_118_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal last_assign_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_assign_reg_144 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal tmp_1_fu_124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and not(((ap_const_logic_0 = output_data_V_1_ack_in) or (ap_const_logic_0 = output_keep_V_1_ack_in) or (ap_const_logic_0 = output_strb_V_1_ack_in) or (ap_const_logic_0 = output_user_V_1_ack_in) or (ap_const_logic_0 = output_last_V_1_ack_in) or (ap_const_logic_0 = output_id_V_1_ack_in) or (ap_const_logic_0 = output_dest_V_1_ack_in))))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_data_V_1_ack_out) and (ap_const_logic_1 = output_data_V_1_vld_out))) then 
                                        output_data_V_1_sel_rd <= not(output_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_data_V_1_vld_in) and (ap_const_logic_1 = output_data_V_1_ack_in))) then 
                                        output_data_V_1_sel_wr <= not(output_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_data_V_1_vld_in) and (ap_const_logic_1 = output_data_V_1_ack_out) and (output_data_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = output_data_V_1_vld_in) and (output_data_V_1_state = ap_const_lv2_2)))) then 
                    output_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_data_V_1_vld_in) and (ap_const_logic_0 = output_data_V_1_ack_out) and (output_data_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = output_data_V_1_ack_out) and (output_data_V_1_state = ap_const_lv2_1)))) then 
                    output_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_data_V_1_vld_in) and (output_data_V_1_state = ap_const_lv2_2)) or ((ap_const_logic_1 = output_data_V_1_ack_out) and (output_data_V_1_state = ap_const_lv2_1)) or ((output_data_V_1_state = ap_const_lv2_3) and not(((ap_const_logic_1 = output_data_V_1_vld_in) and (ap_const_logic_0 = output_data_V_1_ack_out))) and not(((ap_const_logic_0 = output_data_V_1_vld_in) and (ap_const_logic_1 = output_data_V_1_ack_out)))))) then 
                    output_data_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_dest_V_1_ack_out) and (ap_const_logic_1 = output_dest_V_1_vld_out))) then 
                                        output_dest_V_1_sel_rd <= not(output_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_dest_V_1_vld_in) and (ap_const_logic_1 = output_dest_V_1_ack_out) and (ap_const_lv2_3 = output_dest_V_1_state)) or ((ap_const_logic_0 = output_dest_V_1_vld_in) and (ap_const_lv2_2 = output_dest_V_1_state)))) then 
                    output_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_dest_V_1_vld_in) and (ap_const_logic_0 = output_dest_V_1_ack_out) and (ap_const_lv2_3 = output_dest_V_1_state)) or ((ap_const_logic_0 = output_dest_V_1_ack_out) and (ap_const_lv2_1 = output_dest_V_1_state)))) then 
                    output_dest_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_dest_V_1_vld_in) and (ap_const_lv2_2 = output_dest_V_1_state)) or ((ap_const_logic_1 = output_dest_V_1_ack_out) and (ap_const_lv2_1 = output_dest_V_1_state)) or ((ap_const_lv2_3 = output_dest_V_1_state) and not(((ap_const_logic_1 = output_dest_V_1_vld_in) and (ap_const_logic_0 = output_dest_V_1_ack_out))) and not(((ap_const_logic_0 = output_dest_V_1_vld_in) and (ap_const_logic_1 = output_dest_V_1_ack_out)))))) then 
                    output_dest_V_1_state <= ap_const_lv2_3;
                else 
                    output_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_id_V_1_ack_out) and (ap_const_logic_1 = output_id_V_1_vld_out))) then 
                                        output_id_V_1_sel_rd <= not(output_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_id_V_1_vld_in) and (ap_const_logic_1 = output_id_V_1_ack_out) and (ap_const_lv2_3 = output_id_V_1_state)) or ((ap_const_logic_0 = output_id_V_1_vld_in) and (ap_const_lv2_2 = output_id_V_1_state)))) then 
                    output_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_id_V_1_vld_in) and (ap_const_logic_0 = output_id_V_1_ack_out) and (ap_const_lv2_3 = output_id_V_1_state)) or ((ap_const_logic_0 = output_id_V_1_ack_out) and (ap_const_lv2_1 = output_id_V_1_state)))) then 
                    output_id_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_id_V_1_vld_in) and (ap_const_lv2_2 = output_id_V_1_state)) or ((ap_const_logic_1 = output_id_V_1_ack_out) and (ap_const_lv2_1 = output_id_V_1_state)) or ((ap_const_lv2_3 = output_id_V_1_state) and not(((ap_const_logic_1 = output_id_V_1_vld_in) and (ap_const_logic_0 = output_id_V_1_ack_out))) and not(((ap_const_logic_0 = output_id_V_1_vld_in) and (ap_const_logic_1 = output_id_V_1_ack_out)))))) then 
                    output_id_V_1_state <= ap_const_lv2_3;
                else 
                    output_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_keep_V_1_ack_out) and (ap_const_logic_1 = output_keep_V_1_vld_out))) then 
                                        output_keep_V_1_sel_rd <= not(output_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_keep_V_1_vld_in) and (ap_const_logic_1 = output_keep_V_1_ack_out) and (ap_const_lv2_3 = output_keep_V_1_state)) or ((ap_const_logic_0 = output_keep_V_1_vld_in) and (ap_const_lv2_2 = output_keep_V_1_state)))) then 
                    output_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_keep_V_1_vld_in) and (ap_const_logic_0 = output_keep_V_1_ack_out) and (ap_const_lv2_3 = output_keep_V_1_state)) or ((ap_const_logic_0 = output_keep_V_1_ack_out) and (ap_const_lv2_1 = output_keep_V_1_state)))) then 
                    output_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_keep_V_1_vld_in) and (ap_const_lv2_2 = output_keep_V_1_state)) or ((ap_const_logic_1 = output_keep_V_1_ack_out) and (ap_const_lv2_1 = output_keep_V_1_state)) or ((ap_const_lv2_3 = output_keep_V_1_state) and not(((ap_const_logic_1 = output_keep_V_1_vld_in) and (ap_const_logic_0 = output_keep_V_1_ack_out))) and not(((ap_const_logic_0 = output_keep_V_1_vld_in) and (ap_const_logic_1 = output_keep_V_1_ack_out)))))) then 
                    output_keep_V_1_state <= ap_const_lv2_3;
                else 
                    output_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_last_V_1_ack_out) and (ap_const_logic_1 = output_last_V_1_vld_out))) then 
                                        output_last_V_1_sel_rd <= not(output_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_last_V_1_vld_in) and (ap_const_logic_1 = output_last_V_1_ack_in))) then 
                                        output_last_V_1_sel_wr <= not(output_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_last_V_1_vld_in) and (ap_const_logic_1 = output_last_V_1_ack_out) and (ap_const_lv2_3 = output_last_V_1_state)) or ((ap_const_logic_0 = output_last_V_1_vld_in) and (ap_const_lv2_2 = output_last_V_1_state)))) then 
                    output_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_last_V_1_vld_in) and (ap_const_logic_0 = output_last_V_1_ack_out) and (ap_const_lv2_3 = output_last_V_1_state)) or ((ap_const_logic_0 = output_last_V_1_ack_out) and (ap_const_lv2_1 = output_last_V_1_state)))) then 
                    output_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_last_V_1_vld_in) and (ap_const_lv2_2 = output_last_V_1_state)) or ((ap_const_logic_1 = output_last_V_1_ack_out) and (ap_const_lv2_1 = output_last_V_1_state)) or ((ap_const_lv2_3 = output_last_V_1_state) and not(((ap_const_logic_1 = output_last_V_1_vld_in) and (ap_const_logic_0 = output_last_V_1_ack_out))) and not(((ap_const_logic_0 = output_last_V_1_vld_in) and (ap_const_logic_1 = output_last_V_1_ack_out)))))) then 
                    output_last_V_1_state <= ap_const_lv2_3;
                else 
                    output_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_strb_V_1_ack_out) and (ap_const_logic_1 = output_strb_V_1_vld_out))) then 
                                        output_strb_V_1_sel_rd <= not(output_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_strb_V_1_vld_in) and (ap_const_logic_1 = output_strb_V_1_ack_out) and (ap_const_lv2_3 = output_strb_V_1_state)) or ((ap_const_logic_0 = output_strb_V_1_vld_in) and (ap_const_lv2_2 = output_strb_V_1_state)))) then 
                    output_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_strb_V_1_vld_in) and (ap_const_logic_0 = output_strb_V_1_ack_out) and (ap_const_lv2_3 = output_strb_V_1_state)) or ((ap_const_logic_0 = output_strb_V_1_ack_out) and (ap_const_lv2_1 = output_strb_V_1_state)))) then 
                    output_strb_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_strb_V_1_vld_in) and (ap_const_lv2_2 = output_strb_V_1_state)) or ((ap_const_logic_1 = output_strb_V_1_ack_out) and (ap_const_lv2_1 = output_strb_V_1_state)) or ((ap_const_lv2_3 = output_strb_V_1_state) and not(((ap_const_logic_1 = output_strb_V_1_vld_in) and (ap_const_logic_0 = output_strb_V_1_ack_out))) and not(((ap_const_logic_0 = output_strb_V_1_vld_in) and (ap_const_logic_1 = output_strb_V_1_ack_out)))))) then 
                    output_strb_V_1_state <= ap_const_lv2_3;
                else 
                    output_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_user_V_1_ack_out) and (ap_const_logic_1 = output_user_V_1_vld_out))) then 
                                        output_user_V_1_sel_rd <= not(output_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_user_V_1_vld_in) and (ap_const_logic_1 = output_user_V_1_ack_out) and (ap_const_lv2_3 = output_user_V_1_state)) or ((ap_const_logic_0 = output_user_V_1_vld_in) and (ap_const_lv2_2 = output_user_V_1_state)))) then 
                    output_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_user_V_1_vld_in) and (ap_const_logic_0 = output_user_V_1_ack_out) and (ap_const_lv2_3 = output_user_V_1_state)) or ((ap_const_logic_0 = output_user_V_1_ack_out) and (ap_const_lv2_1 = output_user_V_1_state)))) then 
                    output_user_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_user_V_1_vld_in) and (ap_const_lv2_2 = output_user_V_1_state)) or ((ap_const_logic_1 = output_user_V_1_ack_out) and (ap_const_lv2_1 = output_user_V_1_state)) or ((ap_const_lv2_3 = output_user_V_1_state) and not(((ap_const_logic_1 = output_user_V_1_vld_in) and (ap_const_logic_0 = output_user_V_1_ack_out))) and not(((ap_const_logic_0 = output_user_V_1_vld_in) and (ap_const_logic_1 = output_user_V_1_ack_out)))))) then 
                    output_user_V_1_state <= ap_const_lv2_3;
                else 
                    output_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = tmp_fu_112_p2))) then 
                i_reg_101 <= i_1_fu_118_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                i_reg_101 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_tmp_reg_135 <= tmp_reg_135;
                tmp_reg_135 <= tmp_fu_112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_fu_112_p2))) then
                last_assign_reg_144 <= last_assign_fu_129_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_data_V_1_load_A)) then
                output_data_V_1_payload_A <= buf_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_data_V_1_load_B)) then
                output_data_V_1_payload_B <= buf_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_last_V_1_load_A)) then
                output_last_V_1_payload_A <= last_assign_reg_144;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_last_V_1_load_B)) then
                output_last_V_1_payload_B <= last_assign_reg_144;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, output_data_V_1_ack_in, output_keep_V_1_ack_in, output_strb_V_1_ack_in, output_user_V_1_ack_in, output_last_V_1_ack_in, output_id_V_1_ack_in, output_dest_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, tmp_fu_112_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00011011, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_fu_112_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_fu_112_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and not(((ap_const_logic_0 = output_data_V_1_ack_in) or (ap_const_logic_0 = output_keep_V_1_ack_in) or (ap_const_logic_0 = output_strb_V_1_ack_in) or (ap_const_logic_0 = output_user_V_1_ack_in) or (ap_const_logic_0 = output_last_V_1_ack_in) or (ap_const_logic_0 = output_id_V_1_ack_in) or (ap_const_logic_0 = output_dest_V_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(output_data_V_1_ack_in, tmp_reg_135)
    begin
                ap_block_state3_io <= ((ap_const_lv1_0 = tmp_reg_135) and (ap_const_logic_0 = output_data_V_1_ack_in));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(output_data_V_1_ack_in, ap_reg_pp0_iter1_tmp_reg_135)
    begin
                ap_block_state4_io <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_135) and (ap_const_logic_0 = output_data_V_1_ack_in));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_assign_proc : process(output_data_V_1_ack_in, output_keep_V_1_ack_in, output_strb_V_1_ack_in, output_user_V_1_ack_in, output_last_V_1_ack_in, output_id_V_1_ack_in, output_dest_V_1_ack_in)
    begin
                ap_block_state5 <= ((ap_const_logic_0 = output_data_V_1_ack_in) or (ap_const_logic_0 = output_keep_V_1_ack_in) or (ap_const_logic_0 = output_strb_V_1_ack_in) or (ap_const_logic_0 = output_user_V_1_ack_in) or (ap_const_logic_0 = output_last_V_1_ack_in) or (ap_const_logic_0 = output_id_V_1_ack_in) or (ap_const_logic_0 = output_dest_V_1_ack_in));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_fu_112_p2)
    begin
        if ((ap_const_lv1_1 = tmp_fu_112_p2)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, output_data_V_1_ack_in, output_keep_V_1_ack_in, output_strb_V_1_ack_in, output_user_V_1_ack_in, output_last_V_1_ack_in, output_id_V_1_ack_in, output_dest_V_1_ack_in, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and not(((ap_const_logic_0 = output_data_V_1_ack_in) or (ap_const_logic_0 = output_keep_V_1_ack_in) or (ap_const_logic_0 = output_strb_V_1_ack_in) or (ap_const_logic_0 = output_user_V_1_ack_in) or (ap_const_logic_0 = output_last_V_1_ack_in) or (ap_const_logic_0 = output_id_V_1_ack_in) or (ap_const_logic_0 = output_dest_V_1_ack_in))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(output_data_V_1_ack_in, output_keep_V_1_ack_in, output_strb_V_1_ack_in, output_user_V_1_ack_in, output_last_V_1_ack_in, output_id_V_1_ack_in, output_dest_V_1_ack_in, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and not(((ap_const_logic_0 = output_data_V_1_ack_in) or (ap_const_logic_0 = output_keep_V_1_ack_in) or (ap_const_logic_0 = output_strb_V_1_ack_in) or (ap_const_logic_0 = output_user_V_1_ack_in) or (ap_const_logic_0 = output_last_V_1_ack_in) or (ap_const_logic_0 = output_id_V_1_ack_in) or (ap_const_logic_0 = output_dest_V_1_ack_in))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buf_V_address0 <= tmp_1_fu_124_p1(2 - 1 downto 0);

    buf_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            buf_V_ce0 <= ap_const_logic_1;
        else 
            buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_118_p2 <= std_logic_vector(unsigned(i_reg_101) + unsigned(ap_const_lv3_1));
    last_assign_fu_129_p2 <= "1" when (i_reg_101 = ap_const_lv3_3) else "0";
    output_AX_ALG_TDATA <= output_data_V_1_data_out;

    output_AX_ALG_TDATA_blk_n_assign_proc : process(output_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, tmp_reg_135, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_reg_135)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_reg_135)) or ((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_135)))) then 
            output_AX_ALG_TDATA_blk_n <= output_data_V_1_state(1);
        else 
            output_AX_ALG_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_AX_ALG_TDEST <= output_dest_V_1_data_out;
    output_AX_ALG_TID <= output_id_V_1_data_out;
    output_AX_ALG_TKEEP <= output_keep_V_1_data_out;
    output_AX_ALG_TLAST <= output_last_V_1_data_out;
    output_AX_ALG_TSTRB <= output_strb_V_1_data_out;
    output_AX_ALG_TUSER <= output_user_V_1_data_out;
    output_AX_ALG_TVALID <= output_dest_V_1_state(0);
    output_data_V_1_ack_in <= output_data_V_1_state(1);
    output_data_V_1_ack_out <= output_AX_ALG_TREADY;

    output_data_V_1_data_out_assign_proc : process(output_data_V_1_payload_A, output_data_V_1_payload_B, output_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_data_V_1_sel)) then 
            output_data_V_1_data_out <= output_data_V_1_payload_B;
        else 
            output_data_V_1_data_out <= output_data_V_1_payload_A;
        end if; 
    end process;

    output_data_V_1_load_A <= (output_data_V_1_state_cmp_full and not(output_data_V_1_sel_wr));
    output_data_V_1_load_B <= (output_data_V_1_sel_wr and output_data_V_1_state_cmp_full);
    output_data_V_1_sel <= output_data_V_1_sel_rd;
    output_data_V_1_state_cmp_full <= '0' when (output_data_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_135, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = tmp_reg_135) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            output_data_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_1_vld_out <= output_data_V_1_state(0);
    output_dest_V_1_ack_in <= output_dest_V_1_state(1);
    output_dest_V_1_ack_out <= output_AX_ALG_TREADY;
    output_dest_V_1_data_out <= ap_const_lv5_0;
    output_dest_V_1_sel <= output_dest_V_1_sel_rd;

    output_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_135, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = tmp_reg_135) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            output_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            output_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_dest_V_1_vld_out <= output_dest_V_1_state(0);
    output_id_V_1_ack_in <= output_id_V_1_state(1);
    output_id_V_1_ack_out <= output_AX_ALG_TREADY;
    output_id_V_1_data_out <= ap_const_lv5_0;
    output_id_V_1_sel <= output_id_V_1_sel_rd;

    output_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_135, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = tmp_reg_135) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            output_id_V_1_vld_in <= ap_const_logic_1;
        else 
            output_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_id_V_1_vld_out <= output_id_V_1_state(0);
    output_keep_V_1_ack_in <= output_keep_V_1_state(1);
    output_keep_V_1_ack_out <= output_AX_ALG_TREADY;
    output_keep_V_1_data_out <= ap_const_lv4_F;
    output_keep_V_1_sel <= output_keep_V_1_sel_rd;

    output_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_135, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = tmp_reg_135) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            output_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            output_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_keep_V_1_vld_out <= output_keep_V_1_state(0);
    output_last_V_1_ack_in <= output_last_V_1_state(1);
    output_last_V_1_ack_out <= output_AX_ALG_TREADY;

    output_last_V_1_data_out_assign_proc : process(output_last_V_1_payload_A, output_last_V_1_payload_B, output_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_last_V_1_sel)) then 
            output_last_V_1_data_out <= output_last_V_1_payload_B;
        else 
            output_last_V_1_data_out <= output_last_V_1_payload_A;
        end if; 
    end process;

    output_last_V_1_load_A <= (output_last_V_1_state_cmp_full and not(output_last_V_1_sel_wr));
    output_last_V_1_load_B <= (output_last_V_1_sel_wr and output_last_V_1_state_cmp_full);
    output_last_V_1_sel <= output_last_V_1_sel_rd;
    output_last_V_1_state_cmp_full <= '0' when (output_last_V_1_state = ap_const_lv2_1) else '1';

    output_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_135, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = tmp_reg_135) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            output_last_V_1_vld_in <= ap_const_logic_1;
        else 
            output_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_last_V_1_vld_out <= output_last_V_1_state(0);
    output_strb_V_1_ack_in <= output_strb_V_1_state(1);
    output_strb_V_1_ack_out <= output_AX_ALG_TREADY;
    output_strb_V_1_data_out <= ap_const_lv4_F;
    output_strb_V_1_sel <= output_strb_V_1_sel_rd;

    output_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_135, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = tmp_reg_135) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            output_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            output_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_strb_V_1_vld_out <= output_strb_V_1_state(0);
    output_user_V_1_ack_in <= output_user_V_1_state(1);
    output_user_V_1_ack_out <= output_AX_ALG_TREADY;
    output_user_V_1_data_out <= ap_const_lv4_0;
    output_user_V_1_sel <= output_user_V_1_sel_rd;

    output_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_135, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = tmp_reg_135) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            output_user_V_1_vld_in <= ap_const_logic_1;
        else 
            output_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_user_V_1_vld_out <= output_user_V_1_state(0);
    tmp_1_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_101),32));
    tmp_fu_112_p2 <= "1" when (i_reg_101 = ap_const_lv3_4) else "0";
end behav;
