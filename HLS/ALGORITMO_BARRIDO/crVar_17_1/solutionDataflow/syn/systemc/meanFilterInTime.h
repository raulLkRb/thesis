// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _meanFilterInTime_HH_
#define _meanFilterInTime_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "meanFilterInTime_bkb.h"

namespace ap_rtl {

struct meanFilterInTime : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > x_V;
    sc_in< sc_lv<1> > reset;
    sc_out< sc_lv<32> > ap_return;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    meanFilterInTime(sc_module_name name);
    SC_HAS_PROCESS(meanFilterInTime);

    ~meanFilterInTime();

    sc_trace_file* mVcdFile;

    meanFilterInTime_bkb* aux_array_V_U;
    sc_signal< sc_lv<14> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > aux_array_V_address0;
    sc_signal< sc_logic > aux_array_V_ce0;
    sc_signal< sc_lv<32> > aux_array_V_q0;
    sc_signal< sc_lv<3> > aux_array_V_address1;
    sc_signal< sc_logic > aux_array_V_ce1;
    sc_signal< sc_logic > aux_array_V_we1;
    sc_signal< sc_lv<32> > aux_array_V_d1;
    sc_signal< sc_lv<1> > reset_read_read_fu_42_p2;
    sc_signal< sc_lv<1> > reset_read_reg_153;
    sc_signal< sc_lv<32> > x_V_read_reg_157;
    sc_signal< sc_lv<32> > aux_array_V_load_6_reg_163;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > aux_array_V_load_reg_169;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > aux_array_V_load_1_reg_175;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > aux_array_V_load_2_reg_181;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > aux_array_V_load_3_reg_187;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > aux_array_V_load_4_reg_193;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > aux_array_V_load_5_reg_199;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<32> > y_0_V_write_assign_reg_205;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<33> > tmp_31_cast_i_fu_77_p1;
    sc_signal< sc_lv<33> > tmp_31_1_cast_i_fu_80_p1;
    sc_signal< sc_lv<33> > tmp_31_2_cast_i_fu_83_p1;
    sc_signal< sc_lv<33> > tmp_31_3_cast_i_fu_86_p1;
    sc_signal< sc_lv<33> > tmp2_fu_107_p2;
    sc_signal< sc_lv<33> > tmp1_fu_101_p2;
    sc_signal< sc_lv<33> > tmp_31_4_cast_i_fu_89_p1;
    sc_signal< sc_lv<33> > tmp_31_5_cast_i_fu_92_p1;
    sc_signal< sc_lv<33> > tmp_31_6_cast_i_fu_95_p1;
    sc_signal< sc_lv<33> > tmp_cast_i_fu_98_p1;
    sc_signal< sc_lv<33> > tmp5_fu_125_p2;
    sc_signal< sc_lv<33> > tmp4_fu_119_p2;
    sc_signal< sc_lv<33> > tmp3_fu_131_p2;
    sc_signal< sc_lv<33> > tmp_fu_113_p2;
    sc_signal< sc_lv<33> > p_Val2_i_fu_137_p2;
    sc_signal< sc_lv<14> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<14> ap_ST_fsm_state1;
    static const sc_lv<14> ap_ST_fsm_state2;
    static const sc_lv<14> ap_ST_fsm_state3;
    static const sc_lv<14> ap_ST_fsm_state4;
    static const sc_lv<14> ap_ST_fsm_state5;
    static const sc_lv<14> ap_ST_fsm_state6;
    static const sc_lv<14> ap_ST_fsm_state7;
    static const sc_lv<14> ap_ST_fsm_state8;
    static const sc_lv<14> ap_ST_fsm_state9;
    static const sc_lv<14> ap_ST_fsm_state10;
    static const sc_lv<14> ap_ST_fsm_state11;
    static const sc_lv<14> ap_ST_fsm_state12;
    static const sc_lv<14> ap_ST_fsm_state13;
    static const sc_lv<14> ap_ST_fsm_state14;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_7;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_20;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_aux_array_V_address0();
    void thread_aux_array_V_address1();
    void thread_aux_array_V_ce0();
    void thread_aux_array_V_ce1();
    void thread_aux_array_V_d1();
    void thread_aux_array_V_we1();
    void thread_p_Val2_i_fu_137_p2();
    void thread_reset_read_read_fu_42_p2();
    void thread_tmp1_fu_101_p2();
    void thread_tmp2_fu_107_p2();
    void thread_tmp3_fu_131_p2();
    void thread_tmp4_fu_119_p2();
    void thread_tmp5_fu_125_p2();
    void thread_tmp_31_1_cast_i_fu_80_p1();
    void thread_tmp_31_2_cast_i_fu_83_p1();
    void thread_tmp_31_3_cast_i_fu_86_p1();
    void thread_tmp_31_4_cast_i_fu_89_p1();
    void thread_tmp_31_5_cast_i_fu_92_p1();
    void thread_tmp_31_6_cast_i_fu_95_p1();
    void thread_tmp_31_cast_i_fu_77_p1();
    void thread_tmp_cast_i_fu_98_p1();
    void thread_tmp_fu_113_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
