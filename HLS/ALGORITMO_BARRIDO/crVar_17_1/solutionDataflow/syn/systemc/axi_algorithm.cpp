// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "axi_algorithm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic axi_algorithm::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> axi_algorithm::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> axi_algorithm::ap_const_lv4_0 = "0000";
const sc_lv<1> axi_algorithm::ap_const_lv1_0 = "0";
const sc_lv<5> axi_algorithm::ap_const_lv5_0 = "00000";
const sc_logic axi_algorithm::ap_const_logic_0 = sc_dt::Log_0;

axi_algorithm::axi_algorithm(sc_module_name name) : sc_module(name), mVcdFile(0) {
    buf_DISTANCEX_out_V_U = new axi_algorithm_bufg8j("buf_DISTANCEX_out_V_U");
    buf_DISTANCEX_out_V_U->clk(ap_clk);
    buf_DISTANCEX_out_V_U->reset(ap_rst_n_inv);
    buf_DISTANCEX_out_V_U->i_address0(sweep_algorithm_DECM_U0_currentGroupX_OUT_V_address0);
    buf_DISTANCEX_out_V_U->i_ce0(sweep_algorithm_DECM_U0_currentGroupX_OUT_V_ce0);
    buf_DISTANCEX_out_V_U->i_we0(sweep_algorithm_DECM_U0_currentGroupX_OUT_V_we0);
    buf_DISTANCEX_out_V_U->i_d0(sweep_algorithm_DECM_U0_currentGroupX_OUT_V_d0);
    buf_DISTANCEX_out_V_U->i_q0(buf_DISTANCEX_out_V_i_q0);
    buf_DISTANCEX_out_V_U->t_address0(write_data_U0_buf_V_address0);
    buf_DISTANCEX_out_V_U->t_ce0(write_data_U0_buf_V_ce0);
    buf_DISTANCEX_out_V_U->t_we0(ap_var_for_const0);
    buf_DISTANCEX_out_V_U->t_d0(ap_var_for_const1);
    buf_DISTANCEX_out_V_U->t_q0(buf_DISTANCEX_out_V_t_q0);
    buf_DISTANCEX_out_V_U->i_ce(ap_var_for_const2);
    buf_DISTANCEX_out_V_U->t_ce(ap_var_for_const2);
    buf_DISTANCEX_out_V_U->i_full_n(buf_DISTANCEX_out_V_i_full_n);
    buf_DISTANCEX_out_V_U->i_write(sweep_algorithm_DECM_U0_ap_done);
    buf_DISTANCEX_out_V_U->t_empty_n(buf_DISTANCEX_out_V_t_empty_n);
    buf_DISTANCEX_out_V_U->t_read(write_data_U0_ap_ready);
    read_data_U0 = new read_data("read_data_U0");
    read_data_U0->ap_clk(ap_clk);
    read_data_U0->ap_rst(ap_rst_n_inv);
    read_data_U0->ap_start(read_data_U0_ap_start);
    read_data_U0->ap_done(read_data_U0_ap_done);
    read_data_U0->ap_continue(read_data_U0_ap_continue);
    read_data_U0->ap_idle(read_data_U0_ap_idle);
    read_data_U0->ap_ready(read_data_U0_ap_ready);
    read_data_U0->input_AX_ALG_TDATA(input_AX_ALG_TDATA);
    read_data_U0->input_AX_ALG_TVALID(input_AX_ALG_TVALID);
    read_data_U0->input_AX_ALG_TREADY(read_data_U0_input_AX_ALG_TREADY);
    read_data_U0->input_AX_ALG_TKEEP(input_AX_ALG_TKEEP);
    read_data_U0->input_AX_ALG_TSTRB(input_AX_ALG_TSTRB);
    read_data_U0->input_AX_ALG_TUSER(input_AX_ALG_TUSER);
    read_data_U0->input_AX_ALG_TLAST(input_AX_ALG_TLAST);
    read_data_U0->input_AX_ALG_TID(input_AX_ALG_TID);
    read_data_U0->input_AX_ALG_TDEST(input_AX_ALG_TDEST);
    read_data_U0->ap_return(read_data_U0_ap_return);
    Block_arrayctor_loop_U0 = new Block_arrayctor_loop("Block_arrayctor_loop_U0");
    Block_arrayctor_loop_U0->ap_clk(ap_clk);
    Block_arrayctor_loop_U0->ap_rst(ap_rst_n_inv);
    Block_arrayctor_loop_U0->ap_start(Block_arrayctor_loop_U0_ap_start);
    Block_arrayctor_loop_U0->ap_done(Block_arrayctor_loop_U0_ap_done);
    Block_arrayctor_loop_U0->ap_continue(Block_arrayctor_loop_U0_ap_continue);
    Block_arrayctor_loop_U0->ap_idle(Block_arrayctor_loop_U0_ap_idle);
    Block_arrayctor_loop_U0->ap_ready(Block_arrayctor_loop_U0_ap_ready);
    Block_arrayctor_loop_U0->p_read(buf_Tj_in_0_V_dout);
    Block_arrayctor_loop_U0->ap_return(Block_arrayctor_loop_U0_ap_return);
    sweep_algorithm_DECM_U0 = new sweep_algorithm_DECM("sweep_algorithm_DECM_U0");
    sweep_algorithm_DECM_U0->ap_clk(ap_clk);
    sweep_algorithm_DECM_U0->ap_rst(ap_rst_n_inv);
    sweep_algorithm_DECM_U0->ap_start(sweep_algorithm_DECM_U0_ap_start);
    sweep_algorithm_DECM_U0->ap_done(sweep_algorithm_DECM_U0_ap_done);
    sweep_algorithm_DECM_U0->ap_continue(sweep_algorithm_DECM_U0_ap_continue);
    sweep_algorithm_DECM_U0->ap_idle(sweep_algorithm_DECM_U0_ap_idle);
    sweep_algorithm_DECM_U0->ap_ready(sweep_algorithm_DECM_U0_ap_ready);
    sweep_algorithm_DECM_U0->p_read(p_Val2_cast_loc_ch_dout);
    sweep_algorithm_DECM_U0->currentGroupX_OUT_V_address0(sweep_algorithm_DECM_U0_currentGroupX_OUT_V_address0);
    sweep_algorithm_DECM_U0->currentGroupX_OUT_V_ce0(sweep_algorithm_DECM_U0_currentGroupX_OUT_V_ce0);
    sweep_algorithm_DECM_U0->currentGroupX_OUT_V_we0(sweep_algorithm_DECM_U0_currentGroupX_OUT_V_we0);
    sweep_algorithm_DECM_U0->currentGroupX_OUT_V_d0(sweep_algorithm_DECM_U0_currentGroupX_OUT_V_d0);
    sweep_algorithm_DECM_U0->currentGroupX_OUT_V_q0(buf_DISTANCEX_out_V_i_q0);
    write_data_U0 = new write_data("write_data_U0");
    write_data_U0->ap_clk(ap_clk);
    write_data_U0->ap_rst(ap_rst_n_inv);
    write_data_U0->ap_start(write_data_U0_ap_start);
    write_data_U0->ap_done(write_data_U0_ap_done);
    write_data_U0->ap_continue(write_data_U0_ap_continue);
    write_data_U0->ap_idle(write_data_U0_ap_idle);
    write_data_U0->ap_ready(write_data_U0_ap_ready);
    write_data_U0->buf_V_address0(write_data_U0_buf_V_address0);
    write_data_U0->buf_V_ce0(write_data_U0_buf_V_ce0);
    write_data_U0->buf_V_q0(buf_DISTANCEX_out_V_t_q0);
    write_data_U0->output_AX_ALG_TDATA(write_data_U0_output_AX_ALG_TDATA);
    write_data_U0->output_AX_ALG_TVALID(write_data_U0_output_AX_ALG_TVALID);
    write_data_U0->output_AX_ALG_TREADY(output_AX_ALG_TREADY);
    write_data_U0->output_AX_ALG_TKEEP(write_data_U0_output_AX_ALG_TKEEP);
    write_data_U0->output_AX_ALG_TSTRB(write_data_U0_output_AX_ALG_TSTRB);
    write_data_U0->output_AX_ALG_TUSER(write_data_U0_output_AX_ALG_TUSER);
    write_data_U0->output_AX_ALG_TLAST(write_data_U0_output_AX_ALG_TLAST);
    write_data_U0->output_AX_ALG_TID(write_data_U0_output_AX_ALG_TID);
    write_data_U0->output_AX_ALG_TDEST(write_data_U0_output_AX_ALG_TDEST);
    buf_Tj_in_0_V_U = new fifo_w32_d2_A("buf_Tj_in_0_V_U");
    buf_Tj_in_0_V_U->clk(ap_clk);
    buf_Tj_in_0_V_U->reset(ap_rst_n_inv);
    buf_Tj_in_0_V_U->if_read_ce(ap_var_for_const2);
    buf_Tj_in_0_V_U->if_write_ce(ap_var_for_const2);
    buf_Tj_in_0_V_U->if_din(read_data_U0_ap_return);
    buf_Tj_in_0_V_U->if_full_n(buf_Tj_in_0_V_full_n);
    buf_Tj_in_0_V_U->if_write(read_data_U0_ap_done);
    buf_Tj_in_0_V_U->if_dout(buf_Tj_in_0_V_dout);
    buf_Tj_in_0_V_U->if_empty_n(buf_Tj_in_0_V_empty_n);
    buf_Tj_in_0_V_U->if_read(Block_arrayctor_loop_U0_ap_ready);
    p_Val2_cast_loc_ch_U = new fifo_w24_d2_A("p_Val2_cast_loc_ch_U");
    p_Val2_cast_loc_ch_U->clk(ap_clk);
    p_Val2_cast_loc_ch_U->reset(ap_rst_n_inv);
    p_Val2_cast_loc_ch_U->if_read_ce(ap_var_for_const2);
    p_Val2_cast_loc_ch_U->if_write_ce(ap_var_for_const2);
    p_Val2_cast_loc_ch_U->if_din(Block_arrayctor_loop_U0_ap_return);
    p_Val2_cast_loc_ch_U->if_full_n(p_Val2_cast_loc_ch_full_n);
    p_Val2_cast_loc_ch_U->if_write(Block_arrayctor_loop_U0_ap_done);
    p_Val2_cast_loc_ch_U->if_dout(p_Val2_cast_loc_ch_dout);
    p_Val2_cast_loc_ch_U->if_empty_n(p_Val2_cast_loc_ch_empty_n);
    p_Val2_cast_loc_ch_U->if_read(sweep_algorithm_DECM_U0_ap_ready);

    SC_METHOD(thread_Block_arrayctor_loop_U0_ap_continue);
    sensitive << ( p_Val2_cast_loc_ch_full_n );

    SC_METHOD(thread_Block_arrayctor_loop_U0_ap_start);
    sensitive << ( buf_Tj_in_0_V_empty_n );

    SC_METHOD(thread_Block_arrayctor_loop_U0_start_full_n);

    SC_METHOD(thread_Block_arrayctor_loop_U0_start_write);

    SC_METHOD(thread_ap_channel_done_buf_DISTANCEX_out_V);
    sensitive << ( sweep_algorithm_DECM_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_buf_Tj_in_0_V);
    sensitive << ( read_data_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_p_Val2_cast_loc_ch);
    sensitive << ( Block_arrayctor_loop_U0_ap_done );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_input_AX_ALG_TREADY);
    sensitive << ( read_data_U0_input_AX_ALG_TREADY );

    SC_METHOD(thread_output_AX_ALG_TDATA);
    sensitive << ( write_data_U0_output_AX_ALG_TDATA );

    SC_METHOD(thread_output_AX_ALG_TDEST);
    sensitive << ( write_data_U0_output_AX_ALG_TDEST );

    SC_METHOD(thread_output_AX_ALG_TID);
    sensitive << ( write_data_U0_output_AX_ALG_TID );

    SC_METHOD(thread_output_AX_ALG_TKEEP);
    sensitive << ( write_data_U0_output_AX_ALG_TKEEP );

    SC_METHOD(thread_output_AX_ALG_TLAST);
    sensitive << ( write_data_U0_output_AX_ALG_TLAST );

    SC_METHOD(thread_output_AX_ALG_TSTRB);
    sensitive << ( write_data_U0_output_AX_ALG_TSTRB );

    SC_METHOD(thread_output_AX_ALG_TUSER);
    sensitive << ( write_data_U0_output_AX_ALG_TUSER );

    SC_METHOD(thread_output_AX_ALG_TVALID);
    sensitive << ( write_data_U0_output_AX_ALG_TVALID );

    SC_METHOD(thread_read_data_U0_ap_continue);
    sensitive << ( buf_Tj_in_0_V_full_n );

    SC_METHOD(thread_read_data_U0_ap_start);

    SC_METHOD(thread_read_data_U0_start_full_n);

    SC_METHOD(thread_read_data_U0_start_write);

    SC_METHOD(thread_sweep_algorithm_DECM_U0_ap_continue);
    sensitive << ( buf_DISTANCEX_out_V_i_full_n );

    SC_METHOD(thread_sweep_algorithm_DECM_U0_ap_start);
    sensitive << ( p_Val2_cast_loc_ch_empty_n );

    SC_METHOD(thread_sweep_algorithm_DECM_U0_currentGroupX_OUT_V_full_n);
    sensitive << ( buf_DISTANCEX_out_V_i_full_n );

    SC_METHOD(thread_sweep_algorithm_DECM_U0_start_full_n);

    SC_METHOD(thread_sweep_algorithm_DECM_U0_start_write);

    SC_METHOD(thread_write_data_U0_ap_continue);

    SC_METHOD(thread_write_data_U0_ap_start);
    sensitive << ( buf_DISTANCEX_out_V_t_empty_n );

    SC_METHOD(thread_write_data_U0_start_full_n);

    SC_METHOD(thread_write_data_U0_start_write);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "axi_algorithm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, input_AX_ALG_TDATA, "(port)input_AX_ALG_TDATA");
    sc_trace(mVcdFile, input_AX_ALG_TKEEP, "(port)input_AX_ALG_TKEEP");
    sc_trace(mVcdFile, input_AX_ALG_TSTRB, "(port)input_AX_ALG_TSTRB");
    sc_trace(mVcdFile, input_AX_ALG_TUSER, "(port)input_AX_ALG_TUSER");
    sc_trace(mVcdFile, input_AX_ALG_TLAST, "(port)input_AX_ALG_TLAST");
    sc_trace(mVcdFile, input_AX_ALG_TID, "(port)input_AX_ALG_TID");
    sc_trace(mVcdFile, input_AX_ALG_TDEST, "(port)input_AX_ALG_TDEST");
    sc_trace(mVcdFile, output_AX_ALG_TDATA, "(port)output_AX_ALG_TDATA");
    sc_trace(mVcdFile, output_AX_ALG_TKEEP, "(port)output_AX_ALG_TKEEP");
    sc_trace(mVcdFile, output_AX_ALG_TSTRB, "(port)output_AX_ALG_TSTRB");
    sc_trace(mVcdFile, output_AX_ALG_TUSER, "(port)output_AX_ALG_TUSER");
    sc_trace(mVcdFile, output_AX_ALG_TLAST, "(port)output_AX_ALG_TLAST");
    sc_trace(mVcdFile, output_AX_ALG_TID, "(port)output_AX_ALG_TID");
    sc_trace(mVcdFile, output_AX_ALG_TDEST, "(port)output_AX_ALG_TDEST");
    sc_trace(mVcdFile, input_AX_ALG_TVALID, "(port)input_AX_ALG_TVALID");
    sc_trace(mVcdFile, input_AX_ALG_TREADY, "(port)input_AX_ALG_TREADY");
    sc_trace(mVcdFile, output_AX_ALG_TVALID, "(port)output_AX_ALG_TVALID");
    sc_trace(mVcdFile, output_AX_ALG_TREADY, "(port)output_AX_ALG_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, buf_DISTANCEX_out_V_i_q0, "buf_DISTANCEX_out_V_i_q0");
    sc_trace(mVcdFile, buf_DISTANCEX_out_V_t_q0, "buf_DISTANCEX_out_V_t_q0");
    sc_trace(mVcdFile, read_data_U0_ap_start, "read_data_U0_ap_start");
    sc_trace(mVcdFile, read_data_U0_ap_done, "read_data_U0_ap_done");
    sc_trace(mVcdFile, read_data_U0_ap_continue, "read_data_U0_ap_continue");
    sc_trace(mVcdFile, read_data_U0_ap_idle, "read_data_U0_ap_idle");
    sc_trace(mVcdFile, read_data_U0_ap_ready, "read_data_U0_ap_ready");
    sc_trace(mVcdFile, read_data_U0_input_AX_ALG_TREADY, "read_data_U0_input_AX_ALG_TREADY");
    sc_trace(mVcdFile, read_data_U0_ap_return, "read_data_U0_ap_return");
    sc_trace(mVcdFile, ap_channel_done_buf_Tj_in_0_V, "ap_channel_done_buf_Tj_in_0_V");
    sc_trace(mVcdFile, buf_Tj_in_0_V_full_n, "buf_Tj_in_0_V_full_n");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_ap_start, "Block_arrayctor_loop_U0_ap_start");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_ap_done, "Block_arrayctor_loop_U0_ap_done");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_ap_continue, "Block_arrayctor_loop_U0_ap_continue");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_ap_idle, "Block_arrayctor_loop_U0_ap_idle");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_ap_ready, "Block_arrayctor_loop_U0_ap_ready");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_ap_return, "Block_arrayctor_loop_U0_ap_return");
    sc_trace(mVcdFile, ap_channel_done_p_Val2_cast_loc_ch, "ap_channel_done_p_Val2_cast_loc_ch");
    sc_trace(mVcdFile, p_Val2_cast_loc_ch_full_n, "p_Val2_cast_loc_ch_full_n");
    sc_trace(mVcdFile, sweep_algorithm_DECM_U0_ap_start, "sweep_algorithm_DECM_U0_ap_start");
    sc_trace(mVcdFile, sweep_algorithm_DECM_U0_ap_done, "sweep_algorithm_DECM_U0_ap_done");
    sc_trace(mVcdFile, sweep_algorithm_DECM_U0_ap_continue, "sweep_algorithm_DECM_U0_ap_continue");
    sc_trace(mVcdFile, sweep_algorithm_DECM_U0_ap_idle, "sweep_algorithm_DECM_U0_ap_idle");
    sc_trace(mVcdFile, sweep_algorithm_DECM_U0_ap_ready, "sweep_algorithm_DECM_U0_ap_ready");
    sc_trace(mVcdFile, sweep_algorithm_DECM_U0_currentGroupX_OUT_V_address0, "sweep_algorithm_DECM_U0_currentGroupX_OUT_V_address0");
    sc_trace(mVcdFile, sweep_algorithm_DECM_U0_currentGroupX_OUT_V_ce0, "sweep_algorithm_DECM_U0_currentGroupX_OUT_V_ce0");
    sc_trace(mVcdFile, sweep_algorithm_DECM_U0_currentGroupX_OUT_V_we0, "sweep_algorithm_DECM_U0_currentGroupX_OUT_V_we0");
    sc_trace(mVcdFile, sweep_algorithm_DECM_U0_currentGroupX_OUT_V_d0, "sweep_algorithm_DECM_U0_currentGroupX_OUT_V_d0");
    sc_trace(mVcdFile, ap_channel_done_buf_DISTANCEX_out_V, "ap_channel_done_buf_DISTANCEX_out_V");
    sc_trace(mVcdFile, sweep_algorithm_DECM_U0_currentGroupX_OUT_V_full_n, "sweep_algorithm_DECM_U0_currentGroupX_OUT_V_full_n");
    sc_trace(mVcdFile, write_data_U0_ap_start, "write_data_U0_ap_start");
    sc_trace(mVcdFile, write_data_U0_ap_done, "write_data_U0_ap_done");
    sc_trace(mVcdFile, write_data_U0_ap_continue, "write_data_U0_ap_continue");
    sc_trace(mVcdFile, write_data_U0_ap_idle, "write_data_U0_ap_idle");
    sc_trace(mVcdFile, write_data_U0_ap_ready, "write_data_U0_ap_ready");
    sc_trace(mVcdFile, write_data_U0_buf_V_address0, "write_data_U0_buf_V_address0");
    sc_trace(mVcdFile, write_data_U0_buf_V_ce0, "write_data_U0_buf_V_ce0");
    sc_trace(mVcdFile, write_data_U0_output_AX_ALG_TDATA, "write_data_U0_output_AX_ALG_TDATA");
    sc_trace(mVcdFile, write_data_U0_output_AX_ALG_TVALID, "write_data_U0_output_AX_ALG_TVALID");
    sc_trace(mVcdFile, write_data_U0_output_AX_ALG_TKEEP, "write_data_U0_output_AX_ALG_TKEEP");
    sc_trace(mVcdFile, write_data_U0_output_AX_ALG_TSTRB, "write_data_U0_output_AX_ALG_TSTRB");
    sc_trace(mVcdFile, write_data_U0_output_AX_ALG_TUSER, "write_data_U0_output_AX_ALG_TUSER");
    sc_trace(mVcdFile, write_data_U0_output_AX_ALG_TLAST, "write_data_U0_output_AX_ALG_TLAST");
    sc_trace(mVcdFile, write_data_U0_output_AX_ALG_TID, "write_data_U0_output_AX_ALG_TID");
    sc_trace(mVcdFile, write_data_U0_output_AX_ALG_TDEST, "write_data_U0_output_AX_ALG_TDEST");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, buf_DISTANCEX_out_V_i_full_n, "buf_DISTANCEX_out_V_i_full_n");
    sc_trace(mVcdFile, buf_DISTANCEX_out_V_t_empty_n, "buf_DISTANCEX_out_V_t_empty_n");
    sc_trace(mVcdFile, buf_Tj_in_0_V_dout, "buf_Tj_in_0_V_dout");
    sc_trace(mVcdFile, buf_Tj_in_0_V_empty_n, "buf_Tj_in_0_V_empty_n");
    sc_trace(mVcdFile, p_Val2_cast_loc_ch_dout, "p_Val2_cast_loc_ch_dout");
    sc_trace(mVcdFile, p_Val2_cast_loc_ch_empty_n, "p_Val2_cast_loc_ch_empty_n");
    sc_trace(mVcdFile, read_data_U0_start_full_n, "read_data_U0_start_full_n");
    sc_trace(mVcdFile, read_data_U0_start_write, "read_data_U0_start_write");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_start_full_n, "Block_arrayctor_loop_U0_start_full_n");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_start_write, "Block_arrayctor_loop_U0_start_write");
    sc_trace(mVcdFile, sweep_algorithm_DECM_U0_start_full_n, "sweep_algorithm_DECM_U0_start_full_n");
    sc_trace(mVcdFile, sweep_algorithm_DECM_U0_start_write, "sweep_algorithm_DECM_U0_start_write");
    sc_trace(mVcdFile, write_data_U0_start_full_n, "write_data_U0_start_full_n");
    sc_trace(mVcdFile, write_data_U0_start_write, "write_data_U0_start_write");
#endif

    }
    mHdltvinHandle.open("axi_algorithm.hdltvin.dat");
    mHdltvoutHandle.open("axi_algorithm.hdltvout.dat");
}

axi_algorithm::~axi_algorithm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete buf_DISTANCEX_out_V_U;
    delete read_data_U0;
    delete Block_arrayctor_loop_U0;
    delete sweep_algorithm_DECM_U0;
    delete write_data_U0;
    delete buf_Tj_in_0_V_U;
    delete p_Val2_cast_loc_ch_U;
}

void axi_algorithm::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_logic_1;
}

void axi_algorithm::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void axi_algorithm::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_0;
}

void axi_algorithm::thread_Block_arrayctor_loop_U0_ap_continue() {
    Block_arrayctor_loop_U0_ap_continue = p_Val2_cast_loc_ch_full_n.read();
}

void axi_algorithm::thread_Block_arrayctor_loop_U0_ap_start() {
    Block_arrayctor_loop_U0_ap_start = buf_Tj_in_0_V_empty_n.read();
}

void axi_algorithm::thread_Block_arrayctor_loop_U0_start_full_n() {
    Block_arrayctor_loop_U0_start_full_n = ap_const_logic_0;
}

void axi_algorithm::thread_Block_arrayctor_loop_U0_start_write() {
    Block_arrayctor_loop_U0_start_write = ap_const_logic_0;
}

void axi_algorithm::thread_ap_channel_done_buf_DISTANCEX_out_V() {
    ap_channel_done_buf_DISTANCEX_out_V = sweep_algorithm_DECM_U0_ap_done.read();
}

void axi_algorithm::thread_ap_channel_done_buf_Tj_in_0_V() {
    ap_channel_done_buf_Tj_in_0_V = read_data_U0_ap_done.read();
}

void axi_algorithm::thread_ap_channel_done_p_Val2_cast_loc_ch() {
    ap_channel_done_p_Val2_cast_loc_ch = Block_arrayctor_loop_U0_ap_done.read();
}

void axi_algorithm::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void axi_algorithm::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void axi_algorithm::thread_input_AX_ALG_TREADY() {
    input_AX_ALG_TREADY = read_data_U0_input_AX_ALG_TREADY.read();
}

void axi_algorithm::thread_output_AX_ALG_TDATA() {
    output_AX_ALG_TDATA = write_data_U0_output_AX_ALG_TDATA.read();
}

void axi_algorithm::thread_output_AX_ALG_TDEST() {
    output_AX_ALG_TDEST = write_data_U0_output_AX_ALG_TDEST.read();
}

void axi_algorithm::thread_output_AX_ALG_TID() {
    output_AX_ALG_TID = write_data_U0_output_AX_ALG_TID.read();
}

void axi_algorithm::thread_output_AX_ALG_TKEEP() {
    output_AX_ALG_TKEEP = write_data_U0_output_AX_ALG_TKEEP.read();
}

void axi_algorithm::thread_output_AX_ALG_TLAST() {
    output_AX_ALG_TLAST = write_data_U0_output_AX_ALG_TLAST.read();
}

void axi_algorithm::thread_output_AX_ALG_TSTRB() {
    output_AX_ALG_TSTRB = write_data_U0_output_AX_ALG_TSTRB.read();
}

void axi_algorithm::thread_output_AX_ALG_TUSER() {
    output_AX_ALG_TUSER = write_data_U0_output_AX_ALG_TUSER.read();
}

void axi_algorithm::thread_output_AX_ALG_TVALID() {
    output_AX_ALG_TVALID = write_data_U0_output_AX_ALG_TVALID.read();
}

void axi_algorithm::thread_read_data_U0_ap_continue() {
    read_data_U0_ap_continue = buf_Tj_in_0_V_full_n.read();
}

void axi_algorithm::thread_read_data_U0_ap_start() {
    read_data_U0_ap_start = ap_const_logic_1;
}

void axi_algorithm::thread_read_data_U0_start_full_n() {
    read_data_U0_start_full_n = ap_const_logic_0;
}

void axi_algorithm::thread_read_data_U0_start_write() {
    read_data_U0_start_write = ap_const_logic_0;
}

void axi_algorithm::thread_sweep_algorithm_DECM_U0_ap_continue() {
    sweep_algorithm_DECM_U0_ap_continue = buf_DISTANCEX_out_V_i_full_n.read();
}

void axi_algorithm::thread_sweep_algorithm_DECM_U0_ap_start() {
    sweep_algorithm_DECM_U0_ap_start = p_Val2_cast_loc_ch_empty_n.read();
}

void axi_algorithm::thread_sweep_algorithm_DECM_U0_currentGroupX_OUT_V_full_n() {
    sweep_algorithm_DECM_U0_currentGroupX_OUT_V_full_n = buf_DISTANCEX_out_V_i_full_n.read();
}

void axi_algorithm::thread_sweep_algorithm_DECM_U0_start_full_n() {
    sweep_algorithm_DECM_U0_start_full_n = ap_const_logic_0;
}

void axi_algorithm::thread_sweep_algorithm_DECM_U0_start_write() {
    sweep_algorithm_DECM_U0_start_write = ap_const_logic_0;
}

void axi_algorithm::thread_write_data_U0_ap_continue() {
    write_data_U0_ap_continue = ap_const_logic_1;
}

void axi_algorithm::thread_write_data_U0_ap_start() {
    write_data_U0_ap_start = buf_DISTANCEX_out_V_t_empty_n.read();
}

void axi_algorithm::thread_write_data_U0_start_full_n() {
    write_data_U0_start_full_n = ap_const_logic_0;
}

void axi_algorithm::thread_write_data_U0_start_write() {
    write_data_U0_start_write = ap_const_logic_0;
}

void axi_algorithm::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TDATA\" :  \"" << input_AX_ALG_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TKEEP\" :  \"" << input_AX_ALG_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TSTRB\" :  \"" << input_AX_ALG_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TUSER\" :  \"" << input_AX_ALG_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TLAST\" :  \"" << input_AX_ALG_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TID\" :  \"" << input_AX_ALG_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TDEST\" :  \"" << input_AX_ALG_TDEST.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"output_AX_ALG_TDATA\" :  \"" << output_AX_ALG_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TKEEP\" :  \"" << output_AX_ALG_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TSTRB\" :  \"" << output_AX_ALG_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TUSER\" :  \"" << output_AX_ALG_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TLAST\" :  \"" << output_AX_ALG_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TID\" :  \"" << output_AX_ALG_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TDEST\" :  \"" << output_AX_ALG_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TVALID\" :  \"" << input_AX_ALG_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_AX_ALG_TREADY\" :  \"" << input_AX_ALG_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TVALID\" :  \"" << output_AX_ALG_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"output_AX_ALG_TREADY\" :  \"" << output_AX_ALG_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

