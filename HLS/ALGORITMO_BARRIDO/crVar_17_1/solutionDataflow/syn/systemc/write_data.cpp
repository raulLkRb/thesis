// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "write_data.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic write_data::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic write_data::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> write_data::ap_ST_fsm_state1 = "1";
const sc_lv<3> write_data::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> write_data::ap_ST_fsm_state5 = "100";
const sc_lv<32> write_data::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool write_data::ap_const_boolean_1 = true;
const sc_lv<1> write_data::ap_const_lv1_0 = "0";
const sc_lv<1> write_data::ap_const_lv1_1 = "1";
const sc_lv<2> write_data::ap_const_lv2_0 = "00";
const sc_lv<2> write_data::ap_const_lv2_2 = "10";
const sc_lv<2> write_data::ap_const_lv2_3 = "11";
const sc_lv<2> write_data::ap_const_lv2_1 = "1";
const sc_lv<32> write_data::ap_const_lv32_1 = "1";
const bool write_data::ap_const_boolean_0 = false;
const sc_lv<3> write_data::ap_const_lv3_0 = "000";
const sc_lv<4> write_data::ap_const_lv4_F = "1111";
const sc_lv<4> write_data::ap_const_lv4_0 = "0000";
const sc_lv<5> write_data::ap_const_lv5_0 = "00000";
const sc_lv<3> write_data::ap_const_lv3_4 = "100";
const sc_lv<3> write_data::ap_const_lv3_1 = "1";
const sc_lv<3> write_data::ap_const_lv3_3 = "11";
const sc_lv<32> write_data::ap_const_lv32_2 = "10";

write_data::write_data(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00001001);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011011);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( output_data_V_1_ack_in );
    sensitive << ( tmp_reg_135 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( output_data_V_1_ack_in );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_135 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( output_data_V_1_ack_in );
    sensitive << ( output_keep_V_1_ack_in );
    sensitive << ( output_strb_V_1_ack_in );
    sensitive << ( output_user_V_1_ack_in );
    sensitive << ( output_last_V_1_ack_in );
    sensitive << ( output_id_V_1_ack_in );
    sensitive << ( output_dest_V_1_ack_in );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( tmp_fu_112_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( output_data_V_1_ack_in );
    sensitive << ( output_keep_V_1_ack_in );
    sensitive << ( output_strb_V_1_ack_in );
    sensitive << ( output_user_V_1_ack_in );
    sensitive << ( output_last_V_1_ack_in );
    sensitive << ( output_id_V_1_ack_in );
    sensitive << ( output_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( output_data_V_1_ack_in );
    sensitive << ( output_keep_V_1_ack_in );
    sensitive << ( output_strb_V_1_ack_in );
    sensitive << ( output_user_V_1_ack_in );
    sensitive << ( output_last_V_1_ack_in );
    sensitive << ( output_id_V_1_ack_in );
    sensitive << ( output_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_buf_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_fu_124_p1 );

    SC_METHOD(thread_buf_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_1_fu_118_p2);
    sensitive << ( i_reg_101 );

    SC_METHOD(thread_last_assign_fu_129_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_reg_101 );
    sensitive << ( tmp_fu_112_p2 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_output_AX_ALG_TDATA);
    sensitive << ( output_data_V_1_data_out );

    SC_METHOD(thread_output_AX_ALG_TDATA_blk_n);
    sensitive << ( output_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( tmp_reg_135 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_135 );

    SC_METHOD(thread_output_AX_ALG_TDEST);
    sensitive << ( output_dest_V_1_data_out );

    SC_METHOD(thread_output_AX_ALG_TID);
    sensitive << ( output_id_V_1_data_out );

    SC_METHOD(thread_output_AX_ALG_TKEEP);
    sensitive << ( output_keep_V_1_data_out );

    SC_METHOD(thread_output_AX_ALG_TLAST);
    sensitive << ( output_last_V_1_data_out );

    SC_METHOD(thread_output_AX_ALG_TSTRB);
    sensitive << ( output_strb_V_1_data_out );

    SC_METHOD(thread_output_AX_ALG_TUSER);
    sensitive << ( output_user_V_1_data_out );

    SC_METHOD(thread_output_AX_ALG_TVALID);
    sensitive << ( output_dest_V_1_state );

    SC_METHOD(thread_output_data_V_1_ack_in);
    sensitive << ( output_data_V_1_state );

    SC_METHOD(thread_output_data_V_1_ack_out);
    sensitive << ( output_AX_ALG_TREADY );

    SC_METHOD(thread_output_data_V_1_data_out);
    sensitive << ( output_data_V_1_payload_A );
    sensitive << ( output_data_V_1_payload_B );
    sensitive << ( output_data_V_1_sel );

    SC_METHOD(thread_output_data_V_1_load_A);
    sensitive << ( output_data_V_1_sel_wr );
    sensitive << ( output_data_V_1_state_cmp_full );

    SC_METHOD(thread_output_data_V_1_load_B);
    sensitive << ( output_data_V_1_sel_wr );
    sensitive << ( output_data_V_1_state_cmp_full );

    SC_METHOD(thread_output_data_V_1_sel);
    sensitive << ( output_data_V_1_sel_rd );

    SC_METHOD(thread_output_data_V_1_state_cmp_full);
    sensitive << ( output_data_V_1_state );

    SC_METHOD(thread_output_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_135 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_output_data_V_1_vld_out);
    sensitive << ( output_data_V_1_state );

    SC_METHOD(thread_output_dest_V_1_ack_in);
    sensitive << ( output_dest_V_1_state );

    SC_METHOD(thread_output_dest_V_1_ack_out);
    sensitive << ( output_AX_ALG_TREADY );

    SC_METHOD(thread_output_dest_V_1_data_out);
    sensitive << ( output_dest_V_1_sel );

    SC_METHOD(thread_output_dest_V_1_sel);
    sensitive << ( output_dest_V_1_sel_rd );

    SC_METHOD(thread_output_dest_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_135 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_output_dest_V_1_vld_out);
    sensitive << ( output_dest_V_1_state );

    SC_METHOD(thread_output_id_V_1_ack_in);
    sensitive << ( output_id_V_1_state );

    SC_METHOD(thread_output_id_V_1_ack_out);
    sensitive << ( output_AX_ALG_TREADY );

    SC_METHOD(thread_output_id_V_1_data_out);
    sensitive << ( output_id_V_1_sel );

    SC_METHOD(thread_output_id_V_1_sel);
    sensitive << ( output_id_V_1_sel_rd );

    SC_METHOD(thread_output_id_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_135 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_output_id_V_1_vld_out);
    sensitive << ( output_id_V_1_state );

    SC_METHOD(thread_output_keep_V_1_ack_in);
    sensitive << ( output_keep_V_1_state );

    SC_METHOD(thread_output_keep_V_1_ack_out);
    sensitive << ( output_AX_ALG_TREADY );

    SC_METHOD(thread_output_keep_V_1_data_out);
    sensitive << ( output_keep_V_1_sel );

    SC_METHOD(thread_output_keep_V_1_sel);
    sensitive << ( output_keep_V_1_sel_rd );

    SC_METHOD(thread_output_keep_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_135 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_output_keep_V_1_vld_out);
    sensitive << ( output_keep_V_1_state );

    SC_METHOD(thread_output_last_V_1_ack_in);
    sensitive << ( output_last_V_1_state );

    SC_METHOD(thread_output_last_V_1_ack_out);
    sensitive << ( output_AX_ALG_TREADY );

    SC_METHOD(thread_output_last_V_1_data_out);
    sensitive << ( output_last_V_1_payload_A );
    sensitive << ( output_last_V_1_payload_B );
    sensitive << ( output_last_V_1_sel );

    SC_METHOD(thread_output_last_V_1_load_A);
    sensitive << ( output_last_V_1_sel_wr );
    sensitive << ( output_last_V_1_state_cmp_full );

    SC_METHOD(thread_output_last_V_1_load_B);
    sensitive << ( output_last_V_1_sel_wr );
    sensitive << ( output_last_V_1_state_cmp_full );

    SC_METHOD(thread_output_last_V_1_sel);
    sensitive << ( output_last_V_1_sel_rd );

    SC_METHOD(thread_output_last_V_1_state_cmp_full);
    sensitive << ( output_last_V_1_state );

    SC_METHOD(thread_output_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_135 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_output_last_V_1_vld_out);
    sensitive << ( output_last_V_1_state );

    SC_METHOD(thread_output_strb_V_1_ack_in);
    sensitive << ( output_strb_V_1_state );

    SC_METHOD(thread_output_strb_V_1_ack_out);
    sensitive << ( output_AX_ALG_TREADY );

    SC_METHOD(thread_output_strb_V_1_data_out);
    sensitive << ( output_strb_V_1_sel );

    SC_METHOD(thread_output_strb_V_1_sel);
    sensitive << ( output_strb_V_1_sel_rd );

    SC_METHOD(thread_output_strb_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_135 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_output_strb_V_1_vld_out);
    sensitive << ( output_strb_V_1_state );

    SC_METHOD(thread_output_user_V_1_ack_in);
    sensitive << ( output_user_V_1_state );

    SC_METHOD(thread_output_user_V_1_ack_out);
    sensitive << ( output_AX_ALG_TREADY );

    SC_METHOD(thread_output_user_V_1_data_out);
    sensitive << ( output_user_V_1_sel );

    SC_METHOD(thread_output_user_V_1_sel);
    sensitive << ( output_user_V_1_sel_rd );

    SC_METHOD(thread_output_user_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_135 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_output_user_V_1_vld_out);
    sensitive << ( output_user_V_1_state );

    SC_METHOD(thread_tmp_1_fu_124_p1);
    sensitive << ( i_reg_101 );

    SC_METHOD(thread_tmp_fu_112_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_reg_101 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_data_V_1_ack_in );
    sensitive << ( output_keep_V_1_ack_in );
    sensitive << ( output_strb_V_1_ack_in );
    sensitive << ( output_user_V_1_ack_in );
    sensitive << ( output_last_V_1_ack_in );
    sensitive << ( output_id_V_1_ack_in );
    sensitive << ( output_dest_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_fu_112_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_flag00011011 );
    sensitive << ( ap_CS_fsm_state5 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    output_data_V_1_sel_rd = SC_LOGIC_0;
    output_data_V_1_sel_wr = SC_LOGIC_0;
    output_data_V_1_state = "00";
    output_keep_V_1_sel_rd = SC_LOGIC_0;
    output_keep_V_1_state = "00";
    output_strb_V_1_sel_rd = SC_LOGIC_0;
    output_strb_V_1_state = "00";
    output_user_V_1_sel_rd = SC_LOGIC_0;
    output_user_V_1_state = "00";
    output_last_V_1_sel_rd = SC_LOGIC_0;
    output_last_V_1_sel_wr = SC_LOGIC_0;
    output_last_V_1_state = "00";
    output_id_V_1_sel_rd = SC_LOGIC_0;
    output_id_V_1_state = "00";
    output_dest_V_1_sel_rd = SC_LOGIC_0;
    output_dest_V_1_state = "00";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "write_data_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, buf_V_address0, "(port)buf_V_address0");
    sc_trace(mVcdFile, buf_V_ce0, "(port)buf_V_ce0");
    sc_trace(mVcdFile, buf_V_q0, "(port)buf_V_q0");
    sc_trace(mVcdFile, output_AX_ALG_TDATA, "(port)output_AX_ALG_TDATA");
    sc_trace(mVcdFile, output_AX_ALG_TVALID, "(port)output_AX_ALG_TVALID");
    sc_trace(mVcdFile, output_AX_ALG_TREADY, "(port)output_AX_ALG_TREADY");
    sc_trace(mVcdFile, output_AX_ALG_TKEEP, "(port)output_AX_ALG_TKEEP");
    sc_trace(mVcdFile, output_AX_ALG_TSTRB, "(port)output_AX_ALG_TSTRB");
    sc_trace(mVcdFile, output_AX_ALG_TUSER, "(port)output_AX_ALG_TUSER");
    sc_trace(mVcdFile, output_AX_ALG_TLAST, "(port)output_AX_ALG_TLAST");
    sc_trace(mVcdFile, output_AX_ALG_TID, "(port)output_AX_ALG_TID");
    sc_trace(mVcdFile, output_AX_ALG_TDEST, "(port)output_AX_ALG_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, output_data_V_1_data_out, "output_data_V_1_data_out");
    sc_trace(mVcdFile, output_data_V_1_vld_in, "output_data_V_1_vld_in");
    sc_trace(mVcdFile, output_data_V_1_vld_out, "output_data_V_1_vld_out");
    sc_trace(mVcdFile, output_data_V_1_ack_in, "output_data_V_1_ack_in");
    sc_trace(mVcdFile, output_data_V_1_ack_out, "output_data_V_1_ack_out");
    sc_trace(mVcdFile, output_data_V_1_payload_A, "output_data_V_1_payload_A");
    sc_trace(mVcdFile, output_data_V_1_payload_B, "output_data_V_1_payload_B");
    sc_trace(mVcdFile, output_data_V_1_sel_rd, "output_data_V_1_sel_rd");
    sc_trace(mVcdFile, output_data_V_1_sel_wr, "output_data_V_1_sel_wr");
    sc_trace(mVcdFile, output_data_V_1_sel, "output_data_V_1_sel");
    sc_trace(mVcdFile, output_data_V_1_load_A, "output_data_V_1_load_A");
    sc_trace(mVcdFile, output_data_V_1_load_B, "output_data_V_1_load_B");
    sc_trace(mVcdFile, output_data_V_1_state, "output_data_V_1_state");
    sc_trace(mVcdFile, output_data_V_1_state_cmp_full, "output_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, output_keep_V_1_data_out, "output_keep_V_1_data_out");
    sc_trace(mVcdFile, output_keep_V_1_vld_in, "output_keep_V_1_vld_in");
    sc_trace(mVcdFile, output_keep_V_1_vld_out, "output_keep_V_1_vld_out");
    sc_trace(mVcdFile, output_keep_V_1_ack_in, "output_keep_V_1_ack_in");
    sc_trace(mVcdFile, output_keep_V_1_ack_out, "output_keep_V_1_ack_out");
    sc_trace(mVcdFile, output_keep_V_1_sel_rd, "output_keep_V_1_sel_rd");
    sc_trace(mVcdFile, output_keep_V_1_sel, "output_keep_V_1_sel");
    sc_trace(mVcdFile, output_keep_V_1_state, "output_keep_V_1_state");
    sc_trace(mVcdFile, output_strb_V_1_data_out, "output_strb_V_1_data_out");
    sc_trace(mVcdFile, output_strb_V_1_vld_in, "output_strb_V_1_vld_in");
    sc_trace(mVcdFile, output_strb_V_1_vld_out, "output_strb_V_1_vld_out");
    sc_trace(mVcdFile, output_strb_V_1_ack_in, "output_strb_V_1_ack_in");
    sc_trace(mVcdFile, output_strb_V_1_ack_out, "output_strb_V_1_ack_out");
    sc_trace(mVcdFile, output_strb_V_1_sel_rd, "output_strb_V_1_sel_rd");
    sc_trace(mVcdFile, output_strb_V_1_sel, "output_strb_V_1_sel");
    sc_trace(mVcdFile, output_strb_V_1_state, "output_strb_V_1_state");
    sc_trace(mVcdFile, output_user_V_1_data_out, "output_user_V_1_data_out");
    sc_trace(mVcdFile, output_user_V_1_vld_in, "output_user_V_1_vld_in");
    sc_trace(mVcdFile, output_user_V_1_vld_out, "output_user_V_1_vld_out");
    sc_trace(mVcdFile, output_user_V_1_ack_in, "output_user_V_1_ack_in");
    sc_trace(mVcdFile, output_user_V_1_ack_out, "output_user_V_1_ack_out");
    sc_trace(mVcdFile, output_user_V_1_sel_rd, "output_user_V_1_sel_rd");
    sc_trace(mVcdFile, output_user_V_1_sel, "output_user_V_1_sel");
    sc_trace(mVcdFile, output_user_V_1_state, "output_user_V_1_state");
    sc_trace(mVcdFile, output_last_V_1_data_out, "output_last_V_1_data_out");
    sc_trace(mVcdFile, output_last_V_1_vld_in, "output_last_V_1_vld_in");
    sc_trace(mVcdFile, output_last_V_1_vld_out, "output_last_V_1_vld_out");
    sc_trace(mVcdFile, output_last_V_1_ack_in, "output_last_V_1_ack_in");
    sc_trace(mVcdFile, output_last_V_1_ack_out, "output_last_V_1_ack_out");
    sc_trace(mVcdFile, output_last_V_1_payload_A, "output_last_V_1_payload_A");
    sc_trace(mVcdFile, output_last_V_1_payload_B, "output_last_V_1_payload_B");
    sc_trace(mVcdFile, output_last_V_1_sel_rd, "output_last_V_1_sel_rd");
    sc_trace(mVcdFile, output_last_V_1_sel_wr, "output_last_V_1_sel_wr");
    sc_trace(mVcdFile, output_last_V_1_sel, "output_last_V_1_sel");
    sc_trace(mVcdFile, output_last_V_1_load_A, "output_last_V_1_load_A");
    sc_trace(mVcdFile, output_last_V_1_load_B, "output_last_V_1_load_B");
    sc_trace(mVcdFile, output_last_V_1_state, "output_last_V_1_state");
    sc_trace(mVcdFile, output_last_V_1_state_cmp_full, "output_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, output_id_V_1_data_out, "output_id_V_1_data_out");
    sc_trace(mVcdFile, output_id_V_1_vld_in, "output_id_V_1_vld_in");
    sc_trace(mVcdFile, output_id_V_1_vld_out, "output_id_V_1_vld_out");
    sc_trace(mVcdFile, output_id_V_1_ack_in, "output_id_V_1_ack_in");
    sc_trace(mVcdFile, output_id_V_1_ack_out, "output_id_V_1_ack_out");
    sc_trace(mVcdFile, output_id_V_1_sel_rd, "output_id_V_1_sel_rd");
    sc_trace(mVcdFile, output_id_V_1_sel, "output_id_V_1_sel");
    sc_trace(mVcdFile, output_id_V_1_state, "output_id_V_1_state");
    sc_trace(mVcdFile, output_dest_V_1_data_out, "output_dest_V_1_data_out");
    sc_trace(mVcdFile, output_dest_V_1_vld_in, "output_dest_V_1_vld_in");
    sc_trace(mVcdFile, output_dest_V_1_vld_out, "output_dest_V_1_vld_out");
    sc_trace(mVcdFile, output_dest_V_1_ack_in, "output_dest_V_1_ack_in");
    sc_trace(mVcdFile, output_dest_V_1_ack_out, "output_dest_V_1_ack_out");
    sc_trace(mVcdFile, output_dest_V_1_sel_rd, "output_dest_V_1_sel_rd");
    sc_trace(mVcdFile, output_dest_V_1_sel, "output_dest_V_1_sel");
    sc_trace(mVcdFile, output_dest_V_1_state, "output_dest_V_1_state");
    sc_trace(mVcdFile, output_AX_ALG_TDATA_blk_n, "output_AX_ALG_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00000000, "ap_block_pp0_stage0_flag00000000");
    sc_trace(mVcdFile, tmp_reg_135, "tmp_reg_135");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_tmp_reg_135, "ap_reg_pp0_iter1_tmp_reg_135");
    sc_trace(mVcdFile, i_reg_101, "i_reg_101");
    sc_trace(mVcdFile, tmp_fu_112_p2, "tmp_fu_112_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011001, "ap_block_pp0_stage0_flag00011001");
    sc_trace(mVcdFile, i_1_fu_118_p2, "i_1_fu_118_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, last_assign_fu_129_p2, "last_assign_fu_129_p2");
    sc_trace(mVcdFile, last_assign_reg_144, "last_assign_reg_144");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011011, "ap_block_pp0_stage0_flag00011011");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, tmp_1_fu_124_p1, "tmp_1_fu_124_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00001001, "ap_block_pp0_stage0_flag00001001");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

write_data::~write_data() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void write_data::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, output_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_dest_V_1_ack_in.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_112_p2.read()))) {
        i_reg_101 = i_1_fu_118_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_reg_101 = ap_const_lv3_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_data_V_1_vld_out.read()))) {
            output_data_V_1_sel_rd =  (sc_logic) (~output_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_data_V_1_ack_in.read()))) {
            output_data_V_1_sel_wr =  (sc_logic) (~output_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(output_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(output_data_V_1_state.read(), ap_const_lv2_2)))) {
            output_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(output_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(output_data_V_1_state.read(), ap_const_lv2_1)))) {
            output_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(output_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(output_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(output_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_data_V_1_ack_out.read()))))) {
            output_data_V_1_state = ap_const_lv2_3;
        } else {
            output_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_dest_V_1_vld_out.read()))) {
            output_dest_V_1_sel_rd =  (sc_logic) (~output_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_dest_V_1_state.read())))) {
            output_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_dest_V_1_state.read())))) {
            output_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_dest_V_1_ack_out.read()))))) {
            output_dest_V_1_state = ap_const_lv2_3;
        } else {
            output_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_id_V_1_vld_out.read()))) {
            output_id_V_1_sel_rd =  (sc_logic) (~output_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_id_V_1_state.read())))) {
            output_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_id_V_1_state.read())))) {
            output_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_id_V_1_ack_out.read()))))) {
            output_id_V_1_state = ap_const_lv2_3;
        } else {
            output_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_keep_V_1_vld_out.read()))) {
            output_keep_V_1_sel_rd =  (sc_logic) (~output_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_keep_V_1_state.read())))) {
            output_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_keep_V_1_state.read())))) {
            output_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_keep_V_1_ack_out.read()))))) {
            output_keep_V_1_state = ap_const_lv2_3;
        } else {
            output_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_last_V_1_vld_out.read()))) {
            output_last_V_1_sel_rd =  (sc_logic) (~output_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_last_V_1_ack_in.read()))) {
            output_last_V_1_sel_wr =  (sc_logic) (~output_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_last_V_1_state.read())))) {
            output_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_last_V_1_state.read())))) {
            output_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_last_V_1_ack_out.read()))))) {
            output_last_V_1_state = ap_const_lv2_3;
        } else {
            output_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_strb_V_1_vld_out.read()))) {
            output_strb_V_1_sel_rd =  (sc_logic) (~output_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_strb_V_1_state.read())))) {
            output_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_strb_V_1_state.read())))) {
            output_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_strb_V_1_ack_out.read()))))) {
            output_strb_V_1_state = ap_const_lv2_3;
        } else {
            output_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_user_V_1_vld_out.read()))) {
            output_user_V_1_sel_rd =  (sc_logic) (~output_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_user_V_1_state.read())))) {
            output_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_user_V_1_state.read())))) {
            output_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_user_V_1_ack_out.read()))))) {
            output_user_V_1_state = ap_const_lv2_3;
        } else {
            output_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_tmp_reg_135 = tmp_reg_135.read();
        tmp_reg_135 = tmp_fu_112_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_112_p2.read()))) {
        last_assign_reg_144 = last_assign_fu_129_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_data_V_1_load_A.read())) {
        output_data_V_1_payload_A = buf_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_data_V_1_load_B.read())) {
        output_data_V_1_payload_B = buf_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_last_V_1_load_A.read())) {
        output_last_V_1_payload_A = last_assign_reg_144.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_last_V_1_load_B.read())) {
        output_last_V_1_payload_B = last_assign_reg_144.read();
    }
}

void write_data::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void write_data::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void write_data::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void write_data::thread_ap_block_pp0_stage0_flag00000000() {
    ap_block_pp0_stage0_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_data::thread_ap_block_pp0_stage0_flag00001001() {
    ap_block_pp0_stage0_flag00001001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_data::thread_ap_block_pp0_stage0_flag00011001() {
    ap_block_pp0_stage0_flag00011001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void write_data::thread_ap_block_pp0_stage0_flag00011011() {
    ap_block_pp0_stage0_flag00011011 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void write_data::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void write_data::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_data::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_135.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_data_V_1_ack_in.read()));
}

void write_data::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_data::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_135.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_data_V_1_ack_in.read()));
}

void write_data::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_data::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,1,1>(ap_const_logic_0, output_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_dest_V_1_ack_in.read()));
}

void write_data::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_112_p2.read())) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void write_data::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, output_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_dest_V_1_ack_in.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void write_data::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void write_data::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void write_data::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void write_data::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, output_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_dest_V_1_ack_in.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void write_data::thread_buf_V_address0() {
    buf_V_address0 =  (sc_lv<2>) (tmp_1_fu_124_p1.read());
}

void write_data::thread_buf_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        buf_V_ce0 = ap_const_logic_1;
    } else {
        buf_V_ce0 = ap_const_logic_0;
    }
}

void write_data::thread_i_1_fu_118_p2() {
    i_1_fu_118_p2 = (!i_reg_101.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_101.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void write_data::thread_last_assign_fu_129_p2() {
    last_assign_fu_129_p2 = (!i_reg_101.read().is_01() || !ap_const_lv3_3.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_101.read() == ap_const_lv3_3);
}

void write_data::thread_output_AX_ALG_TDATA() {
    output_AX_ALG_TDATA = output_data_V_1_data_out.read();
}

void write_data::thread_output_AX_ALG_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_135.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_135.read())))) {
        output_AX_ALG_TDATA_blk_n = output_data_V_1_state.read()[1];
    } else {
        output_AX_ALG_TDATA_blk_n = ap_const_logic_1;
    }
}

void write_data::thread_output_AX_ALG_TDEST() {
    output_AX_ALG_TDEST = output_dest_V_1_data_out.read();
}

void write_data::thread_output_AX_ALG_TID() {
    output_AX_ALG_TID = output_id_V_1_data_out.read();
}

void write_data::thread_output_AX_ALG_TKEEP() {
    output_AX_ALG_TKEEP = output_keep_V_1_data_out.read();
}

void write_data::thread_output_AX_ALG_TLAST() {
    output_AX_ALG_TLAST = output_last_V_1_data_out.read();
}

void write_data::thread_output_AX_ALG_TSTRB() {
    output_AX_ALG_TSTRB = output_strb_V_1_data_out.read();
}

void write_data::thread_output_AX_ALG_TUSER() {
    output_AX_ALG_TUSER = output_user_V_1_data_out.read();
}

void write_data::thread_output_AX_ALG_TVALID() {
    output_AX_ALG_TVALID = output_dest_V_1_state.read()[0];
}

void write_data::thread_output_data_V_1_ack_in() {
    output_data_V_1_ack_in = output_data_V_1_state.read()[1];
}

void write_data::thread_output_data_V_1_ack_out() {
    output_data_V_1_ack_out = output_AX_ALG_TREADY.read();
}

void write_data::thread_output_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_data_V_1_sel.read())) {
        output_data_V_1_data_out = output_data_V_1_payload_B.read();
    } else {
        output_data_V_1_data_out = output_data_V_1_payload_A.read();
    }
}

void write_data::thread_output_data_V_1_load_A() {
    output_data_V_1_load_A = (output_data_V_1_state_cmp_full.read() & ~output_data_V_1_sel_wr.read());
}

void write_data::thread_output_data_V_1_load_B() {
    output_data_V_1_load_B = (output_data_V_1_sel_wr.read() & output_data_V_1_state_cmp_full.read());
}

void write_data::thread_output_data_V_1_sel() {
    output_data_V_1_sel = output_data_V_1_sel_rd.read();
}

void write_data::thread_output_data_V_1_state_cmp_full() {
    output_data_V_1_state_cmp_full =  (sc_logic) ((!output_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(output_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void write_data::thread_output_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_135.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        output_data_V_1_vld_in = ap_const_logic_1;
    } else {
        output_data_V_1_vld_in = ap_const_logic_0;
    }
}

void write_data::thread_output_data_V_1_vld_out() {
    output_data_V_1_vld_out = output_data_V_1_state.read()[0];
}

void write_data::thread_output_dest_V_1_ack_in() {
    output_dest_V_1_ack_in = output_dest_V_1_state.read()[1];
}

void write_data::thread_output_dest_V_1_ack_out() {
    output_dest_V_1_ack_out = output_AX_ALG_TREADY.read();
}

void write_data::thread_output_dest_V_1_data_out() {
    output_dest_V_1_data_out = ap_const_lv5_0;
}

void write_data::thread_output_dest_V_1_sel() {
    output_dest_V_1_sel = output_dest_V_1_sel_rd.read();
}

void write_data::thread_output_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_135.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        output_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        output_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void write_data::thread_output_dest_V_1_vld_out() {
    output_dest_V_1_vld_out = output_dest_V_1_state.read()[0];
}

void write_data::thread_output_id_V_1_ack_in() {
    output_id_V_1_ack_in = output_id_V_1_state.read()[1];
}

void write_data::thread_output_id_V_1_ack_out() {
    output_id_V_1_ack_out = output_AX_ALG_TREADY.read();
}

void write_data::thread_output_id_V_1_data_out() {
    output_id_V_1_data_out = ap_const_lv5_0;
}

void write_data::thread_output_id_V_1_sel() {
    output_id_V_1_sel = output_id_V_1_sel_rd.read();
}

void write_data::thread_output_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_135.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        output_id_V_1_vld_in = ap_const_logic_1;
    } else {
        output_id_V_1_vld_in = ap_const_logic_0;
    }
}

void write_data::thread_output_id_V_1_vld_out() {
    output_id_V_1_vld_out = output_id_V_1_state.read()[0];
}

void write_data::thread_output_keep_V_1_ack_in() {
    output_keep_V_1_ack_in = output_keep_V_1_state.read()[1];
}

void write_data::thread_output_keep_V_1_ack_out() {
    output_keep_V_1_ack_out = output_AX_ALG_TREADY.read();
}

void write_data::thread_output_keep_V_1_data_out() {
    output_keep_V_1_data_out = ap_const_lv4_F;
}

void write_data::thread_output_keep_V_1_sel() {
    output_keep_V_1_sel = output_keep_V_1_sel_rd.read();
}

void write_data::thread_output_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_135.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        output_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        output_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void write_data::thread_output_keep_V_1_vld_out() {
    output_keep_V_1_vld_out = output_keep_V_1_state.read()[0];
}

void write_data::thread_output_last_V_1_ack_in() {
    output_last_V_1_ack_in = output_last_V_1_state.read()[1];
}

void write_data::thread_output_last_V_1_ack_out() {
    output_last_V_1_ack_out = output_AX_ALG_TREADY.read();
}

void write_data::thread_output_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_last_V_1_sel.read())) {
        output_last_V_1_data_out = output_last_V_1_payload_B.read();
    } else {
        output_last_V_1_data_out = output_last_V_1_payload_A.read();
    }
}

void write_data::thread_output_last_V_1_load_A() {
    output_last_V_1_load_A = (output_last_V_1_state_cmp_full.read() & ~output_last_V_1_sel_wr.read());
}

void write_data::thread_output_last_V_1_load_B() {
    output_last_V_1_load_B = (output_last_V_1_sel_wr.read() & output_last_V_1_state_cmp_full.read());
}

void write_data::thread_output_last_V_1_sel() {
    output_last_V_1_sel = output_last_V_1_sel_rd.read();
}

void write_data::thread_output_last_V_1_state_cmp_full() {
    output_last_V_1_state_cmp_full =  (sc_logic) ((!output_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(output_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void write_data::thread_output_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_135.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        output_last_V_1_vld_in = ap_const_logic_1;
    } else {
        output_last_V_1_vld_in = ap_const_logic_0;
    }
}

void write_data::thread_output_last_V_1_vld_out() {
    output_last_V_1_vld_out = output_last_V_1_state.read()[0];
}

void write_data::thread_output_strb_V_1_ack_in() {
    output_strb_V_1_ack_in = output_strb_V_1_state.read()[1];
}

void write_data::thread_output_strb_V_1_ack_out() {
    output_strb_V_1_ack_out = output_AX_ALG_TREADY.read();
}

void write_data::thread_output_strb_V_1_data_out() {
    output_strb_V_1_data_out = ap_const_lv4_F;
}

void write_data::thread_output_strb_V_1_sel() {
    output_strb_V_1_sel = output_strb_V_1_sel_rd.read();
}

void write_data::thread_output_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_135.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        output_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        output_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void write_data::thread_output_strb_V_1_vld_out() {
    output_strb_V_1_vld_out = output_strb_V_1_state.read()[0];
}

void write_data::thread_output_user_V_1_ack_in() {
    output_user_V_1_ack_in = output_user_V_1_state.read()[1];
}

void write_data::thread_output_user_V_1_ack_out() {
    output_user_V_1_ack_out = output_AX_ALG_TREADY.read();
}

void write_data::thread_output_user_V_1_data_out() {
    output_user_V_1_data_out = ap_const_lv4_0;
}

void write_data::thread_output_user_V_1_sel() {
    output_user_V_1_sel = output_user_V_1_sel_rd.read();
}

void write_data::thread_output_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_135.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        output_user_V_1_vld_in = ap_const_logic_1;
    } else {
        output_user_V_1_vld_in = ap_const_logic_0;
    }
}

void write_data::thread_output_user_V_1_vld_out() {
    output_user_V_1_vld_out = output_user_V_1_state.read()[0];
}

void write_data::thread_tmp_1_fu_124_p1() {
    tmp_1_fu_124_p1 = esl_zext<32,3>(i_reg_101.read());
}

void write_data::thread_tmp_fu_112_p2() {
    tmp_fu_112_p2 = (!i_reg_101.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_101.read() == ap_const_lv3_4);
}

void write_data::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_112_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_112_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, output_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_dest_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

