// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module meanFilterInTime (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V,
        reset,
        ap_return,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x_V;
input  [0:0] reset;
output  [31:0] ap_return;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] aux_array_V_address0;
reg    aux_array_V_ce0;
wire   [31:0] aux_array_V_q0;
reg   [2:0] aux_array_V_address1;
reg    aux_array_V_ce1;
reg    aux_array_V_we1;
reg   [31:0] aux_array_V_d1;
wire   [0:0] reset_read_read_fu_42_p2;
reg   [0:0] reset_read_reg_153;
reg   [31:0] x_V_read_reg_157;
reg   [31:0] aux_array_V_load_6_reg_163;
wire    ap_CS_fsm_state2;
reg   [31:0] aux_array_V_load_reg_169;
wire    ap_CS_fsm_state3;
reg   [31:0] aux_array_V_load_1_reg_175;
wire    ap_CS_fsm_state4;
reg   [31:0] aux_array_V_load_2_reg_181;
wire    ap_CS_fsm_state5;
reg   [31:0] aux_array_V_load_3_reg_187;
wire    ap_CS_fsm_state6;
reg   [31:0] aux_array_V_load_4_reg_193;
wire    ap_CS_fsm_state7;
reg   [31:0] aux_array_V_load_5_reg_199;
wire    ap_CS_fsm_state8;
reg   [31:0] y_0_V_write_assign_reg_205;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire  signed [32:0] tmp_31_cast_i_fu_77_p1;
wire  signed [32:0] tmp_31_1_cast_i_fu_80_p1;
wire  signed [32:0] tmp_31_2_cast_i_fu_83_p1;
wire  signed [32:0] tmp_31_3_cast_i_fu_86_p1;
wire   [32:0] tmp2_fu_107_p2;
wire   [32:0] tmp1_fu_101_p2;
wire  signed [32:0] tmp_31_4_cast_i_fu_89_p1;
wire  signed [32:0] tmp_31_5_cast_i_fu_92_p1;
wire  signed [32:0] tmp_31_6_cast_i_fu_95_p1;
wire  signed [32:0] tmp_cast_i_fu_98_p1;
wire   [32:0] tmp5_fu_125_p2;
wire   [32:0] tmp4_fu_119_p2;
wire   [32:0] tmp3_fu_131_p2;
wire   [32:0] tmp_fu_113_p2;
wire   [32:0] p_Val2_i_fu_137_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

meanFilterInTime_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
aux_array_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(aux_array_V_address0),
    .ce0(aux_array_V_ce0),
    .q0(aux_array_V_q0),
    .address1(aux_array_V_address1),
    .ce1(aux_array_V_ce1),
    .we1(aux_array_V_we1),
    .d1(aux_array_V_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        aux_array_V_load_1_reg_175 <= aux_array_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        aux_array_V_load_2_reg_181 <= aux_array_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        aux_array_V_load_3_reg_187 <= aux_array_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        aux_array_V_load_4_reg_193 <= aux_array_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        aux_array_V_load_5_reg_199 <= aux_array_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        aux_array_V_load_6_reg_163 <= aux_array_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        aux_array_V_load_reg_169 <= aux_array_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (ap_ce == 1'b1))) begin
        reset_read_reg_153 <= reset;
        x_V_read_reg_157 <= x_V;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        y_0_V_write_assign_reg_205 <= {{p_Val2_i_fu_137_p2[32:1]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        aux_array_V_address0 = 3'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        aux_array_V_address0 = 3'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        aux_array_V_address0 = 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        aux_array_V_address0 = 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        aux_array_V_address0 = 3'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        aux_array_V_address0 = 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        aux_array_V_address0 = 3'd7;
    end else begin
        aux_array_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        aux_array_V_address1 = 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        aux_array_V_address1 = 3'd7;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state14))) begin
        aux_array_V_address1 = 3'd6;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state13))) begin
        aux_array_V_address1 = 3'd5;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state12))) begin
        aux_array_V_address1 = 3'd4;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11))) begin
        aux_array_V_address1 = 3'd3;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10))) begin
        aux_array_V_address1 = 3'd2;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state9))) begin
        aux_array_V_address1 = 3'd1;
    end else begin
        aux_array_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (ap_ce == 1'b1)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
        aux_array_V_ce0 = 1'b1;
    end else begin
        aux_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (ap_ce == 1'b1)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        aux_array_V_ce1 = 1'b1;
    end else begin
        aux_array_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        aux_array_V_d1 = aux_array_V_load_6_reg_163;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        aux_array_V_d1 = aux_array_V_load_5_reg_199;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        aux_array_V_d1 = aux_array_V_load_4_reg_193;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        aux_array_V_d1 = aux_array_V_load_3_reg_187;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        aux_array_V_d1 = aux_array_V_load_2_reg_181;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        aux_array_V_d1 = aux_array_V_load_1_reg_175;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        aux_array_V_d1 = aux_array_V_load_reg_169;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        aux_array_V_d1 = x_V_read_reg_157;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        aux_array_V_d1 = 32'd0;
    end else begin
        aux_array_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (ap_ce == 1'b1) & (reset_read_read_fu_42_p2 == 1'd1)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (reset_read_reg_153 == 1'd1)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (reset_read_reg_153 == 1'd1)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (reset_read_reg_153 == 1'd1)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (reset_read_reg_153 == 1'd1)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (reset_read_reg_153 == 1'd1)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        aux_array_V_we1 = 1'b1;
    end else begin
        aux_array_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (ap_ce == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = y_0_V_write_assign_reg_205;

assign p_Val2_i_fu_137_p2 = (tmp3_fu_131_p2 + tmp_fu_113_p2);

assign reset_read_read_fu_42_p2 = reset;

assign tmp1_fu_101_p2 = ($signed(tmp_31_cast_i_fu_77_p1) + $signed(tmp_31_1_cast_i_fu_80_p1));

assign tmp2_fu_107_p2 = ($signed(tmp_31_2_cast_i_fu_83_p1) + $signed(tmp_31_3_cast_i_fu_86_p1));

assign tmp3_fu_131_p2 = (tmp5_fu_125_p2 + tmp4_fu_119_p2);

assign tmp4_fu_119_p2 = ($signed(tmp_31_4_cast_i_fu_89_p1) + $signed(tmp_31_5_cast_i_fu_92_p1));

assign tmp5_fu_125_p2 = ($signed(tmp_31_6_cast_i_fu_95_p1) + $signed(tmp_cast_i_fu_98_p1));

assign tmp_31_1_cast_i_fu_80_p1 = $signed(aux_array_V_load_1_reg_175);

assign tmp_31_2_cast_i_fu_83_p1 = $signed(aux_array_V_load_2_reg_181);

assign tmp_31_3_cast_i_fu_86_p1 = $signed(aux_array_V_load_3_reg_187);

assign tmp_31_4_cast_i_fu_89_p1 = $signed(aux_array_V_load_4_reg_193);

assign tmp_31_5_cast_i_fu_92_p1 = $signed(aux_array_V_load_5_reg_199);

assign tmp_31_6_cast_i_fu_95_p1 = $signed(aux_array_V_load_6_reg_163);

assign tmp_31_cast_i_fu_77_p1 = $signed(aux_array_V_load_reg_169);

assign tmp_cast_i_fu_98_p1 = $signed(x_V_read_reg_157);

assign tmp_fu_113_p2 = (tmp2_fu_107_p2 + tmp1_fu_101_p2);

endmodule //meanFilterInTime
