-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sweep_algorithm_DECM is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (23 downto 0);
    currentGroupX_OUT_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    currentGroupX_OUT_V_ce0 : OUT STD_LOGIC;
    currentGroupX_OUT_V_we0 : OUT STD_LOGIC;
    currentGroupX_OUT_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    currentGroupX_OUT_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sweep_algorithm_DECM is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_pp1_stage4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_pp1_stage5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_pp1_stage6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_pp1_stage7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_pp1_stage8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_pp1_stage9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_pp1_stage10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_pp1_stage11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_pp1_stage12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_pp1_stage13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_pp1_stage14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_pp1_stage15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_pp1_stage16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_pp1_stage17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_pp1_stage18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_pp1_stage19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_pp1_stage20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_pp1_stage21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_pp1_stage22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_pp1_stage23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_pp1_stage24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage27 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv11_401 : STD_LOGIC_VECTOR (10 downto 0) := "10000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv12_402 : STD_LOGIC_VECTOR (11 downto 0) := "010000000010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_801 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv12_801 : STD_LOGIC_VECTOR (11 downto 0) := "100000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal aux_array_V_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal aux_array_V_1_ce0 : STD_LOGIC;
    signal aux_array_V_1_we0 : STD_LOGIC;
    signal aux_array_V_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal aux_array_V_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal aux_array_V_1_ce1 : STD_LOGIC;
    signal aux_array_V_1_we1 : STD_LOGIC;
    signal aux_array_V_1_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal aux_array_V_1_q1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_V_ce0 : STD_LOGIC;
    signal sum_V_we0 : STD_LOGIC;
    signal sum_V_d0 : STD_LOGIC_VECTOR (41 downto 0);
    signal sum_V_q0 : STD_LOGIC_VECTOR (41 downto 0);
    signal sum_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_V_ce1 : STD_LOGIC;
    signal sum_V_we1 : STD_LOGIC;
    signal sum_V_q1 : STD_LOGIC_VECTOR (41 downto 0);
    signal vector_V_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal derivada_V_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal contador : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_i_reg_259 : STD_LOGIC_VECTOR (11 downto 0);
    signal ind_i_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_i_reg_284 : STD_LOGIC_VECTOR (9 downto 0);
    signal contNuevo_i_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal cont_i_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal contNuevoSuma_i_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_assign_0_i_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal indPar_1_i_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal cont32_2_i_reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp1_iter1_cont32_2_i_reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state7_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state35_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_pp1_stage2_flag00011001 : BOOLEAN;
    signal contNuevo_1_i_reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal contNuevoSuma_2_i_reg_377 : STD_LOGIC_VECTOR (31 downto 0);
    signal ind16_2_i_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_assign_0_i_be_reg_400 : STD_LOGIC_VECTOR (31 downto 0);
    signal cont_i_be_reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal contNuevo_i_be_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal contNuevoSuma_i_be_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal ind_i_be_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_5_i_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_reg_1092 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal i_fu_533_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_1096 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal i_1_i119_cast_fu_549_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_i119_cast_reg_1106 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal i_5_cast_i_fu_575_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_cast_i_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_V_addr_reg_1121 : STD_LOGIC_VECTOR (9 downto 0);
    signal reset_assign_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reset_assign_reg_1126 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_reg_1134 : STD_LOGIC_VECTOR (0 downto 0);
    signal currentGroupX_OUT_V_s_reg_1138 : STD_LOGIC_VECTOR (1 downto 0);
    signal cont32_i_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cont32_i_reg_1143 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_V_addr_1_reg_1149 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_2_i_fu_606_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_i_reg_1154 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state6_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state34_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_flag00011001 : BOOLEAN;
    signal sum_V_load_reg_1164 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal contNuevoSuma_1_i_fu_612_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal contNuevoSuma_1_i_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp_i_fu_631_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal currentGroupX_OUT_V_1_reg_1180 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_i_fu_654_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ind_i_cast_fu_669_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indPar_i_fu_673_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal contNuevoSuma_3_i_fu_679_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_V_load_1_reg_1205 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Val2_6_i_fu_700_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_i_reg_1210 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1055_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Val2_10_i_reg_1215 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_4_i_i_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i_reg_1220 : STD_LOGIC_VECTOR (0 downto 0);
    signal currentGroupX_OUT_V_2_reg_1225 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_712_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_reg_1230 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_19_1_i_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_1_i_reg_1241 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter1_tmp_19_1_i_reg_1241 : STD_LOGIC_VECTOR (0 downto 0);
    signal cont32_1_i_fu_733_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cont32_1_i_reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_1_i_fu_760_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_1_i_reg_1251 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_state8_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_state36_pp1_stage3_iter1 : BOOLEAN;
    signal ap_block_pp1_stage3_flag00011001 : BOOLEAN;
    signal tmp_12_fu_771_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_reg_1256 : STD_LOGIC_VECTOR (9 downto 0);
    signal phitmp_1_i_fu_792_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_i_fu_810_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ind_1_i_cast_fu_824_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indPar_i_15_fu_828_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal contNuevoSuma_3_1_i_fu_834_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_reg_1291 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_1_i_fu_857_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_1_i_reg_1295 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp1_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage4 : signal is "none";
    signal ap_block_state9_pp1_stage4_iter0 : BOOLEAN;
    signal ap_block_state37_pp1_stage4_iter1 : BOOLEAN;
    signal ap_block_pp1_stage4_flag00011001 : BOOLEAN;
    signal grp_fu_1071_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Val2_10_1_i_reg_1300 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_4_i_i7_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i7_reg_1305 : STD_LOGIC_VECTOR (0 downto 0);
    signal currentGroupX_OUT_V_4_reg_1310 : STD_LOGIC_VECTOR (1 downto 0);
    signal currentGroupX_OUT_V_6_reg_1315 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter1_currentGroupX_OUT_V_6_reg_1315 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_0_1_i_reg_1320 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage5 : signal is "none";
    signal ap_block_state10_pp1_stage5_iter0 : BOOLEAN;
    signal ap_block_state38_pp1_stage5_iter1 : BOOLEAN;
    signal ap_block_pp1_stage5_flag00011001 : BOOLEAN;
    signal p_Val2_i_i_fu_888_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_i_i_reg_1325 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage16 : signal is "none";
    signal ap_block_state21_pp1_stage16_iter0 : BOOLEAN;
    signal ap_block_pp1_stage16_flag00011001 : BOOLEAN;
    signal currentGroupX_OUT_V_5_reg_1331 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage21 : signal is "none";
    signal ap_block_state26_pp1_stage21_iter0 : BOOLEAN;
    signal ap_block_pp1_stage21_flag00011001 : BOOLEAN;
    signal p_Val2_i_i3_fu_949_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_i_i3_reg_1336 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_fu_1003_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_9_i_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_1021_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal i_3_fu_1038_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_pp1_stage27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage27 : signal is "none";
    signal ap_block_state32_pp1_stage27_iter0 : BOOLEAN;
    signal ap_block_pp1_stage27_flag00011011 : BOOLEAN;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage5_flag00011011 : BOOLEAN;
    signal grp_meanFilterInTime_fu_494_ap_start : STD_LOGIC;
    signal grp_meanFilterInTime_fu_494_ap_done : STD_LOGIC;
    signal grp_meanFilterInTime_fu_494_ap_idle : STD_LOGIC;
    signal grp_meanFilterInTime_fu_494_ap_ready : STD_LOGIC;
    signal grp_meanFilterInTime_fu_494_x_V : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_meanFilterInTime_fu_494_reset : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_meanFilterInTime_fu_494_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_phi_fu_263_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal ind_i_phi_fu_275_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal i_1_i_phi_fu_288_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal contNuevo_i_phi_fu_300_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal cont_i_phi_fu_312_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal contNuevoSuma_i_phi_fu_324_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage1_flag00000000 : BOOLEAN;
    signal this_assign_0_i_phi_fu_335_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp1_iter0_indPar_1_i_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp1_iter0_cont32_2_i_reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp1_iter0_contNuevo_1_i_reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp1_iter0_contNuevoSuma_2_i_reg_377 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp1_iter0_ind16_2_i_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp1_iter0_this_assign_0_i_be_reg_400 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp1_iter0_cont_i_be_reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp1_iter0_contNuevo_i_be_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp1_iter0_contNuevoSuma_i_be_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp1_iter0_ind_i_be_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_i_reg_461 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_i_16_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_i_reg_472 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_i_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal contador_new_i_reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_reg_grp_meanFilterInTime_fu_494_ap_start : STD_LOGIC := '0';
    signal ap_block_pp1_stage3_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage17 : signal is "none";
    signal ap_block_pp1_stage17_flag00000000 : BOOLEAN;
    signal ap_block_pp1_stage4_flag00000000 : BOOLEAN;
    signal ap_block_pp1_stage5_flag00000000 : BOOLEAN;
    signal ap_block_state11_pp1_stage6_iter0 : BOOLEAN;
    signal ap_block_pp1_stage6_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage6_flag00000000 : BOOLEAN;
    signal ap_block_state12_pp1_stage7_iter0 : BOOLEAN;
    signal ap_block_pp1_stage7_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage7_flag00000000 : BOOLEAN;
    signal ap_block_state13_pp1_stage8_iter0 : BOOLEAN;
    signal ap_block_pp1_stage8_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage8_flag00000000 : BOOLEAN;
    signal ap_block_state14_pp1_stage9_iter0 : BOOLEAN;
    signal ap_block_pp1_stage9_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage9_flag00000000 : BOOLEAN;
    signal ap_block_state15_pp1_stage10_iter0 : BOOLEAN;
    signal ap_block_pp1_stage10_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage10_flag00000000 : BOOLEAN;
    signal ap_block_state16_pp1_stage11_iter0 : BOOLEAN;
    signal ap_block_pp1_stage11_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage11_flag00000000 : BOOLEAN;
    signal ap_block_state17_pp1_stage12_iter0 : BOOLEAN;
    signal ap_block_pp1_stage12_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage12_flag00000000 : BOOLEAN;
    signal ap_block_state18_pp1_stage13_iter0 : BOOLEAN;
    signal ap_block_pp1_stage13_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage13_flag00000000 : BOOLEAN;
    signal ap_block_state19_pp1_stage14_iter0 : BOOLEAN;
    signal ap_block_pp1_stage14_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage14_flag00000000 : BOOLEAN;
    signal ap_block_state20_pp1_stage15_iter0 : BOOLEAN;
    signal ap_block_pp1_stage15_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage15_flag00000000 : BOOLEAN;
    signal ap_block_pp1_stage16_flag00000000 : BOOLEAN;
    signal ap_block_state22_pp1_stage17_iter0 : BOOLEAN;
    signal ap_block_pp1_stage17_flag00011001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage18 : signal is "none";
    signal ap_block_state23_pp1_stage18_iter0 : BOOLEAN;
    signal ap_block_pp1_stage18_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage18_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage19 : signal is "none";
    signal ap_block_state24_pp1_stage19_iter0 : BOOLEAN;
    signal ap_block_pp1_stage19_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage19_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage20 : signal is "none";
    signal ap_block_state25_pp1_stage20_iter0 : BOOLEAN;
    signal ap_block_pp1_stage20_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage20_flag00000000 : BOOLEAN;
    signal ap_block_pp1_stage21_flag00000000 : BOOLEAN;
    signal ap_block_state27_pp1_stage22_iter0 : BOOLEAN;
    signal ap_block_pp1_stage22_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage22_flag00000000 : BOOLEAN;
    signal ap_block_state28_pp1_stage23_iter0 : BOOLEAN;
    signal ap_block_pp1_stage23_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage23_flag00000000 : BOOLEAN;
    signal ap_block_state29_pp1_stage24_iter0 : BOOLEAN;
    signal ap_block_pp1_stage24_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage24_flag00000000 : BOOLEAN;
    signal ap_block_state30_pp1_stage25_iter0 : BOOLEAN;
    signal ap_block_pp1_stage25_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage25_flag00000000 : BOOLEAN;
    signal ap_block_state31_pp1_stage26_iter0 : BOOLEAN;
    signal ap_block_pp1_stage26_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage26_flag00000000 : BOOLEAN;
    signal ap_block_pp1_stage27_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage27_flag00000000 : BOOLEAN;
    signal ap_block_pp1_stage2_flag00000000 : BOOLEAN;
    signal i_4_cast_i_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast36_i_fu_544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_i_fu_564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_i_cast_fu_553_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_i_fu_722_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_1_i_cast_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_cast35_i_fu_1027_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_cast34_i_fu_1044_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_1062_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_1078_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Val2_17_i_fu_934_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_944_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_17_1_i_fu_984_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_994_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_13_fu_558_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_5_i_fu_569_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_598_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_602_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_i_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal contNuevo_0_op_i_fu_625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_644_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_i_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ind16_i_cast_fu_648_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_ind_i_fu_661_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_692_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_696_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_1_cast_i_cast_fu_685_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_i_fu_716_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_752_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_756_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_5_1_i_fu_766_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_1_i_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal contNuevo_0_op_1_i_fu_786_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_1_i_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ind16_1_i_cast_fu_805_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_ind_1_i_fu_817_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_849_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_853_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_fu_881_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_894_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_reset_i_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_i_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal minimoX_0_fu_923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_517_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_i_i5_fu_963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_955_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal minimoX_0_1_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1055_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal OP1_V_i_14_fu_689_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1055_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1062_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal OP1_V_1_i_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1062_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1071_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal OP1_V_i_fu_846_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1071_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1078_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal OP1_V_1_1_i_fu_869_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1078_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage1_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage2_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage3_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage4_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage6_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage7_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage8_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage9_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage10_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage11_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage12_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage13_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage14_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage15_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage16_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage17_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage18_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage19_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage20_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage21_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage22_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage23_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage24_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage25_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage26_flag00011011 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_condition_232 : BOOLEAN;
    signal ap_condition_291 : BOOLEAN;

    component meanFilterInTime IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (31 downto 0);
        reset : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component axi_algorithm_maceOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (41 downto 0);
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component axi_algorithm_macfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (41 downto 0);
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component sweep_algorithm_Dcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (23 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component sweep_algorithm_DdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (41 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (41 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (41 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;



begin
    aux_array_V_1_U : component sweep_algorithm_Dcud
    generic map (
        DataWidth => 24,
        AddressRange => 2049,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => aux_array_V_1_address0,
        ce0 => aux_array_V_1_ce0,
        we0 => aux_array_V_1_we0,
        d0 => p_read,
        q0 => aux_array_V_1_q0,
        address1 => aux_array_V_1_address1,
        ce1 => aux_array_V_1_ce1,
        we1 => aux_array_V_1_we1,
        d1 => aux_array_V_1_d1,
        q1 => aux_array_V_1_q1);

    sum_V_U : component sweep_algorithm_DdEe
    generic map (
        DataWidth => 42,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sum_V_address0,
        ce0 => sum_V_ce0,
        we0 => sum_V_we0,
        d0 => sum_V_d0,
        q0 => sum_V_q0,
        address1 => sum_V_address1,
        ce1 => sum_V_ce1,
        we1 => sum_V_we1,
        d1 => grp_fu_1078_p3,
        q1 => sum_V_q1);

    grp_meanFilterInTime_fu_494 : component meanFilterInTime
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_meanFilterInTime_fu_494_ap_start,
        ap_done => grp_meanFilterInTime_fu_494_ap_done,
        ap_idle => grp_meanFilterInTime_fu_494_ap_idle,
        ap_ready => grp_meanFilterInTime_fu_494_ap_ready,
        x_V => grp_meanFilterInTime_fu_494_x_V,
        reset => grp_meanFilterInTime_fu_494_reset,
        ap_return => grp_meanFilterInTime_fu_494_ap_return,
        ap_ce => ap_const_logic_1);

    axi_algorithm_maceOg_U11 : component axi_algorithm_maceOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        din0 => grp_fu_1055_p0,
        din1 => grp_fu_1055_p1,
        din2 => sum_V_load_reg_1164,
        dout => grp_fu_1055_p3);

    axi_algorithm_macfYi_U12 : component axi_algorithm_macfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        din0 => grp_fu_1062_p0,
        din1 => grp_fu_1062_p1,
        din2 => p_Val2_10_i_reg_1215,
        dout => grp_fu_1062_p3);

    axi_algorithm_maceOg_U13 : component axi_algorithm_maceOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        din0 => grp_fu_1071_p0,
        din1 => grp_fu_1071_p1,
        din2 => sum_V_load_1_reg_1205,
        dout => grp_fu_1071_p3);

    axi_algorithm_macfYi_U14 : component axi_algorithm_macfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        din0 => grp_fu_1078_p0,
        din1 => grp_fu_1078_p1,
        din2 => p_Val2_10_1_i_reg_1300,
        dout => grp_fu_1078_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                elsif ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage27) and (ap_block_pp1_stage27_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_7_i_reg_1291))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage27) and (ap_block_pp1_stage27_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_block_pp1_stage5_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_meanFilterInTime_fu_494_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_meanFilterInTime_fu_494_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage16) and (ap_block_pp1_stage16_flag00011001 = ap_const_boolean_0)))) then 
                    ap_reg_grp_meanFilterInTime_fu_494_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_meanFilterInTime_fu_494_ap_ready)) then 
                    ap_reg_grp_meanFilterInTime_fu_494_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_precharge_reg_pp1_iter0_cont32_2_i_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_232 = ap_const_boolean_1)) then
                if ((ap_const_lv1_0 = tmp_19_i_reg_1134)) then 
                    ap_phi_precharge_reg_pp1_iter0_cont32_2_i_reg_354 <= cont_i_reg_308;
                elsif ((tmp_19_i_reg_1134 = ap_const_lv1_1)) then 
                    ap_phi_precharge_reg_pp1_iter0_cont32_2_i_reg_354 <= p_i_fu_654_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_precharge_reg_pp1_iter0_contNuevoSuma_2_i_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_232 = ap_const_boolean_1)) then
                if ((ap_const_lv1_0 = tmp_19_i_reg_1134)) then 
                    ap_phi_precharge_reg_pp1_iter0_contNuevoSuma_2_i_reg_377 <= contNuevoSuma_1_i_fu_612_p3;
                elsif ((tmp_19_i_reg_1134 = ap_const_lv1_1)) then 
                    ap_phi_precharge_reg_pp1_iter0_contNuevoSuma_2_i_reg_377 <= contNuevoSuma_3_i_fu_679_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_precharge_reg_pp1_iter0_contNuevoSuma_i_be_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_291 = ap_const_boolean_1)) then
                if ((ap_const_lv1_0 = tmp_19_1_i_reg_1241)) then 
                    ap_phi_precharge_reg_pp1_iter0_contNuevoSuma_i_be_reg_437 <= contNuevoSuma_2_i_reg_377;
                elsif ((ap_const_lv1_1 = tmp_19_1_i_reg_1241)) then 
                    ap_phi_precharge_reg_pp1_iter0_contNuevoSuma_i_be_reg_437 <= contNuevoSuma_3_1_i_fu_834_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_precharge_reg_pp1_iter0_contNuevo_1_i_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_232 = ap_const_boolean_1)) then
                if ((ap_const_lv1_0 = tmp_19_i_reg_1134)) then 
                    ap_phi_precharge_reg_pp1_iter0_contNuevo_1_i_reg_365 <= phitmp_i_fu_631_p3;
                elsif ((tmp_19_i_reg_1134 = ap_const_lv1_1)) then 
                    ap_phi_precharge_reg_pp1_iter0_contNuevo_1_i_reg_365 <= ap_const_lv32_1;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_precharge_reg_pp1_iter0_contNuevo_i_be_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_291 = ap_const_boolean_1)) then
                if ((ap_const_lv1_0 = tmp_19_1_i_reg_1241)) then 
                    ap_phi_precharge_reg_pp1_iter0_contNuevo_i_be_reg_424 <= phitmp_1_i_fu_792_p3;
                elsif ((ap_const_lv1_1 = tmp_19_1_i_reg_1241)) then 
                    ap_phi_precharge_reg_pp1_iter0_contNuevo_i_be_reg_424 <= ap_const_lv32_1;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_precharge_reg_pp1_iter0_cont_i_be_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_291 = ap_const_boolean_1)) then
                if ((ap_const_lv1_0 = tmp_19_1_i_reg_1241)) then 
                    ap_phi_precharge_reg_pp1_iter0_cont_i_be_reg_412 <= cont32_2_i_reg_354;
                elsif ((ap_const_lv1_1 = tmp_19_1_i_reg_1241)) then 
                    ap_phi_precharge_reg_pp1_iter0_cont_i_be_reg_412 <= p_1_i_fu_810_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_precharge_reg_pp1_iter0_ind16_2_i_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_232 = ap_const_boolean_1)) then
                if ((ap_const_lv1_0 = tmp_19_i_reg_1134)) then 
                    ap_phi_precharge_reg_pp1_iter0_ind16_2_i_reg_388 <= ind_i_reg_271;
                elsif ((tmp_19_i_reg_1134 = ap_const_lv1_1)) then 
                    ap_phi_precharge_reg_pp1_iter0_ind16_2_i_reg_388 <= p_ind_i_cast_fu_669_p1;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_precharge_reg_pp1_iter0_indPar_1_i_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_232 = ap_const_boolean_1)) then
                if ((ap_const_lv1_0 = tmp_19_i_reg_1134)) then 
                    ap_phi_precharge_reg_pp1_iter0_indPar_1_i_reg_343 <= this_assign_0_i_phi_fu_335_p4;
                elsif ((tmp_19_i_reg_1134 = ap_const_lv1_1)) then 
                    ap_phi_precharge_reg_pp1_iter0_indPar_1_i_reg_343 <= indPar_i_fu_673_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_precharge_reg_pp1_iter0_ind_i_be_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_291 = ap_const_boolean_1)) then
                if ((ap_const_lv1_0 = tmp_19_1_i_reg_1241)) then 
                    ap_phi_precharge_reg_pp1_iter0_ind_i_be_reg_449 <= ind16_2_i_reg_388;
                elsif ((ap_const_lv1_1 = tmp_19_1_i_reg_1241)) then 
                    ap_phi_precharge_reg_pp1_iter0_ind_i_be_reg_449 <= p_ind_1_i_cast_fu_824_p1;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_precharge_reg_pp1_iter0_this_assign_0_i_be_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_291 = ap_const_boolean_1)) then
                if ((ap_const_lv1_0 = tmp_19_1_i_reg_1241)) then 
                    ap_phi_precharge_reg_pp1_iter0_this_assign_0_i_be_reg_400 <= indPar_1_i_reg_343;
                elsif ((ap_const_lv1_1 = tmp_19_1_i_reg_1241)) then 
                    ap_phi_precharge_reg_pp1_iter0_this_assign_0_i_be_reg_400 <= indPar_i_15_fu_828_p2;
                end if;
            end if; 
        end if;
    end process;

    contNuevoSuma_i_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = tmp_7_i_reg_1291))) then 
                contNuevoSuma_i_reg_320 <= contNuevoSuma_i_be_reg_437;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                contNuevoSuma_i_reg_320 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    contNuevo_i_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = tmp_7_i_reg_1291))) then 
                contNuevo_i_reg_296 <= contNuevo_i_be_reg_424;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                contNuevo_i_reg_296 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    cont_i_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = tmp_7_i_reg_1291))) then 
                cont_i_reg_308 <= cont_i_be_reg_412;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                cont_i_reg_308 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    contador_new_i_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                contador_new_i_reg_483 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_const_lv1_0 = tmp_9_i_fu_1009_p2))) then 
                contador_new_i_reg_483 <= tmp_8_i_fu_1003_p2;
            end if; 
        end if;
    end process;

    derivada_V_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_1 = ap_reg_pp1_iter1_tmp_19_1_i_reg_1241))) then 
                derivada_V_0 <= p_Val2_i_i3_reg_1336;
            elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (tmp_19_i_reg_1134 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage17) and (ap_block_pp1_stage17_flag00011001 = ap_const_boolean_0))) then 
                derivada_V_0 <= p_Val2_i_i_reg_1325;
            end if; 
        end if;
    end process;

    i_1_i_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = tmp_7_i_reg_1291))) then 
                i_1_i_reg_284 <= tmp_12_reg_1256;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_1_i_reg_284 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_2_i_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_const_lv1_1 = tmp_9_i_fu_1009_p2))) then 
                i_2_i_reg_461 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_lv1_0 = tmp_1_i_16_fu_1015_p2))) then 
                i_2_i_reg_461 <= i_2_fu_1021_p2;
            end if; 
        end if;
    end process;

    i_3_i_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                i_3_i_reg_472 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = tmp_2_i_fu_1032_p2))) then 
                i_3_i_reg_472 <= i_3_fu_1038_p2;
            end if; 
        end if;
    end process;

    i_i_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_5_i_reg_1092 = ap_const_lv1_0))) then 
                i_i_reg_259 <= i_reg_1096;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                i_i_reg_259 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    ind_i_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = tmp_7_i_reg_1291))) then 
                ind_i_reg_271 <= ind_i_be_reg_449;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ind_i_reg_271 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    this_assign_0_i_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = tmp_7_i_reg_1291))) then 
                this_assign_0_i_reg_331 <= this_assign_0_i_be_reg_400;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                this_assign_0_i_reg_331 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_cont32_2_i_reg_354 <= cont32_2_i_reg_354;
                ap_reg_pp1_iter1_tmp_19_1_i_reg_1241 <= tmp_19_1_i_reg_1241;
                p_Val2_6_i_reg_1210 <= p_Val2_6_i_fu_700_p2;
                tmp_19_1_i_reg_1241 <= tmp_19_1_i_fu_727_p2;
                tmp_9_reg_1230 <= tmp_9_fu_712_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_block_pp1_stage4_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_currentGroupX_OUT_V_6_reg_1315 <= currentGroupX_OUT_V_6_reg_1315;
                p_Val2_6_1_i_reg_1295 <= p_Val2_6_1_i_fu_857_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_19_1_i_fu_727_p2))) then
                cont32_1_i_reg_1245 <= cont32_1_i_fu_733_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then
                cont32_2_i_reg_354 <= ap_phi_precharge_reg_pp1_iter0_cont32_2_i_reg_354;
                contNuevoSuma_2_i_reg_377 <= ap_phi_precharge_reg_pp1_iter0_contNuevoSuma_2_i_reg_377;
                contNuevo_1_i_reg_365 <= ap_phi_precharge_reg_pp1_iter0_contNuevo_1_i_reg_365;
                ind16_2_i_reg_388 <= ap_phi_precharge_reg_pp1_iter0_ind16_2_i_reg_388;
                indPar_1_i_reg_343 <= ap_phi_precharge_reg_pp1_iter0_indPar_1_i_reg_343;
                p_Val2_10_i_reg_1215 <= grp_fu_1055_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (tmp_19_i_fu_586_p2 = ap_const_lv1_1))) then
                cont32_i_reg_1143 <= cont32_i_fu_592_p2;
                currentGroupX_OUT_V_s_reg_1138 <= ind_i_phi_fu_275_p4(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0))) then
                contNuevoSuma_1_i_reg_1169 <= contNuevoSuma_1_i_fu_612_p3;
                p_Val2_2_i_reg_1154 <= p_Val2_2_i_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_block_pp1_stage4_flag00011001 = ap_const_boolean_0))) then
                contNuevoSuma_i_be_reg_437 <= ap_phi_precharge_reg_pp1_iter0_contNuevoSuma_i_be_reg_437;
                contNuevo_i_be_reg_424 <= ap_phi_precharge_reg_pp1_iter0_contNuevo_i_be_reg_424;
                cont_i_be_reg_412 <= ap_phi_precharge_reg_pp1_iter0_cont_i_be_reg_412;
                ind_i_be_reg_449 <= ap_phi_precharge_reg_pp1_iter0_ind_i_be_reg_449;
                p_Val2_10_1_i_reg_1300 <= grp_fu_1071_p3;
                this_assign_0_i_be_reg_400 <= ap_phi_precharge_reg_pp1_iter0_this_assign_0_i_be_reg_400;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                contador <= contador_new_i_reg_483;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (tmp_19_i_reg_1134 = ap_const_lv1_1))) then
                currentGroupX_OUT_V_1_reg_1180 <= currentGroupX_OUT_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011001 = ap_const_boolean_0) and (tmp_19_i_reg_1134 = ap_const_lv1_1))) then
                currentGroupX_OUT_V_2_reg_1225 <= contNuevoSuma_1_i_reg_1169(2 - 1 downto 0);
                tmp_4_i_i_reg_1220 <= tmp_4_i_i_fu_706_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = tmp_19_1_i_reg_1241) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_block_pp1_stage4_flag00011001 = ap_const_boolean_0))) then
                currentGroupX_OUT_V_4_reg_1310 <= ind16_2_i_reg_388(2 - 1 downto 0);
                currentGroupX_OUT_V_6_reg_1315 <= contNuevoSuma_2_i_reg_377(2 - 1 downto 0);
                tmp_4_i_i7_reg_1305 <= tmp_4_i_i7_fu_863_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = tmp_19_1_i_reg_1241) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage21) and (ap_block_pp1_stage21_flag00011001 = ap_const_boolean_0))) then
                currentGroupX_OUT_V_5_reg_1331 <= currentGroupX_OUT_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                    i_1_i119_cast_reg_1106(9 downto 0) <= i_1_i119_cast_fu_549_p1(9 downto 0);
                    i_5_cast_i_reg_1116(9 downto 1) <= i_5_cast_i_fu_575_p1(9 downto 1);
                reset_assign_reg_1126 <= reset_assign_fu_580_p2;
                    sum_V_addr_1_reg_1149(9 downto 1) <= i_5_cast_i_fu_575_p1(10 - 1 downto 0)(9 downto 1);
                sum_V_addr_reg_1121 <= i_1_i_cast_fu_553_p1(10 - 1 downto 0);
                tmp_19_i_reg_1134 <= tmp_19_i_fu_586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                i_reg_1096 <= i_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_block_pp1_stage5_flag00011001 = ap_const_boolean_0))) then
                p_0_1_i_reg_1320 <= grp_fu_1078_p3(41 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0))) then
                p_Val2_2_1_i_reg_1251 <= p_Val2_2_1_i_fu_760_p2;
                tmp_7_i_reg_1291 <= tmp_7_i_fu_840_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_19_1_i_reg_1241))) then
                p_Val2_i_i3_reg_1336 <= p_Val2_i_i3_fu_949_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_19_i_reg_1134 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage16) and (ap_block_pp1_stage16_flag00011001 = ap_const_boolean_0))) then
                p_Val2_i_i_reg_1325 <= p_Val2_i_i_fu_888_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then
                sum_V_load_1_reg_1205 <= sum_V_q1;
                sum_V_load_reg_1164 <= sum_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0))) then
                tmp_12_reg_1256 <= tmp_12_fu_771_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                tmp_5_i_reg_1092 <= tmp_5_i_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (tmp_19_i_reg_1134 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage16) and (ap_block_pp1_stage16_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_19_1_i_reg_1241) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)))) then
                vector_V_0 <= grp_meanFilterInTime_fu_494_ap_return;
            end if;
        end if;
    end process;
    i_1_i119_cast_reg_1106(10) <= '0';
    i_5_cast_i_reg_1116(0) <= '1';
    i_5_cast_i_reg_1116(31 downto 10) <= "0000000000000000000000";
    sum_V_addr_1_reg_1149(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, tmp_5_i_fu_527_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage5, ap_CS_fsm_state39, tmp_9_i_fu_1009_p2, ap_block_pp0_stage0_flag00011011, ap_block_pp1_stage27_flag00011011, ap_enable_reg_pp1_iter1, ap_block_pp1_stage5_flag00011011, ap_block_pp1_stage0_flag00011011, ap_block_pp1_stage1_flag00011011, ap_block_pp1_stage2_flag00011011, ap_block_pp1_stage3_flag00011011, ap_block_pp1_stage4_flag00011011, ap_block_pp1_stage6_flag00011011, ap_block_pp1_stage7_flag00011011, ap_block_pp1_stage8_flag00011011, ap_block_pp1_stage9_flag00011011, ap_block_pp1_stage10_flag00011011, ap_block_pp1_stage11_flag00011011, ap_block_pp1_stage12_flag00011011, ap_block_pp1_stage13_flag00011011, ap_block_pp1_stage14_flag00011011, ap_block_pp1_stage15_flag00011011, ap_block_pp1_stage16_flag00011011, ap_block_pp1_stage17_flag00011011, ap_block_pp1_stage18_flag00011011, ap_block_pp1_stage19_flag00011011, ap_block_pp1_stage20_flag00011011, ap_block_pp1_stage21_flag00011011, ap_block_pp1_stage22_flag00011011, ap_block_pp1_stage23_flag00011011, ap_block_pp1_stage24_flag00011011, ap_block_pp1_stage25_flag00011011, ap_block_pp1_stage26_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (tmp_5_i_fu_527_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (tmp_5_i_fu_527_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_block_pp1_stage1_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_block_pp1_stage2_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_block_pp1_stage3_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_pp1_stage4 => 
                if ((ap_block_pp1_stage4_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                end if;
            when ap_ST_fsm_pp1_stage5 => 
                if (((ap_block_pp1_stage5_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_block_pp1_stage5_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_block_pp1_stage5_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                end if;
            when ap_ST_fsm_pp1_stage6 => 
                if ((ap_block_pp1_stage6_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                end if;
            when ap_ST_fsm_pp1_stage7 => 
                if ((ap_block_pp1_stage7_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage7;
                end if;
            when ap_ST_fsm_pp1_stage8 => 
                if ((ap_block_pp1_stage8_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage8;
                end if;
            when ap_ST_fsm_pp1_stage9 => 
                if ((ap_block_pp1_stage9_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage9;
                end if;
            when ap_ST_fsm_pp1_stage10 => 
                if ((ap_block_pp1_stage10_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage10;
                end if;
            when ap_ST_fsm_pp1_stage11 => 
                if ((ap_block_pp1_stage11_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage11;
                end if;
            when ap_ST_fsm_pp1_stage12 => 
                if ((ap_block_pp1_stage12_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage12;
                end if;
            when ap_ST_fsm_pp1_stage13 => 
                if ((ap_block_pp1_stage13_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage13;
                end if;
            when ap_ST_fsm_pp1_stage14 => 
                if ((ap_block_pp1_stage14_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage14;
                end if;
            when ap_ST_fsm_pp1_stage15 => 
                if ((ap_block_pp1_stage15_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage15;
                end if;
            when ap_ST_fsm_pp1_stage16 => 
                if ((ap_block_pp1_stage16_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage16;
                end if;
            when ap_ST_fsm_pp1_stage17 => 
                if ((ap_block_pp1_stage17_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage17;
                end if;
            when ap_ST_fsm_pp1_stage18 => 
                if ((ap_block_pp1_stage18_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage18;
                end if;
            when ap_ST_fsm_pp1_stage19 => 
                if ((ap_block_pp1_stage19_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage19;
                end if;
            when ap_ST_fsm_pp1_stage20 => 
                if ((ap_block_pp1_stage20_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage20;
                end if;
            when ap_ST_fsm_pp1_stage21 => 
                if ((ap_block_pp1_stage21_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage21;
                end if;
            when ap_ST_fsm_pp1_stage22 => 
                if ((ap_block_pp1_stage22_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage22;
                end if;
            when ap_ST_fsm_pp1_stage23 => 
                if ((ap_block_pp1_stage23_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage23;
                end if;
            when ap_ST_fsm_pp1_stage24 => 
                if ((ap_block_pp1_stage24_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage24;
                end if;
            when ap_ST_fsm_pp1_stage25 => 
                if ((ap_block_pp1_stage25_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage25;
                end if;
            when ap_ST_fsm_pp1_stage26 => 
                if ((ap_block_pp1_stage26_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage26;
                end if;
            when ap_ST_fsm_pp1_stage27 => 
                if ((ap_block_pp1_stage27_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage27;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_const_lv1_1 = tmp_9_i_fu_1009_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
        OP1_V_1_1_i_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_6_1_i_reg_1295),32));

        OP1_V_1_i_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_6_i_reg_1210),32));

        OP1_V_i_14_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_i_reg_1154),32));

        OP1_V_i_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_1_i_reg_1251),32));

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage16 <= ap_CS_fsm(19);
    ap_CS_fsm_pp1_stage17 <= ap_CS_fsm(20);
    ap_CS_fsm_pp1_stage18 <= ap_CS_fsm(21);
    ap_CS_fsm_pp1_stage19 <= ap_CS_fsm(22);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage20 <= ap_CS_fsm(23);
    ap_CS_fsm_pp1_stage21 <= ap_CS_fsm(24);
    ap_CS_fsm_pp1_stage27 <= ap_CS_fsm(30);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage4 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage5 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state39 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state40 <= ap_CS_fsm(32);
    ap_CS_fsm_state41 <= ap_CS_fsm(33);
    ap_CS_fsm_state42 <= ap_CS_fsm(34);
    ap_CS_fsm_state43 <= ap_CS_fsm(35);
    ap_CS_fsm_state44 <= ap_CS_fsm(36);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage10_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage10_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage10_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage11_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage11_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage11_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage12_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage12_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage12_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage13_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage13_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage13_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage14_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage14_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage14_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage15_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage15_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage15_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage16_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage16_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage16_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage17_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage17_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage17_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage18_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage18_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage18_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage19_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage19_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage19_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage20_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage20_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage20_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage21_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage21_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage21_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage22_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage22_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage22_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage23_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage23_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage23_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage24_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage24_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage24_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage25_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage25_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage25_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage26_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage26_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage26_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage27_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage27_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage27_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage8_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage8_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage8_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage9_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage9_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage9_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp1_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage24_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage25_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage26_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage27_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_232_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_flag00011001, ap_enable_reg_pp1_iter0)
    begin
                ap_condition_232 <= ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0));
    end process;


    ap_condition_291_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_flag00011001)
    begin
                ap_condition_291 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_5_i_fu_527_p2)
    begin
        if ((tmp_5_i_fu_527_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    aux_array_V_1_address0_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, i_5_cast_i_reg_1116, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_CS_fsm_state4, ap_block_pp0_stage0_flag00000000, ap_block_pp1_stage0_flag00000000, ap_block_pp1_stage1_flag00000000, ap_block_pp1_stage3_flag00000000, ap_block_pp1_stage2_flag00000000, i_4_cast_i_fu_539_p1, tmp_cast_i_fu_564_p1, tmp_1_cast_i_fu_722_p1, i_5_1_i_cast_fu_775_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00000000 = ap_const_boolean_0))) then 
            aux_array_V_1_address0 <= i_5_1_i_cast_fu_775_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage2_flag00000000 = ap_const_boolean_0))) then 
            aux_array_V_1_address0 <= tmp_1_cast_i_fu_722_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage1_flag00000000 = ap_const_boolean_0))) then 
            aux_array_V_1_address0 <= i_5_cast_i_reg_1116(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            aux_array_V_1_address0 <= tmp_cast_i_fu_564_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            aux_array_V_1_address0 <= ap_const_lv12_800;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            aux_array_V_1_address0 <= i_4_cast_i_fu_539_p1(12 - 1 downto 0);
        else 
            aux_array_V_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    aux_array_V_1_address1_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_CS_fsm_state42, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, ap_block_pp1_stage0_flag00000000, ap_block_pp1_stage1_flag00000000, ap_block_pp1_stage3_flag00000000, ap_block_pp1_stage2_flag00000000, i_cast36_i_fu_544_p1, i_3_cast34_i_fu_1044_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            aux_array_V_1_address1 <= i_3_cast34_i_fu_1044_p1(12 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage1_flag00000000 = ap_const_boolean_0)))) then 
            aux_array_V_1_address1 <= ap_const_lv12_0;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage2_flag00000000 = ap_const_boolean_0)))) then 
            aux_array_V_1_address1 <= ap_const_lv12_400;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            aux_array_V_1_address1 <= i_cast36_i_fu_544_p1(12 - 1 downto 0);
        else 
            aux_array_V_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    aux_array_V_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_flag00011001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_flag00011001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_flag00011001, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)))) then 
            aux_array_V_1_ce0 <= ap_const_logic_1;
        else 
            aux_array_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_array_V_1_ce1_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_flag00011001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_flag00011001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_flag00011001, ap_CS_fsm_state42, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state42) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)))) then 
            aux_array_V_1_ce1 <= ap_const_logic_1;
        else 
            aux_array_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    aux_array_V_1_d1_assign_proc : process(aux_array_V_1_q0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state42, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            aux_array_V_1_d1 <= ap_const_lv24_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            aux_array_V_1_d1 <= aux_array_V_1_q0;
        else 
            aux_array_V_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    aux_array_V_1_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            aux_array_V_1_we0 <= ap_const_logic_1;
        else 
            aux_array_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_array_V_1_we1_assign_proc : process(tmp_5_i_reg_1092, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_state42, ap_enable_reg_pp0_iter1, tmp_2_i_fu_1032_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_5_i_reg_1092 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = tmp_2_i_fu_1032_p2)))) then 
            aux_array_V_1_we1 <= ap_const_logic_1;
        else 
            aux_array_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cont32_1_i_fu_733_p2 <= std_logic_vector(unsigned(ap_phi_precharge_reg_pp1_iter0_cont32_2_i_reg_354) + unsigned(ap_const_lv32_1));
    cont32_i_fu_592_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(cont_i_phi_fu_312_p4));
    contNuevoSuma_1_i_fu_612_p3 <= 
        ap_const_lv32_0 when (reset_assign_reg_1126(0) = '1') else 
        contNuevoSuma_i_phi_fu_324_p4;
    contNuevoSuma_3_1_i_fu_834_p2 <= std_logic_vector(unsigned(contNuevoSuma_2_i_reg_377) + unsigned(ap_const_lv32_1));
    contNuevoSuma_3_i_fu_679_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(contNuevoSuma_1_i_fu_612_p3));

    contNuevoSuma_i_phi_fu_324_p4_assign_proc : process(contNuevoSuma_i_reg_320, contNuevoSuma_i_be_reg_437, ap_CS_fsm_pp1_stage1, tmp_7_i_reg_1291, ap_enable_reg_pp1_iter1, ap_block_pp1_stage1_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = tmp_7_i_reg_1291) and (ap_block_pp1_stage1_flag00000000 = ap_const_boolean_0))) then 
            contNuevoSuma_i_phi_fu_324_p4 <= contNuevoSuma_i_be_reg_437;
        else 
            contNuevoSuma_i_phi_fu_324_p4 <= contNuevoSuma_i_reg_320;
        end if; 
    end process;

    contNuevo_0_op_1_i_fu_786_p2 <= std_logic_vector(unsigned(contNuevo_1_i_reg_365) + unsigned(ap_const_lv32_1));
    contNuevo_0_op_i_fu_625_p2 <= std_logic_vector(unsigned(contNuevo_i_reg_296) + unsigned(ap_const_lv32_1));

    contNuevo_i_phi_fu_300_p4_assign_proc : process(contNuevo_i_reg_296, contNuevo_i_be_reg_424, ap_CS_fsm_pp1_stage0, tmp_7_i_reg_1291, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = tmp_7_i_reg_1291) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            contNuevo_i_phi_fu_300_p4 <= contNuevo_i_be_reg_424;
        else 
            contNuevo_i_phi_fu_300_p4 <= contNuevo_i_reg_296;
        end if; 
    end process;


    cont_i_phi_fu_312_p4_assign_proc : process(cont_i_reg_308, cont_i_be_reg_412, ap_CS_fsm_pp1_stage0, tmp_7_i_reg_1291, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = tmp_7_i_reg_1291) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            cont_i_phi_fu_312_p4 <= cont_i_be_reg_412;
        else 
            cont_i_phi_fu_312_p4 <= cont_i_reg_308;
        end if; 
    end process;


    currentGroupX_OUT_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, currentGroupX_OUT_V_s_reg_1138, ap_enable_reg_pp1_iter0, currentGroupX_OUT_V_2_reg_1225, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage4, currentGroupX_OUT_V_4_reg_1310, currentGroupX_OUT_V_6_reg_1315, ap_reg_pp1_iter1_currentGroupX_OUT_V_6_reg_1315, ap_CS_fsm_pp1_stage5, ap_enable_reg_pp1_iter1, ind_i_phi_fu_275_p4, ap_block_pp1_stage0_flag00000000, ap_block_pp1_stage3_flag00000000, ap_CS_fsm_pp1_stage17, ap_block_pp1_stage17_flag00000000, ap_block_pp1_stage4_flag00000000, ap_block_pp1_stage5_flag00000000, ap_CS_fsm_pp1_stage18, ap_block_pp1_stage18_flag00000000, ap_CS_fsm_pp1_stage19, ap_block_pp1_stage19_flag00000000, ap_CS_fsm_pp1_stage20, ap_block_pp1_stage20_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage5_flag00000000 = ap_const_boolean_0))) then 
            currentGroupX_OUT_V_address0 <= ap_reg_pp1_iter1_currentGroupX_OUT_V_6_reg_1315;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage4_flag00000000 = ap_const_boolean_0))) then 
            currentGroupX_OUT_V_address0 <= currentGroupX_OUT_V_6_reg_1315;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage20) and (ap_block_pp1_stage20_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage3_flag00000000 = ap_const_boolean_0)))) then 
            currentGroupX_OUT_V_address0 <= currentGroupX_OUT_V_4_reg_1310;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage18) and (ap_block_pp1_stage18_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage19) and (ap_block_pp1_stage19_flag00000000 = ap_const_boolean_0)))) then 
            currentGroupX_OUT_V_address0 <= currentGroupX_OUT_V_2_reg_1225;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage17) and (ap_block_pp1_stage17_flag00000000 = ap_const_boolean_0))) then 
            currentGroupX_OUT_V_address0 <= currentGroupX_OUT_V_s_reg_1138;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            currentGroupX_OUT_V_address0 <= ind_i_phi_fu_275_p4(2 - 1 downto 0);
        else 
            currentGroupX_OUT_V_address0 <= "XX";
        end if; 
    end process;


    currentGroupX_OUT_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_flag00011001, ap_CS_fsm_pp1_stage4, ap_block_pp1_stage4_flag00011001, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage5_flag00011001, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage17, ap_block_pp1_stage17_flag00011001, ap_CS_fsm_pp1_stage18, ap_block_pp1_stage18_flag00011001, ap_CS_fsm_pp1_stage19, ap_block_pp1_stage19_flag00011001, ap_CS_fsm_pp1_stage20, ap_block_pp1_stage20_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage17) and (ap_block_pp1_stage17_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage18) and (ap_block_pp1_stage18_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage19) and (ap_block_pp1_stage19_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage20) and (ap_block_pp1_stage20_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_block_pp1_stage4_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_block_pp1_stage5_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)))) then 
            currentGroupX_OUT_V_ce0 <= ap_const_logic_1;
        else 
            currentGroupX_OUT_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    currentGroupX_OUT_V_d0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage5, ap_enable_reg_pp1_iter1, ap_block_pp1_stage3_flag00000000, ap_CS_fsm_pp1_stage17, ap_block_pp1_stage17_flag00000000, ap_block_pp1_stage5_flag00000000, ap_CS_fsm_pp1_stage19, ap_block_pp1_stage19_flag00000000, p_Val2_17_i_fu_934_p4, tmp_1_fu_944_p1, p_Val2_17_1_i_fu_984_p4, tmp_2_fu_994_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage5_flag00000000 = ap_const_boolean_0))) then 
            currentGroupX_OUT_V_d0 <= tmp_2_fu_994_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage3_flag00000000 = ap_const_boolean_0))) then 
            currentGroupX_OUT_V_d0 <= p_Val2_17_1_i_fu_984_p4;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage19) and (ap_block_pp1_stage19_flag00000000 = ap_const_boolean_0))) then 
            currentGroupX_OUT_V_d0 <= tmp_1_fu_944_p1;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage17) and (ap_block_pp1_stage17_flag00000000 = ap_const_boolean_0))) then 
            currentGroupX_OUT_V_d0 <= p_Val2_17_i_fu_934_p4;
        else 
            currentGroupX_OUT_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    currentGroupX_OUT_V_we0_assign_proc : process(tmp_19_i_reg_1134, ap_enable_reg_pp1_iter0, ap_reg_pp1_iter1_tmp_19_1_i_reg_1241, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_flag00011001, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage5_flag00011001, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage17, ap_block_pp1_stage17_flag00011001, ap_CS_fsm_pp1_stage19, ap_block_pp1_stage19_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (tmp_19_i_reg_1134 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage17) and (ap_block_pp1_stage17_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_1 = ap_reg_pp1_iter1_tmp_19_1_i_reg_1241)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (tmp_19_i_reg_1134 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage19) and (ap_block_pp1_stage19_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_block_pp1_stage5_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_1 = ap_reg_pp1_iter1_tmp_19_1_i_reg_1241)))) then 
            currentGroupX_OUT_V_we0 <= ap_const_logic_1;
        else 
            currentGroupX_OUT_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1055_p0 <= OP1_V_i_14_fu_689_p1(16 - 1 downto 0);
    grp_fu_1055_p1 <= OP1_V_i_14_fu_689_p1(16 - 1 downto 0);
    grp_fu_1062_p0 <= OP1_V_1_i_fu_739_p1(16 - 1 downto 0);
    grp_fu_1062_p1 <= OP1_V_1_i_fu_739_p1(16 - 1 downto 0);
    grp_fu_1071_p0 <= OP1_V_i_fu_846_p1(16 - 1 downto 0);
    grp_fu_1071_p1 <= OP1_V_i_fu_846_p1(16 - 1 downto 0);
    grp_fu_1078_p0 <= OP1_V_1_1_i_fu_869_p1(16 - 1 downto 0);
    grp_fu_1078_p1 <= OP1_V_1_1_i_fu_869_p1(16 - 1 downto 0);
    grp_fu_517_p4 <= currentGroupX_OUT_V_q0(31 downto 1);
    grp_meanFilterInTime_fu_494_ap_start <= ap_reg_grp_meanFilterInTime_fu_494_ap_start;

    grp_meanFilterInTime_fu_494_reset_assign_proc : process(reset_assign_reg_1126, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_flag00000000, ap_CS_fsm_pp1_stage17, ap_block_pp1_stage17_flag00000000)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp1_iter0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage17) and (ap_block_pp1_stage17_flag00000000 = ap_const_boolean_0))) then 
                grp_meanFilterInTime_fu_494_reset <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00000000 = ap_const_boolean_0))) then 
                grp_meanFilterInTime_fu_494_reset <= reset_assign_reg_1126;
            else 
                grp_meanFilterInTime_fu_494_reset <= "X";
            end if;
        else 
            grp_meanFilterInTime_fu_494_reset <= "X";
        end if; 
    end process;


    grp_meanFilterInTime_fu_494_x_V_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, p_0_1_i_reg_1320, ap_block_pp1_stage3_flag00000000, ap_CS_fsm_pp1_stage17, ap_block_pp1_stage17_flag00000000, grp_fu_1062_p3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp1_iter0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage17) and (ap_block_pp1_stage17_flag00000000 = ap_const_boolean_0))) then 
                grp_meanFilterInTime_fu_494_x_V <= p_0_1_i_reg_1320;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00000000 = ap_const_boolean_0))) then 
                grp_meanFilterInTime_fu_494_x_V <= grp_fu_1062_p3(41 downto 10);
            else 
                grp_meanFilterInTime_fu_494_x_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_meanFilterInTime_fu_494_x_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_cast_i_cast_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_i_reg_284),12));
    i_1_i119_cast_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_i_phi_fu_288_p4),11));
    i_1_i_cast_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_i_phi_fu_288_p4),32));

    i_1_i_phi_fu_288_p4_assign_proc : process(i_1_i_reg_284, ap_CS_fsm_pp1_stage0, tmp_12_reg_1256, tmp_7_i_reg_1291, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = tmp_7_i_reg_1291) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_1_i_phi_fu_288_p4 <= tmp_12_reg_1256;
        else 
            i_1_i_phi_fu_288_p4 <= i_1_i_reg_284;
        end if; 
    end process;

    i_2_cast35_i_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_i_reg_461),32));
    i_2_fu_1021_p2 <= std_logic_vector(unsigned(i_2_i_reg_461) + unsigned(ap_const_lv11_1));
    i_3_cast34_i_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i_reg_472),32));
    i_3_fu_1038_p2 <= std_logic_vector(unsigned(i_3_i_reg_472) + unsigned(ap_const_lv12_1));
    i_4_cast_i_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_533_p2),32));
    i_5_1_i_cast_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_1_i_fu_766_p2),32));
    i_5_1_i_fu_766_p2 <= std_logic_vector(unsigned(ap_const_lv11_2) + unsigned(i_1_i119_cast_reg_1106));
    i_5_cast_i_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_i_fu_569_p2),32));
    i_5_i_fu_569_p2 <= (i_1_i_phi_fu_288_p4 or ap_const_lv10_1);
    i_cast36_i_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_259),32));
    i_fu_533_p2 <= std_logic_vector(unsigned(i_i_phi_fu_263_p4) + unsigned(ap_const_lv12_1));

    i_i_phi_fu_263_p4_assign_proc : process(i_i_reg_259, tmp_5_i_reg_1092, ap_CS_fsm_pp0_stage0, i_reg_1096, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_5_i_reg_1092 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_i_phi_fu_263_p4 <= i_reg_1096;
        else 
            i_i_phi_fu_263_p4 <= i_i_reg_259;
        end if; 
    end process;

    ind16_1_i_cast_fu_805_p2 <= std_logic_vector(unsigned(tmp_9_reg_1230) + unsigned(ap_const_lv3_1));
    ind16_i_cast_fu_648_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(tmp_8_fu_644_p1));
    indPar_i_15_fu_828_p2 <= std_logic_vector(unsigned(indPar_1_i_reg_343) + unsigned(ap_const_lv32_1));
    indPar_i_fu_673_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(this_assign_0_i_phi_fu_335_p4));

    ind_i_phi_fu_275_p4_assign_proc : process(ind_i_reg_271, ind_i_be_reg_449, ap_CS_fsm_pp1_stage0, tmp_7_i_reg_1291, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = tmp_7_i_reg_1291) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            ind_i_phi_fu_275_p4 <= ind_i_be_reg_449;
        else 
            ind_i_phi_fu_275_p4 <= ind_i_reg_271;
        end if; 
    end process;

    minimoX_0_1_fu_973_p2 <= (tmp2_fu_968_p2 and tmp_15_fu_955_p3);
    minimoX_0_fu_923_p2 <= (tmp9_fu_918_p2 and tmp_fu_912_p2);
    not_reset_i_fu_902_p2 <= (reset_assign_reg_1126 xor ap_const_lv1_1);
    p_1_i_fu_810_p3 <= 
        ap_const_lv32_0 when (tmp_21_1_i_fu_800_p2(0) = '1') else 
        cont32_1_i_reg_1245;
    
    p_Val2_17_1_i_fu_984_p4_proc : process(currentGroupX_OUT_V_5_reg_1331, ap_reg_pp1_iter1_cont32_2_i_reg_354, minimoX_0_1_fu_973_p2)
    begin
        p_Val2_17_1_i_fu_984_p4 <= currentGroupX_OUT_V_5_reg_1331;
        if to_integer(unsigned(ap_reg_pp1_iter1_cont32_2_i_reg_354)) >= currentGroupX_OUT_V_5_reg_1331'low and to_integer(unsigned(ap_reg_pp1_iter1_cont32_2_i_reg_354)) <= currentGroupX_OUT_V_5_reg_1331'high then
            p_Val2_17_1_i_fu_984_p4(to_integer(unsigned(ap_reg_pp1_iter1_cont32_2_i_reg_354))) <= minimoX_0_1_fu_973_p2(0);
        end if;
    end process;

    
    p_Val2_17_i_fu_934_p4_proc : process(currentGroupX_OUT_V_1_reg_1180, cont_i_reg_308, minimoX_0_fu_923_p2)
    begin
        p_Val2_17_i_fu_934_p4 <= currentGroupX_OUT_V_1_reg_1180;
        if to_integer(unsigned(cont_i_reg_308)) >= currentGroupX_OUT_V_1_reg_1180'low and to_integer(unsigned(cont_i_reg_308)) <= currentGroupX_OUT_V_1_reg_1180'high then
            p_Val2_17_i_fu_934_p4(to_integer(unsigned(cont_i_reg_308))) <= minimoX_0_fu_923_p2(0);
        end if;
    end process;

    p_Val2_1_fu_881_p3 <= 
        ap_const_lv32_0 when (reset_assign_reg_1126(0) = '1') else 
        vector_V_0;
    p_Val2_2_1_i_fu_760_p2 <= std_logic_vector(unsigned(tmp_10_fu_752_p1) - unsigned(tmp_11_fu_756_p1));
    p_Val2_2_i_fu_606_p2 <= std_logic_vector(unsigned(tmp_3_fu_598_p1) - unsigned(tmp_4_fu_602_p1));
    p_Val2_6_1_i_fu_857_p2 <= std_logic_vector(unsigned(tmp_13_fu_849_p1) - unsigned(tmp_14_fu_853_p1));
    p_Val2_6_i_fu_700_p2 <= std_logic_vector(unsigned(tmp_5_fu_692_p1) - unsigned(tmp_6_fu_696_p1));
    p_Val2_i_i3_fu_949_p2 <= std_logic_vector(unsigned(grp_meanFilterInTime_fu_494_ap_return) - unsigned(vector_V_0));
    p_Val2_i_i_fu_888_p2 <= std_logic_vector(unsigned(grp_meanFilterInTime_fu_494_ap_return) - unsigned(p_Val2_1_fu_881_p3));
    p_i_fu_654_p3 <= 
        ap_const_lv32_0 when (tmp_21_i_fu_639_p2(0) = '1') else 
        cont32_i_reg_1143;
    p_ind_1_i_cast_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_ind_1_i_fu_817_p3),32));
    p_ind_1_i_fu_817_p3 <= 
        ind16_1_i_cast_fu_805_p2 when (tmp_21_1_i_fu_800_p2(0) = '1') else 
        tmp_9_reg_1230;
    p_ind_i_cast_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_ind_i_fu_661_p3),32));
    p_ind_i_fu_661_p3 <= 
        ind16_i_cast_fu_648_p2 when (tmp_21_i_fu_639_p2(0) = '1') else 
        tmp_8_fu_644_p1;
    phitmp_1_i_fu_792_p3 <= 
        ap_const_lv32_1 when (tmp_22_1_i_fu_780_p2(0) = '1') else 
        contNuevo_0_op_1_i_fu_786_p2;
    phitmp_i_fu_631_p3 <= 
        ap_const_lv32_1 when (tmp_22_i_fu_619_p2(0) = '1') else 
        contNuevo_0_op_i_fu_625_p2;
    reset_assign_fu_580_p2 <= "1" when (i_1_i_phi_fu_288_p4 = ap_const_lv10_0) else "0";

    sum_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, sum_V_addr_reg_1121, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_CS_fsm_state40, ap_block_pp1_stage0_flag00000000, ap_block_pp1_stage3_flag00000000, i_1_i_cast_fu_553_p1, i_2_cast35_i_fu_1027_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            sum_V_address0 <= i_2_cast35_i_fu_1027_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00000000 = ap_const_boolean_0))) then 
            sum_V_address0 <= sum_V_addr_reg_1121;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            sum_V_address0 <= i_1_i_cast_fu_553_p1(10 - 1 downto 0);
        else 
            sum_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sum_V_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, i_5_cast_i_fu_575_p1, sum_V_addr_1_reg_1149, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage0_flag00000000, ap_block_pp1_stage5_flag00000000)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp1_iter0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_block_pp1_stage5_flag00000000 = ap_const_boolean_0))) then 
                sum_V_address1 <= sum_V_addr_1_reg_1149;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
                sum_V_address1 <= i_5_cast_i_fu_575_p1(10 - 1 downto 0);
            else 
                sum_V_address1 <= "XXXXXXXXXX";
            end if;
        else 
            sum_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    sum_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_flag00011001, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state40) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)))) then 
            sum_V_ce0 <= ap_const_logic_1;
        else 
            sum_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_V_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage5_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_block_pp1_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)))) then 
            sum_V_ce1 <= ap_const_logic_1;
        else 
            sum_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_V_d0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_CS_fsm_state40, ap_block_pp1_stage3_flag00000000, grp_fu_1062_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            sum_V_d0 <= ap_const_lv42_0;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00000000 = ap_const_boolean_0))) then 
            sum_V_d0 <= grp_fu_1062_p3;
        else 
            sum_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_V_we0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_flag00011001, ap_CS_fsm_state40, tmp_1_i_16_fu_1015_p2)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_lv1_0 = tmp_1_i_16_fu_1015_p2)))) then 
            sum_V_we0 <= ap_const_logic_1;
        else 
            sum_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_V_we1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage5_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_block_pp1_stage5_flag00011001 = ap_const_boolean_0))) then 
            sum_V_we1 <= ap_const_logic_1;
        else 
            sum_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    this_assign_0_i_phi_fu_335_p4_assign_proc : process(this_assign_0_i_reg_331, this_assign_0_i_be_reg_400, ap_CS_fsm_pp1_stage1, tmp_7_i_reg_1291, ap_enable_reg_pp1_iter1, ap_block_pp1_stage1_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = tmp_7_i_reg_1291) and (ap_block_pp1_stage1_flag00000000 = ap_const_boolean_0))) then 
            this_assign_0_i_phi_fu_335_p4 <= this_assign_0_i_be_reg_400;
        else 
            this_assign_0_i_phi_fu_335_p4 <= this_assign_0_i_reg_331;
        end if; 
    end process;

    tmp2_fu_968_p2 <= (tmp_3_i_i5_fu_963_p2 and tmp_4_i_i7_reg_1305);
    tmp9_fu_918_p2 <= (tmp_3_i_i_fu_907_p2 and tmp_4_i_i_reg_1220);
    tmp_10_fu_752_p1 <= aux_array_V_1_q1(16 - 1 downto 0);
    tmp_11_fu_756_p1 <= aux_array_V_1_q0(16 - 1 downto 0);
    tmp_12_fu_771_p1 <= i_5_1_i_fu_766_p2(10 - 1 downto 0);
    tmp_13_fu_849_p1 <= aux_array_V_1_q1(16 - 1 downto 0);
    tmp_14_fu_853_p1 <= aux_array_V_1_q0(16 - 1 downto 0);
    tmp_15_fu_955_p3 <= derivada_V_0(31 downto 31);
    tmp_19_1_i_fu_727_p2 <= "1" when (ap_phi_precharge_reg_pp1_iter0_contNuevo_1_i_reg_365 = ap_const_lv32_0) else "0";
    tmp_19_i_fu_586_p2 <= "1" when (contNuevo_i_phi_fu_300_p4 = ap_const_lv32_0) else "0";
    tmp_1_cast_i_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_fu_716_p2),32));
    tmp_1_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_517_p4),32));
    tmp_1_i_16_fu_1015_p2 <= "1" when (i_2_i_reg_461 = ap_const_lv11_400) else "0";
    tmp_1_i_fu_716_p2 <= std_logic_vector(unsigned(ap_const_lv12_402) + unsigned(i_1_cast_i_cast_fu_685_p1));
    tmp_21_1_i_fu_800_p2 <= "1" when (cont32_1_i_reg_1245 = ap_const_lv32_20) else "0";
    tmp_21_i_fu_639_p2 <= "1" when (cont32_i_reg_1143 = ap_const_lv32_20) else "0";
    tmp_22_1_i_fu_780_p2 <= "1" when (contNuevo_1_i_reg_365 = ap_const_lv32_7) else "0";
    tmp_22_i_fu_619_p2 <= "1" when (contNuevo_i_reg_296 = ap_const_lv32_7) else "0";
    tmp_2_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_517_p4),32));
    tmp_2_i_fu_1032_p2 <= "1" when (i_3_i_reg_472 = ap_const_lv12_801) else "0";
    tmp_3_fu_598_p1 <= aux_array_V_1_q1(16 - 1 downto 0);
    tmp_3_i_i5_fu_963_p2 <= "1" when (signed(p_Val2_i_i3_reg_1336) > signed(ap_const_lv32_0)) else "0";
    tmp_3_i_i_fu_907_p2 <= "1" when (signed(p_Val2_i_i_reg_1325) > signed(ap_const_lv32_0)) else "0";
    tmp_4_fu_602_p1 <= aux_array_V_1_q0(16 - 1 downto 0);
    tmp_4_i_i7_fu_863_p2 <= "1" when (signed(indPar_1_i_reg_343) > signed(ap_const_lv32_9)) else "0";
    tmp_4_i_i_fu_706_p2 <= "1" when (signed(this_assign_0_i_reg_331) > signed(ap_const_lv32_9)) else "0";
    tmp_5_fu_692_p1 <= aux_array_V_1_q1(16 - 1 downto 0);
    tmp_5_i_fu_527_p2 <= "1" when (i_i_phi_fu_263_p4 = ap_const_lv12_800) else "0";
    tmp_6_fu_696_p1 <= aux_array_V_1_q0(16 - 1 downto 0);
    tmp_7_fu_894_p3 <= derivada_V_0(31 downto 31);
    tmp_7_i_fu_840_p2 <= "1" when (i_5_1_i_fu_766_p2 = ap_const_lv11_400) else "0";
    tmp_8_fu_644_p1 <= ind_i_reg_271(3 - 1 downto 0);
    tmp_8_i_fu_1003_p2 <= std_logic_vector(unsigned(contador) + unsigned(ap_const_lv32_1));
    tmp_9_fu_712_p1 <= ap_phi_precharge_reg_pp1_iter0_ind16_2_i_reg_388(3 - 1 downto 0);
    tmp_9_i_fu_1009_p2 <= "1" when (tmp_8_i_fu_1003_p2 = ap_const_lv32_801) else "0";
    tmp_cast_i_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_13_fu_558_p2),32));
    tmp_fu_912_p2 <= (tmp_7_fu_894_p3 and not_reset_i_fu_902_p2);
    tmp_i_13_fu_558_p2 <= std_logic_vector(signed(ap_const_lv11_401) + signed(i_1_i119_cast_fu_549_p1));
end behav;
