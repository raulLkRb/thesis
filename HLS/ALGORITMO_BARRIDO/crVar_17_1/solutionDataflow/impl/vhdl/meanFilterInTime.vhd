-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity meanFilterInTime is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (31 downto 0);
    reset : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of meanFilterInTime is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal aux_array_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal aux_array_V_ce0 : STD_LOGIC;
    signal aux_array_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal aux_array_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal aux_array_V_ce1 : STD_LOGIC;
    signal aux_array_V_we1 : STD_LOGIC;
    signal aux_array_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reset_read_read_fu_42_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reset_read_reg_153 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_V_read_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal aux_array_V_load_6_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal aux_array_V_load_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal aux_array_V_load_1_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal aux_array_V_load_2_reg_181 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal aux_array_V_load_3_reg_187 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal aux_array_V_load_4_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal aux_array_V_load_5_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal y_0_V_write_assign_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_31_cast_i_fu_77_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_31_1_cast_i_fu_80_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_31_2_cast_i_fu_83_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_31_3_cast_i_fu_86_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp2_fu_107_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp1_fu_101_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_31_4_cast_i_fu_89_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_31_5_cast_i_fu_92_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_31_6_cast_i_fu_95_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_cast_i_fu_98_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp5_fu_125_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp4_fu_119_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp3_fu_131_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_fu_113_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_i_fu_137_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component meanFilterInTime_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    aux_array_V_U : component meanFilterInTime_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => aux_array_V_address0,
        ce0 => aux_array_V_ce0,
        q0 => aux_array_V_q0,
        address1 => aux_array_V_address1,
        ce1 => aux_array_V_ce1,
        we1 => aux_array_V_we1,
        d1 => aux_array_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                aux_array_V_load_1_reg_175 <= aux_array_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                aux_array_V_load_2_reg_181 <= aux_array_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                aux_array_V_load_3_reg_187 <= aux_array_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                aux_array_V_load_4_reg_193 <= aux_array_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                aux_array_V_load_5_reg_199 <= aux_array_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                aux_array_V_load_6_reg_163 <= aux_array_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                aux_array_V_load_reg_169 <= aux_array_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1))) then
                reset_read_reg_153 <= reset;
                x_V_read_reg_157 <= x_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                y_0_V_write_assign_reg_205 <= p_Val2_i_fu_137_p2(32 downto 1);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state14)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state14)
    begin
        if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= y_0_V_write_assign_reg_205;

    aux_array_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            aux_array_V_address0 <= ap_const_lv3_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            aux_array_V_address0 <= ap_const_lv3_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            aux_array_V_address0 <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            aux_array_V_address0 <= ap_const_lv3_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            aux_array_V_address0 <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            aux_array_V_address0 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            aux_array_V_address0 <= ap_const_lv3_7;
        else 
            aux_array_V_address0 <= "XXX";
        end if; 
    end process;


    aux_array_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            aux_array_V_address1 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            aux_array_V_address1 <= ap_const_lv3_7;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            aux_array_V_address1 <= ap_const_lv3_6;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            aux_array_V_address1 <= ap_const_lv3_5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            aux_array_V_address1 <= ap_const_lv3_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            aux_array_V_address1 <= ap_const_lv3_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            aux_array_V_address1 <= ap_const_lv3_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            aux_array_V_address1 <= ap_const_lv3_1;
        else 
            aux_array_V_address1 <= "XXX";
        end if; 
    end process;


    aux_array_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            aux_array_V_ce0 <= ap_const_logic_1;
        else 
            aux_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_array_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            aux_array_V_ce1 <= ap_const_logic_1;
        else 
            aux_array_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    aux_array_V_d1_assign_proc : process(ap_CS_fsm_state1, x_V_read_reg_157, aux_array_V_load_6_reg_163, ap_CS_fsm_state2, aux_array_V_load_reg_169, ap_CS_fsm_state3, aux_array_V_load_1_reg_175, ap_CS_fsm_state4, aux_array_V_load_2_reg_181, ap_CS_fsm_state5, aux_array_V_load_3_reg_187, ap_CS_fsm_state6, aux_array_V_load_4_reg_193, ap_CS_fsm_state7, aux_array_V_load_5_reg_199, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            aux_array_V_d1 <= aux_array_V_load_6_reg_163;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            aux_array_V_d1 <= aux_array_V_load_5_reg_199;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            aux_array_V_d1 <= aux_array_V_load_4_reg_193;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            aux_array_V_d1 <= aux_array_V_load_3_reg_187;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aux_array_V_d1 <= aux_array_V_load_2_reg_181;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            aux_array_V_d1 <= aux_array_V_load_1_reg_175;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            aux_array_V_d1 <= aux_array_V_load_reg_169;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            aux_array_V_d1 <= x_V_read_reg_157;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            aux_array_V_d1 <= ap_const_lv32_0;
        else 
            aux_array_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    aux_array_V_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, reset_read_read_fu_42_p2, reset_read_reg_153, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (reset_read_read_fu_42_p2 = ap_const_lv1_1)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (reset_read_reg_153 = ap_const_lv1_1)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (reset_read_reg_153 = ap_const_lv1_1)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (reset_read_reg_153 = ap_const_lv1_1)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (reset_read_reg_153 = ap_const_lv1_1)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (reset_read_reg_153 = ap_const_lv1_1)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            aux_array_V_we1 <= ap_const_logic_1;
        else 
            aux_array_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_i_fu_137_p2 <= std_logic_vector(unsigned(tmp3_fu_131_p2) + unsigned(tmp_fu_113_p2));
    reset_read_read_fu_42_p2 <= reset;
    tmp1_fu_101_p2 <= std_logic_vector(signed(tmp_31_cast_i_fu_77_p1) + signed(tmp_31_1_cast_i_fu_80_p1));
    tmp2_fu_107_p2 <= std_logic_vector(signed(tmp_31_2_cast_i_fu_83_p1) + signed(tmp_31_3_cast_i_fu_86_p1));
    tmp3_fu_131_p2 <= std_logic_vector(unsigned(tmp5_fu_125_p2) + unsigned(tmp4_fu_119_p2));
    tmp4_fu_119_p2 <= std_logic_vector(signed(tmp_31_4_cast_i_fu_89_p1) + signed(tmp_31_5_cast_i_fu_92_p1));
    tmp5_fu_125_p2 <= std_logic_vector(signed(tmp_31_6_cast_i_fu_95_p1) + signed(tmp_cast_i_fu_98_p1));
        tmp_31_1_cast_i_fu_80_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(aux_array_V_load_1_reg_175),33));

        tmp_31_2_cast_i_fu_83_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(aux_array_V_load_2_reg_181),33));

        tmp_31_3_cast_i_fu_86_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(aux_array_V_load_3_reg_187),33));

        tmp_31_4_cast_i_fu_89_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(aux_array_V_load_4_reg_193),33));

        tmp_31_5_cast_i_fu_92_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(aux_array_V_load_5_reg_199),33));

        tmp_31_6_cast_i_fu_95_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(aux_array_V_load_6_reg_163),33));

        tmp_31_cast_i_fu_77_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(aux_array_V_load_reg_169),33));

        tmp_cast_i_fu_98_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_V_read_reg_157),33));

    tmp_fu_113_p2 <= std_logic_vector(unsigned(tmp2_fu_107_p2) + unsigned(tmp1_fu_101_p2));
end behav;
