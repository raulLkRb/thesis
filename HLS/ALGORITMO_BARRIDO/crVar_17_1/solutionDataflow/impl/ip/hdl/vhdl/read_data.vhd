-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity read_data is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_AX_ALG_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_AX_ALG_TVALID : IN STD_LOGIC;
    input_AX_ALG_TREADY : OUT STD_LOGIC;
    input_AX_ALG_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALG_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALG_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALG_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_AX_ALG_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    input_AX_ALG_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of read_data is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal input_data_V_0_vld_out : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal input_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data_V_0_vld_in : STD_LOGIC;
    signal input_data_V_0_ack_in : STD_LOGIC;
    signal input_data_V_0_ack_out : STD_LOGIC;
    signal input_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data_V_0_sel_rd : STD_LOGIC := '0';
    signal input_data_V_0_sel_wr : STD_LOGIC := '0';
    signal input_data_V_0_sel : STD_LOGIC;
    signal input_data_V_0_load_A : STD_LOGIC;
    signal input_data_V_0_load_B : STD_LOGIC;
    signal input_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_data_V_0_state_cmp_full : STD_LOGIC;
    signal input_dest_V_0_vld_in : STD_LOGIC;
    signal input_dest_V_0_ack_out : STD_LOGIC;
    signal input_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALG_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                    ap_return_preg <= input_data_V_0_data_out;
                end if; 
            end if;
        end if;
    end process;


    input_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_data_V_0_ack_out) and (ap_const_logic_1 = input_data_V_0_vld_out))) then 
                                        input_data_V_0_sel_rd <= not(input_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_data_V_0_vld_in) and (ap_const_logic_1 = input_data_V_0_ack_in))) then 
                                        input_data_V_0_sel_wr <= not(input_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_data_V_0_vld_in) and (ap_const_logic_1 = input_data_V_0_ack_out) and (input_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = input_data_V_0_vld_in) and (input_data_V_0_state = ap_const_lv2_2)))) then 
                    input_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_data_V_0_vld_in) and (ap_const_logic_0 = input_data_V_0_ack_out) and (input_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = input_data_V_0_ack_out) and (input_data_V_0_state = ap_const_lv2_1)))) then 
                    input_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_data_V_0_vld_in) and (input_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = input_data_V_0_ack_out) and (input_data_V_0_state = ap_const_lv2_1)) or ((input_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = input_data_V_0_vld_in) and (ap_const_logic_0 = input_data_V_0_ack_out))) and not(((ap_const_logic_0 = input_data_V_0_vld_in) and (ap_const_logic_1 = input_data_V_0_ack_out)))))) then 
                    input_data_V_0_state <= ap_const_lv2_3;
                else 
                    input_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_dest_V_0_vld_in) and (ap_const_logic_1 = input_dest_V_0_ack_out) and (ap_const_lv2_3 = input_dest_V_0_state)) or ((ap_const_logic_0 = input_dest_V_0_vld_in) and (ap_const_lv2_2 = input_dest_V_0_state)))) then 
                    input_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_dest_V_0_vld_in) and (ap_const_logic_0 = input_dest_V_0_ack_out) and (ap_const_lv2_3 = input_dest_V_0_state)) or ((ap_const_logic_0 = input_dest_V_0_ack_out) and (ap_const_lv2_1 = input_dest_V_0_state)))) then 
                    input_dest_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_dest_V_0_vld_in) and (ap_const_lv2_2 = input_dest_V_0_state)) or ((ap_const_logic_1 = input_dest_V_0_ack_out) and (ap_const_lv2_1 = input_dest_V_0_state)) or ((ap_const_lv2_3 = input_dest_V_0_state) and not(((ap_const_logic_1 = input_dest_V_0_vld_in) and (ap_const_logic_0 = input_dest_V_0_ack_out))) and not(((ap_const_logic_0 = input_dest_V_0_vld_in) and (ap_const_logic_1 = input_dest_V_0_ack_out)))))) then 
                    input_dest_V_0_state <= ap_const_lv2_3;
                else 
                    input_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_data_V_0_load_A)) then
                input_data_V_0_payload_A <= input_AX_ALG_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_data_V_0_load_B)) then
                input_data_V_0_payload_B <= input_AX_ALG_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_flag00011011, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00011001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, input_data_V_0_vld_out)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_start) and ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) or ((ap_const_logic_0 = input_data_V_0_vld_out) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, input_data_V_0_vld_out)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_start) and ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) or ((ap_const_logic_0 = input_data_V_0_vld_out) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(input_data_V_0_vld_out)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (ap_const_logic_0 = input_data_V_0_vld_out);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_const_logic_0 = ap_enable_reg_pp0_iter0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_start) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_idle_pp0_0to0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001, input_data_V_0_data_out, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            ap_return <= input_data_V_0_data_out;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    input_AX_ALG_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, input_data_V_0_state, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            input_AX_ALG_TDATA_blk_n <= input_data_V_0_state(0);
        else 
            input_AX_ALG_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_AX_ALG_TREADY <= input_dest_V_0_state(1);
    input_data_V_0_ack_in <= input_data_V_0_state(1);

    input_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            input_data_V_0_ack_out <= ap_const_logic_1;
        else 
            input_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_data_V_0_data_out_assign_proc : process(input_data_V_0_payload_A, input_data_V_0_payload_B, input_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_data_V_0_sel)) then 
            input_data_V_0_data_out <= input_data_V_0_payload_B;
        else 
            input_data_V_0_data_out <= input_data_V_0_payload_A;
        end if; 
    end process;

    input_data_V_0_load_A <= (input_data_V_0_state_cmp_full and not(input_data_V_0_sel_wr));
    input_data_V_0_load_B <= (input_data_V_0_sel_wr and input_data_V_0_state_cmp_full);
    input_data_V_0_sel <= input_data_V_0_sel_rd;
    input_data_V_0_state_cmp_full <= '0' when (input_data_V_0_state = ap_const_lv2_1) else '1';
    input_data_V_0_vld_in <= input_AX_ALG_TVALID;
    input_data_V_0_vld_out <= input_data_V_0_state(0);

    input_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            input_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            input_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    input_dest_V_0_vld_in <= input_AX_ALG_TVALID;
end behav;
