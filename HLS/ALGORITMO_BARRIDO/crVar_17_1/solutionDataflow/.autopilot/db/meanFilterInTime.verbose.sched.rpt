

================================================================
== Vivado HLS Report for 'meanFilterInTime'
================================================================
* Date:           Thu Jun 15 12:11:15 2023

* Version:        2017.1 (Build 1846317 on Fri Apr 14 19:19:38 MDT 2017)
* Project:        crVar_17_1
* Solution:       solutionDataflow
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      7.84|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+----------+
    |  Latency  |  Interval | Pipeline |
    | min | max | min | max |   Type   |
    +-----+-----+-----+-----+----------+
    |   13|   13|   14|   14| function |
    +-----+-----+-----+-----+----------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 14, depth = 14


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 14
* Pipeline: 1
  Pipeline-0: II = 14, D = 14, States = { 1 2 3 4 5 6 7 8 9 10 11 12 13 14 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
* FSM state operations: 

 <State 1>: 3.25ns
ST_1: StgValue_15 (3)  [1/1] 0.00ns
entry:0  call void (...)* @_ssdm_op_SpecMemCore([8 x i32]* @aux_array_V, [1 x i8]* @p_str, [12 x i8]* @p_str9, [1 x i8]* @p_str, i32 -1, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str)

ST_1: reset_read (4)  [1/1] 0.00ns
entry:1  %reset_read = call i1 @_ssdm_op_Read.ap_auto.i1(i1 %reset)

ST_1: x_V_read (5)  [1/1] 0.00ns
entry:2  %x_V_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %x_V)

ST_1: StgValue_18 (6)  [1/1] 0.00ns  loc: axi_algorithm.cpp:163
entry:3  call void (...)* @_ssdm_op_SpecMemCore([8 x i32]* @aux_array_V, [1 x i8]* @p_str, [12 x i8]* @p_str9, [1 x i8]* @p_str, i32 -1, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str)

ST_1: StgValue_19 (7)  [1/1] 0.00ns  loc: axi_algorithm.cpp:166
entry:4  br i1 %reset_read, label %.preheader.i, label %meanFilterInTime.exit

ST_1: StgValue_20 (9)  [1/1] 3.25ns  loc: axi_algorithm.cpp:172
.preheader.i:0  store i32 0, i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 1), align 4

ST_1: aux_array_V_load_6 (35)  [2/2] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:18  %aux_array_V_load_6 = load i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 7), align 4


 <State 2>: 3.25ns
ST_2: StgValue_22 (10)  [1/1] 3.25ns  loc: axi_algorithm.cpp:172
.preheader.i:1  store i32 0, i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 2), align 8

ST_2: aux_array_V_load (17)  [2/2] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:0  %aux_array_V_load = load i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 1), align 4

ST_2: aux_array_V_load_6 (35)  [1/2] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:18  %aux_array_V_load_6 = load i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 7), align 4


 <State 3>: 3.25ns
ST_3: StgValue_25 (11)  [1/1] 3.25ns  loc: axi_algorithm.cpp:172
.preheader.i:2  store i32 0, i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 3), align 4

ST_3: aux_array_V_load (17)  [1/2] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:0  %aux_array_V_load = load i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 1), align 4

ST_3: aux_array_V_load_1 (20)  [2/2] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:3  %aux_array_V_load_1 = load i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 2), align 8


 <State 4>: 3.25ns
ST_4: StgValue_28 (12)  [1/1] 3.25ns  loc: axi_algorithm.cpp:172
.preheader.i:3  store i32 0, i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 4), align 16

ST_4: aux_array_V_load_1 (20)  [1/2] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:3  %aux_array_V_load_1 = load i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 2), align 8

ST_4: aux_array_V_load_2 (23)  [2/2] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:6  %aux_array_V_load_2 = load i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 3), align 4


 <State 5>: 3.25ns
ST_5: StgValue_31 (13)  [1/1] 3.25ns  loc: axi_algorithm.cpp:172
.preheader.i:4  store i32 0, i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 5), align 4

ST_5: aux_array_V_load_2 (23)  [1/2] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:6  %aux_array_V_load_2 = load i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 3), align 4

ST_5: aux_array_V_load_3 (26)  [2/2] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:9  %aux_array_V_load_3 = load i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 4), align 16


 <State 6>: 3.25ns
ST_6: StgValue_34 (14)  [1/1] 3.25ns  loc: axi_algorithm.cpp:172
.preheader.i:5  store i32 0, i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 6), align 8

ST_6: aux_array_V_load_3 (26)  [1/2] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:9  %aux_array_V_load_3 = load i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 4), align 16

ST_6: aux_array_V_load_4 (29)  [2/2] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:12  %aux_array_V_load_4 = load i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 5), align 4


 <State 7>: 3.25ns
ST_7: aux_array_V_load_4 (29)  [1/2] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:12  %aux_array_V_load_4 = load i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 5), align 4

ST_7: aux_array_V_load_5 (32)  [2/2] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:15  %aux_array_V_load_5 = load i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 6), align 8

ST_7: StgValue_39 (38)  [1/1] 3.25ns  loc: axi_algorithm.cpp:183
meanFilterInTime.exit:21  store i32 %x_V_read, i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 7), align 4


 <State 8>: 3.25ns
ST_8: StgValue_40 (18)  [1/1] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:1  store i32 %aux_array_V_load, i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 0), align 16

ST_8: aux_array_V_load_5 (32)  [1/2] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:15  %aux_array_V_load_5 = load i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 6), align 8


 <State 9>: 7.84ns
ST_9: tmp_31_cast_i (19)  [1/1] 0.00ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:2  %tmp_31_cast_i = sext i32 %aux_array_V_load to i33

ST_9: StgValue_43 (21)  [1/1] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:4  store i32 %aux_array_V_load_1, i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 1), align 4

ST_9: tmp_31_1_cast_i (22)  [1/1] 0.00ns  loc: axi_algorithm.cpp:181
meanFilterInTime.exit:5  %tmp_31_1_cast_i = sext i32 %aux_array_V_load_1 to i33

ST_9: tmp_31_2_cast_i (25)  [1/1] 0.00ns  loc: axi_algorithm.cpp:181
meanFilterInTime.exit:8  %tmp_31_2_cast_i = sext i32 %aux_array_V_load_2 to i33

ST_9: tmp_31_3_cast_i (28)  [1/1] 0.00ns  loc: axi_algorithm.cpp:181
meanFilterInTime.exit:11  %tmp_31_3_cast_i = sext i32 %aux_array_V_load_3 to i33

ST_9: tmp_31_4_cast_i (31)  [1/1] 0.00ns  loc: axi_algorithm.cpp:181
meanFilterInTime.exit:14  %tmp_31_4_cast_i = sext i32 %aux_array_V_load_4 to i33

ST_9: tmp_31_5_cast_i (34)  [1/1] 0.00ns  loc: axi_algorithm.cpp:181
meanFilterInTime.exit:17  %tmp_31_5_cast_i = sext i32 %aux_array_V_load_5 to i33

ST_9: tmp_31_6_cast_i (37)  [1/1] 0.00ns  loc: axi_algorithm.cpp:181
meanFilterInTime.exit:20  %tmp_31_6_cast_i = sext i32 %aux_array_V_load_6 to i33

ST_9: tmp_cast_i (39)  [1/1] 0.00ns  loc: axi_algorithm.cpp:184
meanFilterInTime.exit:22  %tmp_cast_i = sext i32 %x_V_read to i33

ST_9: tmp1 (40)  [1/1] 3.44ns  loc: axi_algorithm.cpp:184
meanFilterInTime.exit:23  %tmp1 = add i33 %tmp_31_cast_i, %tmp_31_1_cast_i

ST_9: tmp2 (41)  [1/1] 3.44ns  loc: axi_algorithm.cpp:184
meanFilterInTime.exit:24  %tmp2 = add i33 %tmp_31_2_cast_i, %tmp_31_3_cast_i

ST_9: tmp (42)  [1/1] 2.20ns  loc: axi_algorithm.cpp:184
meanFilterInTime.exit:25  %tmp = add i33 %tmp2, %tmp1

ST_9: tmp4 (43)  [1/1] 2.20ns  loc: axi_algorithm.cpp:184
meanFilterInTime.exit:26  %tmp4 = add i33 %tmp_31_4_cast_i, %tmp_31_5_cast_i

ST_9: tmp5 (44)  [1/1] 3.44ns  loc: axi_algorithm.cpp:184
meanFilterInTime.exit:27  %tmp5 = add i33 %tmp_31_6_cast_i, %tmp_cast_i

ST_9: tmp3 (45)  [1/1] 2.20ns  loc: axi_algorithm.cpp:184
meanFilterInTime.exit:28  %tmp3 = add i33 %tmp5, %tmp4

ST_9: p_Val2_i (46)  [1/1] 2.20ns  loc: axi_algorithm.cpp:184
meanFilterInTime.exit:29  %p_Val2_i = add i33 %tmp3, %tmp

ST_9: y_0_V_write_assign (47)  [1/1] 0.00ns  loc: axi_algorithm.cpp:187
meanFilterInTime.exit:30  %y_0_V_write_assign = call i32 @_ssdm_op_PartSelect.i32.i33.i32.i32(i33 %p_Val2_i, i32 1, i32 32)


 <State 10>: 3.25ns
ST_10: StgValue_59 (24)  [1/1] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:7  store i32 %aux_array_V_load_2, i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 2), align 8


 <State 11>: 3.25ns
ST_11: StgValue_60 (27)  [1/1] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:10  store i32 %aux_array_V_load_3, i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 3), align 4


 <State 12>: 3.25ns
ST_12: StgValue_61 (30)  [1/1] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:13  store i32 %aux_array_V_load_4, i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 4), align 16


 <State 13>: 3.25ns
ST_13: StgValue_62 (33)  [1/1] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:16  store i32 %aux_array_V_load_5, i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 5), align 4


 <State 14>: 3.25ns
ST_14: StgValue_63 (15)  [1/1] 0.00ns
.preheader.i:6  br label %meanFilterInTime.exit

ST_14: StgValue_64 (36)  [1/1] 3.25ns  loc: axi_algorithm.cpp:180
meanFilterInTime.exit:19  store i32 %aux_array_V_load_6, i32* getelementptr inbounds ([8 x i32]* @aux_array_V, i32 0, i32 6), align 8

ST_14: StgValue_65 (48)  [1/1] 0.00ns  loc: axi_algorithm.cpp:187
meanFilterInTime.exit:31  ret i32 %y_0_V_write_assign



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 3.25ns
The critical path consists of the following:
	'store' operation (axi_algorithm.cpp:172) of constant 0 on array 'aux_array_V' [9]  (3.25 ns)

 <State 2>: 3.25ns
The critical path consists of the following:
	'store' operation (axi_algorithm.cpp:172) of constant 0 on array 'aux_array_V' [10]  (3.25 ns)

 <State 3>: 3.25ns
The critical path consists of the following:
	'store' operation (axi_algorithm.cpp:172) of constant 0 on array 'aux_array_V' [11]  (3.25 ns)

 <State 4>: 3.25ns
The critical path consists of the following:
	'store' operation (axi_algorithm.cpp:172) of constant 0 on array 'aux_array_V' [12]  (3.25 ns)

 <State 5>: 3.25ns
The critical path consists of the following:
	'store' operation (axi_algorithm.cpp:172) of constant 0 on array 'aux_array_V' [13]  (3.25 ns)

 <State 6>: 3.25ns
The critical path consists of the following:
	'store' operation (axi_algorithm.cpp:172) of constant 0 on array 'aux_array_V' [14]  (3.25 ns)

 <State 7>: 3.25ns
The critical path consists of the following:
	'load' operation ('aux_array_V_load_4', axi_algorithm.cpp:180) on array 'aux_array_V' [29]  (3.25 ns)

 <State 8>: 3.25ns
The critical path consists of the following:
	'store' operation (axi_algorithm.cpp:180) of variable 'aux_array_V_load', axi_algorithm.cpp:180 on array 'aux_array_V' [18]  (3.25 ns)

 <State 9>: 7.84ns
The critical path consists of the following:
	'add' operation ('tmp1', axi_algorithm.cpp:184) [40]  (3.44 ns)
	'add' operation ('tmp', axi_algorithm.cpp:184) [42]  (2.2 ns)
	'add' operation ('p_Val2_i', axi_algorithm.cpp:184) [46]  (2.2 ns)

 <State 10>: 3.25ns
The critical path consists of the following:
	'store' operation (axi_algorithm.cpp:180) of variable 'aux_array_V_load_2', axi_algorithm.cpp:180 on array 'aux_array_V' [24]  (3.25 ns)

 <State 11>: 3.25ns
The critical path consists of the following:
	'store' operation (axi_algorithm.cpp:180) of variable 'aux_array_V_load_3', axi_algorithm.cpp:180 on array 'aux_array_V' [27]  (3.25 ns)

 <State 12>: 3.25ns
The critical path consists of the following:
	'store' operation (axi_algorithm.cpp:180) of variable 'aux_array_V_load_4', axi_algorithm.cpp:180 on array 'aux_array_V' [30]  (3.25 ns)

 <State 13>: 3.25ns
The critical path consists of the following:
	'store' operation (axi_algorithm.cpp:180) of variable 'aux_array_V_load_5', axi_algorithm.cpp:180 on array 'aux_array_V' [33]  (3.25 ns)

 <State 14>: 3.25ns
The critical path consists of the following:
	'store' operation (axi_algorithm.cpp:180) of variable 'aux_array_V_load_6', axi_algorithm.cpp:180 on array 'aux_array_V' [36]  (3.25 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
