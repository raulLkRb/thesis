// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_data (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_0_V_read,
        output_AX_ALG_TDATA,
        output_AX_ALG_TVALID,
        output_AX_ALG_TREADY,
        output_AX_ALG_TKEEP,
        output_AX_ALG_TSTRB,
        output_AX_ALG_TUSER,
        output_AX_ALG_TLAST,
        output_AX_ALG_TID,
        output_AX_ALG_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] buf_0_V_read;
output  [31:0] output_AX_ALG_TDATA;
output   output_AX_ALG_TVALID;
input   output_AX_ALG_TREADY;
output  [3:0] output_AX_ALG_TKEEP;
output  [3:0] output_AX_ALG_TSTRB;
output  [3:0] output_AX_ALG_TUSER;
output  [0:0] output_AX_ALG_TLAST;
output  [4:0] output_AX_ALG_TID;
output  [4:0] output_AX_ALG_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_AX_ALG_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    output_AX_ALG_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] tmp_reg_155;
reg   [2:0] i_reg_100;
wire   [31:0] buf_0_V_read_cast_fu_111_p1;
reg   [31:0] buf_0_V_read_cast_reg_150;
wire   [0:0] tmp_fu_115_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_sig_ioackin_output_AX_ALG_TREADY;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_flag00011001;
wire   [2:0] i_1_fu_121_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] last_assign_fu_127_p2;
reg   [0:0] last_assign_reg_164;
wire   [1:0] tmp_1_fu_133_p1;
reg   [1:0] tmp_1_reg_169;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [31:0] p_Val2_s_fu_137_p6;
wire    ap_block_pp0_stage0_flag00001001;
reg    ap_reg_ioackin_output_AX_ALG_TREADY;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_163;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_output_AX_ALG_TREADY = 1'b0;
end

axi_algorithm_muxg8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
axi_algorithm_muxg8j_U2061(
    .din1(buf_0_V_read_cast_reg_150),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(tmp_1_reg_169),
    .dout(p_Val2_s_fu_137_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_output_AX_ALG_TREADY <= 1'b0;
    end else begin
        if ((ap_condition_163 == 1'b1)) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_output_AX_ALG_TREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == output_AX_ALG_TREADY))) begin
                ap_reg_ioackin_output_AX_ALG_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_fu_115_p2))) begin
        i_reg_100 <= i_1_fu_121_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_100 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        buf_0_V_read_cast_reg_150[0] <= buf_0_V_read_cast_fu_111_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_fu_115_p2))) begin
        last_assign_reg_164 <= last_assign_fu_127_p2;
        tmp_1_reg_169 <= tmp_1_fu_133_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp_reg_155 <= tmp_fu_115_p2;
    end
end

always @ (*) begin
    if ((tmp_fu_115_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_output_AX_ALG_TREADY)) begin
        ap_sig_ioackin_output_AX_ALG_TREADY = output_AX_ALG_TREADY;
    end else begin
        ap_sig_ioackin_output_AX_ALG_TREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (tmp_reg_155 == 1'd0))) begin
        output_AX_ALG_TDATA_blk_n = output_AX_ALG_TREADY;
    end else begin
        output_AX_ALG_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_reg_155 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_output_AX_ALG_TREADY))) begin
        output_AX_ALG_TVALID = 1'b1;
    end else begin
        output_AX_ALG_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_fu_115_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_fu_115_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3_io));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3_io));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((tmp_reg_155 == 1'd0) & (1'b0 == ap_sig_ioackin_output_AX_ALG_TREADY));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_163 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_reg_155 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buf_0_V_read_cast_fu_111_p1 = buf_0_V_read;

assign i_1_fu_121_p2 = (i_reg_100 + 3'd1);

assign last_assign_fu_127_p2 = ((i_reg_100 == 3'd3) ? 1'b1 : 1'b0);

assign output_AX_ALG_TDATA = p_Val2_s_fu_137_p6;

assign output_AX_ALG_TDEST = 5'd0;

assign output_AX_ALG_TID = 5'd0;

assign output_AX_ALG_TKEEP = 4'd15;

assign output_AX_ALG_TLAST = last_assign_reg_164;

assign output_AX_ALG_TSTRB = 4'd15;

assign output_AX_ALG_TUSER = 4'd0;

assign tmp_1_fu_133_p1 = i_reg_100[1:0];

assign tmp_fu_115_p2 = ((i_reg_100 == 3'd4) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    buf_0_V_read_cast_reg_150[31:1] <= 31'b0000000000000000000000000000000;
end

endmodule //write_data
