// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module read_data (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_AX_ALG_TDATA,
        input_AX_ALG_TVALID,
        input_AX_ALG_TREADY,
        input_AX_ALG_TKEEP,
        input_AX_ALG_TSTRB,
        input_AX_ALG_TUSER,
        input_AX_ALG_TLAST,
        input_AX_ALG_TID,
        input_AX_ALG_TDEST,
        ap_return,
        input_AX_ALG_TDATA_blk_n
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] input_AX_ALG_TDATA;
input   input_AX_ALG_TVALID;
output   input_AX_ALG_TREADY;
input  [3:0] input_AX_ALG_TKEEP;
input  [3:0] input_AX_ALG_TSTRB;
input  [3:0] input_AX_ALG_TUSER;
input  [0:0] input_AX_ALG_TLAST;
input  [4:0] input_AX_ALG_TID;
input  [4:0] input_AX_ALG_TDEST;
output  [31:0] ap_return;
output   input_AX_ALG_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_AX_ALG_TREADY;
reg input_AX_ALG_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == input_AX_ALG_TVALID))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == input_AX_ALG_TVALID)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        input_AX_ALG_TDATA_blk_n = input_AX_ALG_TVALID;
    end else begin
        input_AX_ALG_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == input_AX_ALG_TVALID)))) begin
        input_AX_ALG_TREADY = 1'b1;
    end else begin
        input_AX_ALG_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (1'b0 == input_AX_ALG_TVALID));
end

assign ap_return = input_AX_ALG_TDATA;

endmodule //read_data
