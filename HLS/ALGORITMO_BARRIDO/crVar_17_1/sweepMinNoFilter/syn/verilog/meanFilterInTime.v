// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module meanFilterInTime (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V,
        reset
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x_V;
input  [0:0] reset;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] aux_array_V_address0;
reg    aux_array_V_ce0;
wire   [31:0] aux_array_V_q0;
reg   [2:0] aux_array_V_address1;
reg    aux_array_V_ce1;
reg    aux_array_V_we1;
reg   [31:0] aux_array_V_d1;
reg   [2:0] i_1_reg_103;
wire   [0:0] reset_read_read_fu_46_p2;
wire   [2:0] i_7_fu_121_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_2_fu_132_p2;
reg   [0:0] tmp_2_reg_171;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state5_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_flag00011001;
wire   [2:0] i_8_fu_138_p2;
reg   [2:0] i_8_reg_175;
reg    ap_enable_reg_pp1_iter0;
wire    ap_CS_fsm_state3;
wire    ap_block_pp1_stage0_flag00011011;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_enable_reg_pp1_iter1;
reg   [2:0] i_reg_92;
wire   [0:0] tmp_s_fu_115_p2;
reg   [2:0] i_1_phi_fu_107_p4;
wire    ap_block_pp1_stage0_flag00000000;
wire   [31:0] i_cast2_fu_127_p1;
wire   [31:0] i_8_cast_fu_144_p1;
wire   [31:0] i_1_cast1_fu_149_p1;
wire    ap_CS_fsm_state6;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

meanFilterInTime_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
aux_array_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(aux_array_V_address0),
    .ce0(aux_array_V_ce0),
    .q0(aux_array_V_q0),
    .address1(aux_array_V_address1),
    .ce1(aux_array_V_ce1),
    .we1(aux_array_V_we1),
    .d1(aux_array_V_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state4))) begin
            ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state4 ^ 1'b1);
        end else if ((ap_block_pp1_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (tmp_2_reg_171 == 1'd0))) begin
        i_1_reg_103 <= i_8_reg_175;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_103 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (reset_read_read_fu_46_p2 == 1'd1))) begin
        i_reg_92 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_s_fu_115_p2))) begin
        i_reg_92 <= i_7_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        i_8_reg_175 <= i_8_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0))) begin
        tmp_2_reg_171 <= tmp_2_fu_132_p2;
    end
end

always @ (*) begin
    if ((tmp_2_fu_132_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        aux_array_V_address1 = 3'd7;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        aux_array_V_address1 = i_1_cast1_fu_149_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        aux_array_V_address1 = i_cast2_fu_127_p1;
    end else begin
        aux_array_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        aux_array_V_ce0 = 1'b1;
    end else begin
        aux_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1)) | (1'b1 == ap_CS_fsm_state6))) begin
        aux_array_V_ce1 = 1'b1;
    end else begin
        aux_array_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        aux_array_V_d1 = x_V;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        aux_array_V_d1 = aux_array_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        aux_array_V_d1 = 32'd0;
    end else begin
        aux_array_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_s_fu_115_p2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (tmp_2_reg_171 == 1'd0)) | (1'b1 == ap_CS_fsm_state6))) begin
        aux_array_V_we1 = 1'b1;
    end else begin
        aux_array_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (tmp_2_reg_171 == 1'd0) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        i_1_phi_fu_107_p4 = i_8_reg_175;
    end else begin
        i_1_phi_fu_107_p4 = i_1_reg_103;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (reset_read_read_fu_46_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (reset_read_read_fu_46_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_s_fu_115_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (tmp_2_fu_132_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (tmp_2_fu_132_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp1_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign aux_array_V_address0 = i_8_cast_fu_144_p1;

assign i_1_cast1_fu_149_p1 = i_1_reg_103;

assign i_7_fu_121_p2 = (i_reg_92 + 3'd1);

assign i_8_cast_fu_144_p1 = i_8_fu_138_p2;

assign i_8_fu_138_p2 = (i_1_phi_fu_107_p4 + 3'd1);

assign i_cast2_fu_127_p1 = i_reg_92;

assign reset_read_read_fu_46_p2 = reset;

assign tmp_2_fu_132_p2 = ((i_1_phi_fu_107_p4 == 3'd7) ? 1'b1 : 1'b0);

assign tmp_s_fu_115_p2 = ((i_reg_92 == 3'd7) ? 1'b1 : 1'b0);

endmodule //meanFilterInTime
