// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "write_data.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic write_data::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic write_data::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> write_data::ap_ST_fsm_state1 = "1";
const sc_lv<3> write_data::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> write_data::ap_ST_fsm_state4 = "100";
const bool write_data::ap_const_boolean_1 = true;
const sc_lv<32> write_data::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> write_data::ap_const_lv32_1 = "1";
const bool write_data::ap_const_boolean_0 = false;
const sc_lv<1> write_data::ap_const_lv1_0 = "0";
const sc_lv<1> write_data::ap_const_lv1_1 = "1";
const sc_lv<3> write_data::ap_const_lv3_0 = "000";
const sc_lv<4> write_data::ap_const_lv4_F = "1111";
const sc_lv<4> write_data::ap_const_lv4_0 = "0000";
const sc_lv<5> write_data::ap_const_lv5_0 = "00000";
const sc_lv<3> write_data::ap_const_lv3_4 = "100";
const sc_lv<3> write_data::ap_const_lv3_1 = "1";
const sc_lv<3> write_data::ap_const_lv3_3 = "11";
const sc_lv<32> write_data::ap_const_lv32_2 = "10";

write_data::write_data(sc_module_name name) : sc_module(name), mVcdFile(0) {
    axi_algorithm_muxg8j_U2061 = new axi_algorithm_muxg8j<1,1,32,32,32,32,2,32>("axi_algorithm_muxg8j_U2061");
    axi_algorithm_muxg8j_U2061->din1(buf_0_V_read_cast_reg_150);
    axi_algorithm_muxg8j_U2061->din2(ap_var_for_const0);
    axi_algorithm_muxg8j_U2061->din3(ap_var_for_const0);
    axi_algorithm_muxg8j_U2061->din4(ap_var_for_const0);
    axi_algorithm_muxg8j_U2061->din5(tmp_1_reg_169);
    axi_algorithm_muxg8j_U2061->dout(p_Val2_s_fu_137_p6);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00001001);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011011);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( tmp_reg_155 );
    sensitive << ( ap_sig_ioackin_output_AX_ALG_TREADY );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_163);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_155 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( tmp_fu_115_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_sig_ioackin_output_AX_ALG_TREADY);
    sensitive << ( output_AX_ALG_TREADY );
    sensitive << ( ap_reg_ioackin_output_AX_ALG_TREADY );

    SC_METHOD(thread_buf_0_V_read_cast_fu_111_p1);
    sensitive << ( buf_0_V_read );

    SC_METHOD(thread_i_1_fu_121_p2);
    sensitive << ( i_reg_100 );

    SC_METHOD(thread_last_assign_fu_127_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_reg_100 );
    sensitive << ( tmp_fu_115_p2 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_output_AX_ALG_TDATA);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_155 );
    sensitive << ( p_Val2_s_fu_137_p6 );
    sensitive << ( ap_block_pp0_stage0_flag00001001 );

    SC_METHOD(thread_output_AX_ALG_TDATA_blk_n);
    sensitive << ( output_AX_ALG_TREADY );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( tmp_reg_155 );

    SC_METHOD(thread_output_AX_ALG_TDEST);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_155 );
    sensitive << ( ap_block_pp0_stage0_flag00001001 );

    SC_METHOD(thread_output_AX_ALG_TID);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_155 );
    sensitive << ( ap_block_pp0_stage0_flag00001001 );

    SC_METHOD(thread_output_AX_ALG_TKEEP);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_155 );
    sensitive << ( ap_block_pp0_stage0_flag00001001 );

    SC_METHOD(thread_output_AX_ALG_TLAST);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_155 );
    sensitive << ( last_assign_reg_164 );
    sensitive << ( ap_block_pp0_stage0_flag00001001 );

    SC_METHOD(thread_output_AX_ALG_TSTRB);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_155 );
    sensitive << ( ap_block_pp0_stage0_flag00001001 );

    SC_METHOD(thread_output_AX_ALG_TUSER);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_155 );
    sensitive << ( ap_block_pp0_stage0_flag00001001 );

    SC_METHOD(thread_output_AX_ALG_TVALID);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_155 );
    sensitive << ( ap_block_pp0_stage0_flag00001001 );
    sensitive << ( ap_reg_ioackin_output_AX_ALG_TREADY );

    SC_METHOD(thread_tmp_1_fu_133_p1);
    sensitive << ( i_reg_100 );

    SC_METHOD(thread_tmp_fu_115_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_reg_100 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_115_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_flag00011011 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_reg_ioackin_output_AX_ALG_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "write_data_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, buf_0_V_read, "(port)buf_0_V_read");
    sc_trace(mVcdFile, output_AX_ALG_TDATA, "(port)output_AX_ALG_TDATA");
    sc_trace(mVcdFile, output_AX_ALG_TVALID, "(port)output_AX_ALG_TVALID");
    sc_trace(mVcdFile, output_AX_ALG_TREADY, "(port)output_AX_ALG_TREADY");
    sc_trace(mVcdFile, output_AX_ALG_TKEEP, "(port)output_AX_ALG_TKEEP");
    sc_trace(mVcdFile, output_AX_ALG_TSTRB, "(port)output_AX_ALG_TSTRB");
    sc_trace(mVcdFile, output_AX_ALG_TUSER, "(port)output_AX_ALG_TUSER");
    sc_trace(mVcdFile, output_AX_ALG_TLAST, "(port)output_AX_ALG_TLAST");
    sc_trace(mVcdFile, output_AX_ALG_TID, "(port)output_AX_ALG_TID");
    sc_trace(mVcdFile, output_AX_ALG_TDEST, "(port)output_AX_ALG_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, output_AX_ALG_TDATA_blk_n, "output_AX_ALG_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00000000, "ap_block_pp0_stage0_flag00000000");
    sc_trace(mVcdFile, tmp_reg_155, "tmp_reg_155");
    sc_trace(mVcdFile, i_reg_100, "i_reg_100");
    sc_trace(mVcdFile, buf_0_V_read_cast_fu_111_p1, "buf_0_V_read_cast_fu_111_p1");
    sc_trace(mVcdFile, buf_0_V_read_cast_reg_150, "buf_0_V_read_cast_reg_150");
    sc_trace(mVcdFile, tmp_fu_115_p2, "tmp_fu_115_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_sig_ioackin_output_AX_ALG_TREADY, "ap_sig_ioackin_output_AX_ALG_TREADY");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011001, "ap_block_pp0_stage0_flag00011001");
    sc_trace(mVcdFile, i_1_fu_121_p2, "i_1_fu_121_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, last_assign_fu_127_p2, "last_assign_fu_127_p2");
    sc_trace(mVcdFile, last_assign_reg_164, "last_assign_reg_164");
    sc_trace(mVcdFile, tmp_1_fu_133_p1, "tmp_1_fu_133_p1");
    sc_trace(mVcdFile, tmp_1_reg_169, "tmp_1_reg_169");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011011, "ap_block_pp0_stage0_flag00011011");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, p_Val2_s_fu_137_p6, "p_Val2_s_fu_137_p6");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00001001, "ap_block_pp0_stage0_flag00001001");
    sc_trace(mVcdFile, ap_reg_ioackin_output_AX_ALG_TREADY, "ap_reg_ioackin_output_AX_ALG_TREADY");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_163, "ap_condition_163");
#endif

    }
}

write_data::~write_data() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete axi_algorithm_muxg8j_U2061;
}

void write_data::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_0;
}

void write_data::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_output_AX_ALG_TREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_163.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_output_AX_ALG_TREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00001001.read(), ap_const_boolean_0) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_TREADY.read()))) {
                ap_reg_ioackin_output_AX_ALG_TREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_115_p2.read()))) {
        i_reg_100 = i_1_fu_121_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_100 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        buf_0_V_read_cast_reg_150 = buf_0_V_read_cast_fu_111_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_115_p2.read()))) {
        last_assign_reg_164 = last_assign_fu_127_p2.read();
        tmp_1_reg_169 = tmp_1_fu_133_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        tmp_reg_155 = tmp_fu_115_p2.read();
    }
}

void write_data::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void write_data::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void write_data::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void write_data::thread_ap_block_pp0_stage0_flag00000000() {
    ap_block_pp0_stage0_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_data::thread_ap_block_pp0_stage0_flag00001001() {
    ap_block_pp0_stage0_flag00001001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_data::thread_ap_block_pp0_stage0_flag00011001() {
    ap_block_pp0_stage0_flag00011001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()));
}

void write_data::thread_ap_block_pp0_stage0_flag00011011() {
    ap_block_pp0_stage0_flag00011011 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()));
}

void write_data::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_data::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(tmp_reg_155.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_output_AX_ALG_TREADY.read()));
}

void write_data::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_data::thread_ap_condition_163() {
    ap_condition_163 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(tmp_reg_155.read(), ap_const_lv1_0));
}

void write_data::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(tmp_fu_115_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void write_data::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void write_data::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void write_data::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void write_data::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void write_data::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void write_data::thread_ap_sig_ioackin_output_AX_ALG_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_output_AX_ALG_TREADY.read())) {
        ap_sig_ioackin_output_AX_ALG_TREADY = output_AX_ALG_TREADY.read();
    } else {
        ap_sig_ioackin_output_AX_ALG_TREADY = ap_const_logic_1;
    }
}

void write_data::thread_buf_0_V_read_cast_fu_111_p1() {
    buf_0_V_read_cast_fu_111_p1 = esl_zext<32,1>(buf_0_V_read.read());
}

void write_data::thread_i_1_fu_121_p2() {
    i_1_fu_121_p2 = (!i_reg_100.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_100.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void write_data::thread_last_assign_fu_127_p2() {
    last_assign_fu_127_p2 = (!i_reg_100.read().is_01() || !ap_const_lv3_3.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_100.read() == ap_const_lv3_3);
}

void write_data::thread_output_AX_ALG_TDATA() {
    output_AX_ALG_TDATA = p_Val2_s_fu_137_p6.read();
}

void write_data::thread_output_AX_ALG_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(tmp_reg_155.read(), ap_const_lv1_0))) {
        output_AX_ALG_TDATA_blk_n = output_AX_ALG_TREADY.read();
    } else {
        output_AX_ALG_TDATA_blk_n = ap_const_logic_1;
    }
}

void write_data::thread_output_AX_ALG_TDEST() {
    output_AX_ALG_TDEST = ap_const_lv5_0;
}

void write_data::thread_output_AX_ALG_TID() {
    output_AX_ALG_TID = ap_const_lv5_0;
}

void write_data::thread_output_AX_ALG_TKEEP() {
    output_AX_ALG_TKEEP = ap_const_lv4_F;
}

void write_data::thread_output_AX_ALG_TLAST() {
    output_AX_ALG_TLAST = last_assign_reg_164.read();
}

void write_data::thread_output_AX_ALG_TSTRB() {
    output_AX_ALG_TSTRB = ap_const_lv4_F;
}

void write_data::thread_output_AX_ALG_TUSER() {
    output_AX_ALG_TUSER = ap_const_lv4_0;
}

void write_data::thread_output_AX_ALG_TVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(tmp_reg_155.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00001001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_output_AX_ALG_TREADY.read()))) {
        output_AX_ALG_TVALID = ap_const_logic_1;
    } else {
        output_AX_ALG_TVALID = ap_const_logic_0;
    }
}

void write_data::thread_tmp_1_fu_133_p1() {
    tmp_1_fu_133_p1 = i_reg_100.read().range(2-1, 0);
}

void write_data::thread_tmp_fu_115_p2() {
    tmp_fu_115_p2 = (!i_reg_100.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_100.read() == ap_const_lv3_4);
}

void write_data::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_fu_115_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_fu_115_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

