// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _write_data_HH_
#define _write_data_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "axi_algorithm_muxg8j.h"

namespace ap_rtl {

struct write_data : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<1> > buf_0_V_read;
    sc_out< sc_lv<32> > output_AX_ALG_TDATA;
    sc_out< sc_logic > output_AX_ALG_TVALID;
    sc_in< sc_logic > output_AX_ALG_TREADY;
    sc_out< sc_lv<4> > output_AX_ALG_TKEEP;
    sc_out< sc_lv<4> > output_AX_ALG_TSTRB;
    sc_out< sc_lv<4> > output_AX_ALG_TUSER;
    sc_out< sc_lv<1> > output_AX_ALG_TLAST;
    sc_out< sc_lv<5> > output_AX_ALG_TID;
    sc_out< sc_lv<5> > output_AX_ALG_TDEST;
    sc_signal< sc_lv<32> > ap_var_for_const0;


    // Module declarations
    write_data(sc_module_name name);
    SC_HAS_PROCESS(write_data);

    ~write_data();

    sc_trace_file* mVcdFile;

    axi_algorithm_muxg8j<1,1,32,32,32,32,2,32>* axi_algorithm_muxg8j_U2061;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > output_AX_ALG_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_lv<1> > tmp_reg_155;
    sc_signal< sc_lv<3> > i_reg_100;
    sc_signal< sc_lv<32> > buf_0_V_read_cast_fu_111_p1;
    sc_signal< sc_lv<32> > buf_0_V_read_cast_reg_150;
    sc_signal< sc_lv<1> > tmp_fu_115_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< sc_logic > ap_sig_ioackin_output_AX_ALG_TREADY;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<3> > i_1_fu_121_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > last_assign_fu_127_p2;
    sc_signal< sc_lv<1> > last_assign_reg_164;
    sc_signal< sc_lv<2> > tmp_1_fu_133_p1;
    sc_signal< sc_lv<2> > tmp_1_reg_169;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<32> > p_Val2_s_fu_137_p6;
    sc_signal< bool > ap_block_pp0_stage0_flag00001001;
    sc_signal< sc_logic > ap_reg_ioackin_output_AX_ALG_TREADY;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_163;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00001001();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_163();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_sig_ioackin_output_AX_ALG_TREADY();
    void thread_buf_0_V_read_cast_fu_111_p1();
    void thread_i_1_fu_121_p2();
    void thread_last_assign_fu_127_p2();
    void thread_output_AX_ALG_TDATA();
    void thread_output_AX_ALG_TDATA_blk_n();
    void thread_output_AX_ALG_TDEST();
    void thread_output_AX_ALG_TID();
    void thread_output_AX_ALG_TKEEP();
    void thread_output_AX_ALG_TLAST();
    void thread_output_AX_ALG_TSTRB();
    void thread_output_AX_ALG_TUSER();
    void thread_output_AX_ALG_TVALID();
    void thread_tmp_1_fu_133_p1();
    void thread_tmp_fu_115_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
