// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "meanFilterInTime.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic meanFilterInTime::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic meanFilterInTime::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> meanFilterInTime::ap_ST_fsm_state1 = "1";
const sc_lv<5> meanFilterInTime::ap_ST_fsm_state2 = "10";
const sc_lv<5> meanFilterInTime::ap_ST_fsm_state3 = "100";
const sc_lv<5> meanFilterInTime::ap_ST_fsm_pp1_stage0 = "1000";
const sc_lv<5> meanFilterInTime::ap_ST_fsm_state6 = "10000";
const bool meanFilterInTime::ap_const_boolean_1 = true;
const sc_lv<32> meanFilterInTime::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> meanFilterInTime::ap_const_lv32_1 = "1";
const sc_lv<32> meanFilterInTime::ap_const_lv32_3 = "11";
const bool meanFilterInTime::ap_const_boolean_0 = false;
const sc_lv<1> meanFilterInTime::ap_const_lv1_0 = "0";
const sc_lv<32> meanFilterInTime::ap_const_lv32_2 = "10";
const sc_lv<1> meanFilterInTime::ap_const_lv1_1 = "1";
const sc_lv<3> meanFilterInTime::ap_const_lv3_0 = "000";
const sc_lv<32> meanFilterInTime::ap_const_lv32_4 = "100";
const sc_lv<3> meanFilterInTime::ap_const_lv3_7 = "111";
const sc_lv<3> meanFilterInTime::ap_const_lv3_1 = "1";

meanFilterInTime::meanFilterInTime(sc_module_name name) : sc_module(name), mVcdFile(0) {
    aux_array_V_U = new meanFilterInTime_bkb("aux_array_V_U");
    aux_array_V_U->clk(ap_clk);
    aux_array_V_U->reset(ap_rst);
    aux_array_V_U->address0(aux_array_V_address0);
    aux_array_V_U->ce0(aux_array_V_ce0);
    aux_array_V_U->q0(aux_array_V_q0);
    aux_array_V_U->address1(aux_array_V_address1);
    aux_array_V_U->ce1(aux_array_V_ce1);
    aux_array_V_U->we1(aux_array_V_we1);
    aux_array_V_U->d1(aux_array_V_d1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp1_stage0_flag00000000);

    SC_METHOD(thread_ap_block_pp1_stage0_flag00011001);

    SC_METHOD(thread_ap_block_pp1_stage0_flag00011011);

    SC_METHOD(thread_ap_block_state4_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state5_pp1_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state4);
    sensitive << ( tmp_2_fu_132_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_aux_array_V_address0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp1_stage0_flag00000000 );
    sensitive << ( i_8_cast_fu_144_p1 );

    SC_METHOD(thread_aux_array_V_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0_flag00000000 );
    sensitive << ( i_cast2_fu_127_p1 );
    sensitive << ( i_1_cast1_fu_149_p1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_aux_array_V_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_aux_array_V_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_aux_array_V_d1);
    sensitive << ( x_V );
    sensitive << ( aux_array_V_q0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0_flag00000000 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_aux_array_V_we1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_reg_171 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( tmp_s_fu_115_p2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_i_1_cast1_fu_149_p1);
    sensitive << ( i_1_reg_103 );

    SC_METHOD(thread_i_1_phi_fu_107_p4);
    sensitive << ( i_1_reg_103 );
    sensitive << ( tmp_2_reg_171 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( i_8_reg_175 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0_flag00000000 );

    SC_METHOD(thread_i_7_fu_121_p2);
    sensitive << ( i_reg_92 );

    SC_METHOD(thread_i_8_cast_fu_144_p1);
    sensitive << ( i_8_fu_138_p2 );

    SC_METHOD(thread_i_8_fu_138_p2);
    sensitive << ( i_1_phi_fu_107_p4 );

    SC_METHOD(thread_i_cast2_fu_127_p1);
    sensitive << ( i_reg_92 );

    SC_METHOD(thread_reset_read_read_fu_46_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reset );

    SC_METHOD(thread_tmp_2_fu_132_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( i_1_phi_fu_107_p4 );

    SC_METHOD(thread_tmp_s_fu_115_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_92 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reset_read_read_fu_46_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_fu_132_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp1_stage0_flag00011011 );
    sensitive << ( tmp_s_fu_115_p2 );

    ap_CS_fsm = "00001";
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "meanFilterInTime_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_V, "(port)x_V");
    sc_trace(mVcdFile, reset, "(port)reset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, aux_array_V_address0, "aux_array_V_address0");
    sc_trace(mVcdFile, aux_array_V_ce0, "aux_array_V_ce0");
    sc_trace(mVcdFile, aux_array_V_q0, "aux_array_V_q0");
    sc_trace(mVcdFile, aux_array_V_address1, "aux_array_V_address1");
    sc_trace(mVcdFile, aux_array_V_ce1, "aux_array_V_ce1");
    sc_trace(mVcdFile, aux_array_V_we1, "aux_array_V_we1");
    sc_trace(mVcdFile, aux_array_V_d1, "aux_array_V_d1");
    sc_trace(mVcdFile, i_1_reg_103, "i_1_reg_103");
    sc_trace(mVcdFile, reset_read_read_fu_46_p2, "reset_read_read_fu_46_p2");
    sc_trace(mVcdFile, i_7_fu_121_p2, "i_7_fu_121_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_2_fu_132_p2, "tmp_2_fu_132_p2");
    sc_trace(mVcdFile, tmp_2_reg_171, "tmp_2_reg_171");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_block_state4_pp1_stage0_iter0, "ap_block_state4_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp1_stage0_iter1, "ap_block_state5_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_flag00011001, "ap_block_pp1_stage0_flag00011001");
    sc_trace(mVcdFile, i_8_fu_138_p2, "i_8_fu_138_p2");
    sc_trace(mVcdFile, i_8_reg_175, "i_8_reg_175");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_block_pp1_stage0_flag00011011, "ap_block_pp1_stage0_flag00011011");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state4, "ap_condition_pp1_exit_iter0_state4");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, i_reg_92, "i_reg_92");
    sc_trace(mVcdFile, tmp_s_fu_115_p2, "tmp_s_fu_115_p2");
    sc_trace(mVcdFile, i_1_phi_fu_107_p4, "i_1_phi_fu_107_p4");
    sc_trace(mVcdFile, ap_block_pp1_stage0_flag00000000, "ap_block_pp1_stage0_flag00000000");
    sc_trace(mVcdFile, i_cast2_fu_127_p1, "i_cast2_fu_127_p1");
    sc_trace(mVcdFile, i_8_cast_fu_144_p1, "i_8_cast_fu_144_p1");
    sc_trace(mVcdFile, i_1_cast1_fu_149_p1, "i_1_cast1_fu_149_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
#endif

    }
}

meanFilterInTime::~meanFilterInTime() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete aux_array_V_U;
}

void meanFilterInTime::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_flag00011011.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state4.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_flag00011011.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state4.read()))) {
            ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state4.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp1_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_enable_reg_pp1_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(tmp_2_reg_171.read(), ap_const_lv1_0))) {
        i_1_reg_103 = i_8_reg_175.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_1_reg_103 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(reset_read_read_fu_46_p2.read(), ap_const_lv1_1))) {
        i_reg_92 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_115_p2.read()))) {
        i_reg_92 = i_7_fu_121_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        i_8_reg_175 = i_8_fu_138_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_flag00011001.read(), ap_const_boolean_0))) {
        tmp_2_reg_171 = tmp_2_fu_132_p2.read();
    }
}

void meanFilterInTime::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[3];
}

void meanFilterInTime::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void meanFilterInTime::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void meanFilterInTime::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void meanFilterInTime::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[4];
}

void meanFilterInTime::thread_ap_block_pp1_stage0_flag00000000() {
    ap_block_pp1_stage0_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void meanFilterInTime::thread_ap_block_pp1_stage0_flag00011001() {
    ap_block_pp1_stage0_flag00011001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void meanFilterInTime::thread_ap_block_pp1_stage0_flag00011011() {
    ap_block_pp1_stage0_flag00011011 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void meanFilterInTime::thread_ap_block_state4_pp1_stage0_iter0() {
    ap_block_state4_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void meanFilterInTime::thread_ap_block_state5_pp1_stage0_iter1() {
    ap_block_state5_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void meanFilterInTime::thread_ap_condition_pp1_exit_iter0_state4() {
    if (esl_seteq<1,1,1>(tmp_2_fu_132_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp1_exit_iter0_state4 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state4 = ap_const_logic_0;
    }
}

void meanFilterInTime::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void meanFilterInTime::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void meanFilterInTime::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void meanFilterInTime::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void meanFilterInTime::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void meanFilterInTime::thread_aux_array_V_address0() {
    aux_array_V_address0 =  (sc_lv<3>) (i_8_cast_fu_144_p1.read());
}

void meanFilterInTime::thread_aux_array_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        aux_array_V_address1 = ap_const_lv3_7;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_flag00000000.read(), ap_const_boolean_0))) {
        aux_array_V_address1 =  (sc_lv<3>) (i_1_cast1_fu_149_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        aux_array_V_address1 =  (sc_lv<3>) (i_cast2_fu_127_p1.read());
    } else {
        aux_array_V_address1 = "XXX";
    }
}

void meanFilterInTime::thread_aux_array_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        aux_array_V_ce0 = ap_const_logic_1;
    } else {
        aux_array_V_ce0 = ap_const_logic_0;
    }
}

void meanFilterInTime::thread_aux_array_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        aux_array_V_ce1 = ap_const_logic_1;
    } else {
        aux_array_V_ce1 = ap_const_logic_0;
    }
}

void meanFilterInTime::thread_aux_array_V_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        aux_array_V_d1 = x_V.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_flag00000000.read(), ap_const_boolean_0))) {
        aux_array_V_d1 = aux_array_V_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        aux_array_V_d1 = ap_const_lv32_0;
    } else {
        aux_array_V_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void meanFilterInTime::thread_aux_array_V_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_115_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(tmp_2_reg_171.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        aux_array_V_we1 = ap_const_logic_1;
    } else {
        aux_array_V_we1 = ap_const_logic_0;
    }
}

void meanFilterInTime::thread_i_1_cast1_fu_149_p1() {
    i_1_cast1_fu_149_p1 = esl_zext<32,3>(i_1_reg_103.read());
}

void meanFilterInTime::thread_i_1_phi_fu_107_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(tmp_2_reg_171.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_flag00000000.read(), ap_const_boolean_0))) {
        i_1_phi_fu_107_p4 = i_8_reg_175.read();
    } else {
        i_1_phi_fu_107_p4 = i_1_reg_103.read();
    }
}

void meanFilterInTime::thread_i_7_fu_121_p2() {
    i_7_fu_121_p2 = (!i_reg_92.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_92.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void meanFilterInTime::thread_i_8_cast_fu_144_p1() {
    i_8_cast_fu_144_p1 = esl_zext<32,3>(i_8_fu_138_p2.read());
}

void meanFilterInTime::thread_i_8_fu_138_p2() {
    i_8_fu_138_p2 = (!i_1_phi_fu_107_p4.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_1_phi_fu_107_p4.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void meanFilterInTime::thread_i_cast2_fu_127_p1() {
    i_cast2_fu_127_p1 = esl_zext<32,3>(i_reg_92.read());
}

void meanFilterInTime::thread_reset_read_read_fu_46_p2() {
    reset_read_read_fu_46_p2 = reset.read();
}

void meanFilterInTime::thread_tmp_2_fu_132_p2() {
    tmp_2_fu_132_p2 = (!i_1_phi_fu_107_p4.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<1>(): sc_lv<1>(i_1_phi_fu_107_p4.read() == ap_const_lv3_7);
}

void meanFilterInTime::thread_tmp_s_fu_115_p2() {
    tmp_s_fu_115_p2 = (!i_reg_92.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_92.read() == ap_const_lv3_7);
}

void meanFilterInTime::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(reset_read_read_fu_46_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(reset_read_read_fu_46_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_115_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 8 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_2_fu_132_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_2_fu_132_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

