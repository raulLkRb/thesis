// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _meanFilterInTime_HH_
#define _meanFilterInTime_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "meanFilterInTime_bkb.h"

namespace ap_rtl {

struct meanFilterInTime : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > x_V;
    sc_in< sc_lv<1> > reset;


    // Module declarations
    meanFilterInTime(sc_module_name name);
    SC_HAS_PROCESS(meanFilterInTime);

    ~meanFilterInTime();

    sc_trace_file* mVcdFile;

    meanFilterInTime_bkb* aux_array_V_U;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > aux_array_V_address0;
    sc_signal< sc_logic > aux_array_V_ce0;
    sc_signal< sc_lv<32> > aux_array_V_q0;
    sc_signal< sc_lv<3> > aux_array_V_address1;
    sc_signal< sc_logic > aux_array_V_ce1;
    sc_signal< sc_logic > aux_array_V_we1;
    sc_signal< sc_lv<32> > aux_array_V_d1;
    sc_signal< sc_lv<3> > i_1_reg_103;
    sc_signal< sc_lv<1> > reset_read_read_fu_46_p2;
    sc_signal< sc_lv<3> > i_7_fu_121_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_2_fu_132_p2;
    sc_signal< sc_lv<1> > tmp_2_reg_171;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state4_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_flag00011001;
    sc_signal< sc_lv<3> > i_8_fu_138_p2;
    sc_signal< sc_lv<3> > i_8_reg_175;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< bool > ap_block_pp1_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state4;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_lv<3> > i_reg_92;
    sc_signal< sc_lv<1> > tmp_s_fu_115_p2;
    sc_signal< sc_lv<3> > i_1_phi_fu_107_p4;
    sc_signal< bool > ap_block_pp1_stage0_flag00000000;
    sc_signal< sc_lv<32> > i_cast2_fu_127_p1;
    sc_signal< sc_lv<32> > i_8_cast_fu_144_p1;
    sc_signal< sc_lv<32> > i_1_cast1_fu_149_p1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_pp1_stage0;
    static const sc_lv<5> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<3> ap_const_lv3_7;
    static const sc_lv<3> ap_const_lv3_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp1_stage0_flag00000000();
    void thread_ap_block_pp1_stage0_flag00011001();
    void thread_ap_block_pp1_stage0_flag00011011();
    void thread_ap_block_state4_pp1_stage0_iter0();
    void thread_ap_block_state5_pp1_stage0_iter1();
    void thread_ap_condition_pp1_exit_iter0_state4();
    void thread_ap_done();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp1();
    void thread_ap_ready();
    void thread_aux_array_V_address0();
    void thread_aux_array_V_address1();
    void thread_aux_array_V_ce0();
    void thread_aux_array_V_ce1();
    void thread_aux_array_V_d1();
    void thread_aux_array_V_we1();
    void thread_i_1_cast1_fu_149_p1();
    void thread_i_1_phi_fu_107_p4();
    void thread_i_7_fu_121_p2();
    void thread_i_8_cast_fu_144_p1();
    void thread_i_8_fu_138_p2();
    void thread_i_cast2_fu_127_p1();
    void thread_reset_read_read_fu_46_p2();
    void thread_tmp_2_fu_132_p2();
    void thread_tmp_s_fu_115_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
