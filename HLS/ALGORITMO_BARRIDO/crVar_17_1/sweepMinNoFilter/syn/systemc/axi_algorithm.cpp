// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "axi_algorithm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic axi_algorithm::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic axi_algorithm::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> axi_algorithm::ap_ST_fsm_state1 = "1";
const sc_lv<5> axi_algorithm::ap_ST_fsm_state2 = "10";
const sc_lv<5> axi_algorithm::ap_ST_fsm_state3 = "100";
const sc_lv<5> axi_algorithm::ap_ST_fsm_state4 = "1000";
const sc_lv<5> axi_algorithm::ap_ST_fsm_state5 = "10000";
const sc_lv<1> axi_algorithm::ap_const_lv1_0 = "0";
const sc_lv<1> axi_algorithm::ap_const_lv1_1 = "1";
const sc_lv<2> axi_algorithm::ap_const_lv2_0 = "00";
const sc_lv<2> axi_algorithm::ap_const_lv2_2 = "10";
const sc_lv<2> axi_algorithm::ap_const_lv2_3 = "11";
const sc_lv<2> axi_algorithm::ap_const_lv2_1 = "1";
const sc_lv<32> axi_algorithm::ap_const_lv32_1 = "1";
const sc_lv<32> axi_algorithm::ap_const_lv32_2 = "10";
const sc_lv<32> axi_algorithm::ap_const_lv32_3 = "11";
const sc_lv<32> axi_algorithm::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> axi_algorithm::ap_const_lv32_4 = "100";
const bool axi_algorithm::ap_const_boolean_1 = true;

axi_algorithm::axi_algorithm(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_sweep_algorithm_DECM_fu_76 = new sweep_algorithm_DECM("grp_sweep_algorithm_DECM_fu_76");
    grp_sweep_algorithm_DECM_fu_76->ap_clk(ap_clk);
    grp_sweep_algorithm_DECM_fu_76->ap_rst(ap_rst_n_inv);
    grp_sweep_algorithm_DECM_fu_76->ap_start(grp_sweep_algorithm_DECM_fu_76_ap_start);
    grp_sweep_algorithm_DECM_fu_76->ap_done(grp_sweep_algorithm_DECM_fu_76_ap_done);
    grp_sweep_algorithm_DECM_fu_76->ap_idle(grp_sweep_algorithm_DECM_fu_76_ap_idle);
    grp_sweep_algorithm_DECM_fu_76->ap_ready(grp_sweep_algorithm_DECM_fu_76_ap_ready);
    grp_sweep_algorithm_DECM_fu_76->inputVal_V(p_Val2_1_reg_138);
    grp_write_data_fu_89 = new write_data("grp_write_data_fu_89");
    grp_write_data_fu_89->ap_clk(ap_clk);
    grp_write_data_fu_89->ap_rst(ap_rst_n_inv);
    grp_write_data_fu_89->ap_start(grp_write_data_fu_89_ap_start);
    grp_write_data_fu_89->ap_done(grp_write_data_fu_89_ap_done);
    grp_write_data_fu_89->ap_idle(grp_write_data_fu_89_ap_idle);
    grp_write_data_fu_89->ap_ready(grp_write_data_fu_89_ap_ready);
    grp_write_data_fu_89->buf_0_V_read(ap_var_for_const0);
    grp_write_data_fu_89->output_AX_ALG_TDATA(grp_write_data_fu_89_output_AX_ALG_TDATA);
    grp_write_data_fu_89->output_AX_ALG_TVALID(grp_write_data_fu_89_output_AX_ALG_TVALID);
    grp_write_data_fu_89->output_AX_ALG_TREADY(grp_write_data_fu_89_output_AX_ALG_TREADY);
    grp_write_data_fu_89->output_AX_ALG_TKEEP(grp_write_data_fu_89_output_AX_ALG_TKEEP);
    grp_write_data_fu_89->output_AX_ALG_TSTRB(grp_write_data_fu_89_output_AX_ALG_TSTRB);
    grp_write_data_fu_89->output_AX_ALG_TUSER(grp_write_data_fu_89_output_AX_ALG_TUSER);
    grp_write_data_fu_89->output_AX_ALG_TLAST(grp_write_data_fu_89_output_AX_ALG_TLAST);
    grp_write_data_fu_89->output_AX_ALG_TID(grp_write_data_fu_89_output_AX_ALG_TID);
    grp_write_data_fu_89->output_AX_ALG_TDEST(grp_write_data_fu_89_output_AX_ALG_TDEST);
    buf_Tj_in_0_V_read_data_fu_109 = new read_data("buf_Tj_in_0_V_read_data_fu_109");
    buf_Tj_in_0_V_read_data_fu_109->ap_clk(ap_clk);
    buf_Tj_in_0_V_read_data_fu_109->ap_rst(ap_rst_n_inv);
    buf_Tj_in_0_V_read_data_fu_109->ap_start(buf_Tj_in_0_V_read_data_fu_109_ap_start);
    buf_Tj_in_0_V_read_data_fu_109->ap_done(buf_Tj_in_0_V_read_data_fu_109_ap_done);
    buf_Tj_in_0_V_read_data_fu_109->ap_idle(buf_Tj_in_0_V_read_data_fu_109_ap_idle);
    buf_Tj_in_0_V_read_data_fu_109->ap_ready(buf_Tj_in_0_V_read_data_fu_109_ap_ready);
    buf_Tj_in_0_V_read_data_fu_109->input_AX_ALG_TDATA(input_AX_ALG_data_V_0_data_out);
    buf_Tj_in_0_V_read_data_fu_109->input_AX_ALG_TVALID(buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TVALID);
    buf_Tj_in_0_V_read_data_fu_109->input_AX_ALG_TREADY(buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY);
    buf_Tj_in_0_V_read_data_fu_109->input_AX_ALG_TKEEP(input_AX_ALG_keep_V_0_data_out);
    buf_Tj_in_0_V_read_data_fu_109->input_AX_ALG_TSTRB(input_AX_ALG_strb_V_0_data_out);
    buf_Tj_in_0_V_read_data_fu_109->input_AX_ALG_TUSER(input_AX_ALG_user_V_0_data_out);
    buf_Tj_in_0_V_read_data_fu_109->input_AX_ALG_TLAST(input_AX_ALG_last_V_0_data_out);
    buf_Tj_in_0_V_read_data_fu_109->input_AX_ALG_TID(input_AX_ALG_id_V_0_data_out);
    buf_Tj_in_0_V_read_data_fu_109->input_AX_ALG_TDEST(input_AX_ALG_dest_V_0_data_out);
    buf_Tj_in_0_V_read_data_fu_109->ap_return(buf_Tj_in_0_V_read_data_fu_109_ap_return);
    buf_Tj_in_0_V_read_data_fu_109->input_AX_ALG_TDATA_blk_n(buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TDATA_blk_n);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( output_AX_ALG_data_V_1_ack_in );
    sensitive << ( output_AX_ALG_keep_V_1_ack_in );
    sensitive << ( output_AX_ALG_strb_V_1_ack_in );
    sensitive << ( output_AX_ALG_user_V_1_ack_in );
    sensitive << ( output_AX_ALG_last_V_1_ack_in );
    sensitive << ( output_AX_ALG_id_V_1_ack_in );
    sensitive << ( output_AX_ALG_dest_V_1_ack_in );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_buf_Tj_in_0_V_read_data_fu_109_ap_start);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TVALID);
    sensitive << ( input_AX_ALG_dest_V_0_state );

    SC_METHOD(thread_grp_sweep_algorithm_DECM_fu_76_ap_start);
    sensitive << ( ap_reg_grp_sweep_algorithm_DECM_fu_76_ap_start );

    SC_METHOD(thread_grp_write_data_fu_89_ap_start);
    sensitive << ( ap_reg_grp_write_data_fu_89_ap_start );

    SC_METHOD(thread_grp_write_data_fu_89_output_AX_ALG_TREADY);
    sensitive << ( output_AX_ALG_dest_V_1_state );

    SC_METHOD(thread_input_AX_ALG_TDATA_blk_n);
    sensitive << ( buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TDATA_blk_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_input_AX_ALG_TREADY);
    sensitive << ( input_AX_ALG_dest_V_0_state );

    SC_METHOD(thread_input_AX_ALG_data_V_0_ack_in);
    sensitive << ( input_AX_ALG_data_V_0_state );

    SC_METHOD(thread_input_AX_ALG_data_V_0_ack_out);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY );

    SC_METHOD(thread_input_AX_ALG_data_V_0_data_out);
    sensitive << ( input_AX_ALG_data_V_0_payload_A );
    sensitive << ( input_AX_ALG_data_V_0_payload_B );
    sensitive << ( input_AX_ALG_data_V_0_sel );

    SC_METHOD(thread_input_AX_ALG_data_V_0_load_A);
    sensitive << ( input_AX_ALG_data_V_0_sel_wr );
    sensitive << ( input_AX_ALG_data_V_0_state_cmp_full );

    SC_METHOD(thread_input_AX_ALG_data_V_0_load_B);
    sensitive << ( input_AX_ALG_data_V_0_sel_wr );
    sensitive << ( input_AX_ALG_data_V_0_state_cmp_full );

    SC_METHOD(thread_input_AX_ALG_data_V_0_sel);
    sensitive << ( input_AX_ALG_data_V_0_sel_rd );

    SC_METHOD(thread_input_AX_ALG_data_V_0_state_cmp_full);
    sensitive << ( input_AX_ALG_data_V_0_state );

    SC_METHOD(thread_input_AX_ALG_data_V_0_vld_in);
    sensitive << ( input_AX_ALG_TVALID );

    SC_METHOD(thread_input_AX_ALG_data_V_0_vld_out);
    sensitive << ( input_AX_ALG_data_V_0_state );

    SC_METHOD(thread_input_AX_ALG_dest_V_0_ack_in);
    sensitive << ( input_AX_ALG_dest_V_0_state );

    SC_METHOD(thread_input_AX_ALG_dest_V_0_ack_out);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY );

    SC_METHOD(thread_input_AX_ALG_dest_V_0_data_out);
    sensitive << ( input_AX_ALG_dest_V_0_payload_A );
    sensitive << ( input_AX_ALG_dest_V_0_payload_B );
    sensitive << ( input_AX_ALG_dest_V_0_sel );

    SC_METHOD(thread_input_AX_ALG_dest_V_0_load_A);
    sensitive << ( input_AX_ALG_dest_V_0_sel_wr );
    sensitive << ( input_AX_ALG_dest_V_0_state_cmp_full );

    SC_METHOD(thread_input_AX_ALG_dest_V_0_load_B);
    sensitive << ( input_AX_ALG_dest_V_0_sel_wr );
    sensitive << ( input_AX_ALG_dest_V_0_state_cmp_full );

    SC_METHOD(thread_input_AX_ALG_dest_V_0_sel);
    sensitive << ( input_AX_ALG_dest_V_0_sel_rd );

    SC_METHOD(thread_input_AX_ALG_dest_V_0_state_cmp_full);
    sensitive << ( input_AX_ALG_dest_V_0_state );

    SC_METHOD(thread_input_AX_ALG_dest_V_0_vld_in);
    sensitive << ( input_AX_ALG_TVALID );

    SC_METHOD(thread_input_AX_ALG_dest_V_0_vld_out);
    sensitive << ( input_AX_ALG_dest_V_0_state );

    SC_METHOD(thread_input_AX_ALG_id_V_0_ack_in);
    sensitive << ( input_AX_ALG_id_V_0_state );

    SC_METHOD(thread_input_AX_ALG_id_V_0_ack_out);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY );

    SC_METHOD(thread_input_AX_ALG_id_V_0_data_out);
    sensitive << ( input_AX_ALG_id_V_0_payload_A );
    sensitive << ( input_AX_ALG_id_V_0_payload_B );
    sensitive << ( input_AX_ALG_id_V_0_sel );

    SC_METHOD(thread_input_AX_ALG_id_V_0_load_A);
    sensitive << ( input_AX_ALG_id_V_0_sel_wr );
    sensitive << ( input_AX_ALG_id_V_0_state_cmp_full );

    SC_METHOD(thread_input_AX_ALG_id_V_0_load_B);
    sensitive << ( input_AX_ALG_id_V_0_sel_wr );
    sensitive << ( input_AX_ALG_id_V_0_state_cmp_full );

    SC_METHOD(thread_input_AX_ALG_id_V_0_sel);
    sensitive << ( input_AX_ALG_id_V_0_sel_rd );

    SC_METHOD(thread_input_AX_ALG_id_V_0_state_cmp_full);
    sensitive << ( input_AX_ALG_id_V_0_state );

    SC_METHOD(thread_input_AX_ALG_id_V_0_vld_in);
    sensitive << ( input_AX_ALG_TVALID );

    SC_METHOD(thread_input_AX_ALG_id_V_0_vld_out);
    sensitive << ( input_AX_ALG_id_V_0_state );

    SC_METHOD(thread_input_AX_ALG_keep_V_0_ack_in);
    sensitive << ( input_AX_ALG_keep_V_0_state );

    SC_METHOD(thread_input_AX_ALG_keep_V_0_ack_out);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY );

    SC_METHOD(thread_input_AX_ALG_keep_V_0_data_out);
    sensitive << ( input_AX_ALG_keep_V_0_payload_A );
    sensitive << ( input_AX_ALG_keep_V_0_payload_B );
    sensitive << ( input_AX_ALG_keep_V_0_sel );

    SC_METHOD(thread_input_AX_ALG_keep_V_0_load_A);
    sensitive << ( input_AX_ALG_keep_V_0_sel_wr );
    sensitive << ( input_AX_ALG_keep_V_0_state_cmp_full );

    SC_METHOD(thread_input_AX_ALG_keep_V_0_load_B);
    sensitive << ( input_AX_ALG_keep_V_0_sel_wr );
    sensitive << ( input_AX_ALG_keep_V_0_state_cmp_full );

    SC_METHOD(thread_input_AX_ALG_keep_V_0_sel);
    sensitive << ( input_AX_ALG_keep_V_0_sel_rd );

    SC_METHOD(thread_input_AX_ALG_keep_V_0_state_cmp_full);
    sensitive << ( input_AX_ALG_keep_V_0_state );

    SC_METHOD(thread_input_AX_ALG_keep_V_0_vld_in);
    sensitive << ( input_AX_ALG_TVALID );

    SC_METHOD(thread_input_AX_ALG_keep_V_0_vld_out);
    sensitive << ( input_AX_ALG_keep_V_0_state );

    SC_METHOD(thread_input_AX_ALG_last_V_0_ack_in);
    sensitive << ( input_AX_ALG_last_V_0_state );

    SC_METHOD(thread_input_AX_ALG_last_V_0_ack_out);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY );

    SC_METHOD(thread_input_AX_ALG_last_V_0_data_out);
    sensitive << ( input_AX_ALG_last_V_0_payload_A );
    sensitive << ( input_AX_ALG_last_V_0_payload_B );
    sensitive << ( input_AX_ALG_last_V_0_sel );

    SC_METHOD(thread_input_AX_ALG_last_V_0_load_A);
    sensitive << ( input_AX_ALG_last_V_0_sel_wr );
    sensitive << ( input_AX_ALG_last_V_0_state_cmp_full );

    SC_METHOD(thread_input_AX_ALG_last_V_0_load_B);
    sensitive << ( input_AX_ALG_last_V_0_sel_wr );
    sensitive << ( input_AX_ALG_last_V_0_state_cmp_full );

    SC_METHOD(thread_input_AX_ALG_last_V_0_sel);
    sensitive << ( input_AX_ALG_last_V_0_sel_rd );

    SC_METHOD(thread_input_AX_ALG_last_V_0_state_cmp_full);
    sensitive << ( input_AX_ALG_last_V_0_state );

    SC_METHOD(thread_input_AX_ALG_last_V_0_vld_in);
    sensitive << ( input_AX_ALG_TVALID );

    SC_METHOD(thread_input_AX_ALG_last_V_0_vld_out);
    sensitive << ( input_AX_ALG_last_V_0_state );

    SC_METHOD(thread_input_AX_ALG_strb_V_0_ack_in);
    sensitive << ( input_AX_ALG_strb_V_0_state );

    SC_METHOD(thread_input_AX_ALG_strb_V_0_ack_out);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY );

    SC_METHOD(thread_input_AX_ALG_strb_V_0_data_out);
    sensitive << ( input_AX_ALG_strb_V_0_payload_A );
    sensitive << ( input_AX_ALG_strb_V_0_payload_B );
    sensitive << ( input_AX_ALG_strb_V_0_sel );

    SC_METHOD(thread_input_AX_ALG_strb_V_0_load_A);
    sensitive << ( input_AX_ALG_strb_V_0_sel_wr );
    sensitive << ( input_AX_ALG_strb_V_0_state_cmp_full );

    SC_METHOD(thread_input_AX_ALG_strb_V_0_load_B);
    sensitive << ( input_AX_ALG_strb_V_0_sel_wr );
    sensitive << ( input_AX_ALG_strb_V_0_state_cmp_full );

    SC_METHOD(thread_input_AX_ALG_strb_V_0_sel);
    sensitive << ( input_AX_ALG_strb_V_0_sel_rd );

    SC_METHOD(thread_input_AX_ALG_strb_V_0_state_cmp_full);
    sensitive << ( input_AX_ALG_strb_V_0_state );

    SC_METHOD(thread_input_AX_ALG_strb_V_0_vld_in);
    sensitive << ( input_AX_ALG_TVALID );

    SC_METHOD(thread_input_AX_ALG_strb_V_0_vld_out);
    sensitive << ( input_AX_ALG_strb_V_0_state );

    SC_METHOD(thread_input_AX_ALG_user_V_0_ack_in);
    sensitive << ( input_AX_ALG_user_V_0_state );

    SC_METHOD(thread_input_AX_ALG_user_V_0_ack_out);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY );

    SC_METHOD(thread_input_AX_ALG_user_V_0_data_out);
    sensitive << ( input_AX_ALG_user_V_0_payload_A );
    sensitive << ( input_AX_ALG_user_V_0_payload_B );
    sensitive << ( input_AX_ALG_user_V_0_sel );

    SC_METHOD(thread_input_AX_ALG_user_V_0_load_A);
    sensitive << ( input_AX_ALG_user_V_0_sel_wr );
    sensitive << ( input_AX_ALG_user_V_0_state_cmp_full );

    SC_METHOD(thread_input_AX_ALG_user_V_0_load_B);
    sensitive << ( input_AX_ALG_user_V_0_sel_wr );
    sensitive << ( input_AX_ALG_user_V_0_state_cmp_full );

    SC_METHOD(thread_input_AX_ALG_user_V_0_sel);
    sensitive << ( input_AX_ALG_user_V_0_sel_rd );

    SC_METHOD(thread_input_AX_ALG_user_V_0_state_cmp_full);
    sensitive << ( input_AX_ALG_user_V_0_state );

    SC_METHOD(thread_input_AX_ALG_user_V_0_vld_in);
    sensitive << ( input_AX_ALG_TVALID );

    SC_METHOD(thread_input_AX_ALG_user_V_0_vld_out);
    sensitive << ( input_AX_ALG_user_V_0_state );

    SC_METHOD(thread_output_AX_ALG_TDATA);
    sensitive << ( output_AX_ALG_data_V_1_data_out );

    SC_METHOD(thread_output_AX_ALG_TDEST);
    sensitive << ( output_AX_ALG_dest_V_1_data_out );

    SC_METHOD(thread_output_AX_ALG_TID);
    sensitive << ( output_AX_ALG_id_V_1_data_out );

    SC_METHOD(thread_output_AX_ALG_TKEEP);
    sensitive << ( output_AX_ALG_keep_V_1_data_out );

    SC_METHOD(thread_output_AX_ALG_TLAST);
    sensitive << ( output_AX_ALG_last_V_1_data_out );

    SC_METHOD(thread_output_AX_ALG_TSTRB);
    sensitive << ( output_AX_ALG_strb_V_1_data_out );

    SC_METHOD(thread_output_AX_ALG_TUSER);
    sensitive << ( output_AX_ALG_user_V_1_data_out );

    SC_METHOD(thread_output_AX_ALG_TVALID);
    sensitive << ( output_AX_ALG_dest_V_1_state );

    SC_METHOD(thread_output_AX_ALG_data_V_1_ack_in);
    sensitive << ( output_AX_ALG_data_V_1_state );

    SC_METHOD(thread_output_AX_ALG_data_V_1_ack_out);
    sensitive << ( output_AX_ALG_TREADY );

    SC_METHOD(thread_output_AX_ALG_data_V_1_data_out);
    sensitive << ( output_AX_ALG_data_V_1_payload_A );
    sensitive << ( output_AX_ALG_data_V_1_payload_B );
    sensitive << ( output_AX_ALG_data_V_1_sel );

    SC_METHOD(thread_output_AX_ALG_data_V_1_load_A);
    sensitive << ( output_AX_ALG_data_V_1_sel_wr );
    sensitive << ( output_AX_ALG_data_V_1_state_cmp_full );

    SC_METHOD(thread_output_AX_ALG_data_V_1_load_B);
    sensitive << ( output_AX_ALG_data_V_1_sel_wr );
    sensitive << ( output_AX_ALG_data_V_1_state_cmp_full );

    SC_METHOD(thread_output_AX_ALG_data_V_1_sel);
    sensitive << ( output_AX_ALG_data_V_1_sel_rd );

    SC_METHOD(thread_output_AX_ALG_data_V_1_state_cmp_full);
    sensitive << ( output_AX_ALG_data_V_1_state );

    SC_METHOD(thread_output_AX_ALG_data_V_1_vld_in);
    sensitive << ( grp_write_data_fu_89_output_AX_ALG_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_AX_ALG_data_V_1_vld_out);
    sensitive << ( output_AX_ALG_data_V_1_state );

    SC_METHOD(thread_output_AX_ALG_dest_V_1_ack_in);
    sensitive << ( output_AX_ALG_dest_V_1_state );

    SC_METHOD(thread_output_AX_ALG_dest_V_1_ack_out);
    sensitive << ( output_AX_ALG_TREADY );

    SC_METHOD(thread_output_AX_ALG_dest_V_1_data_out);
    sensitive << ( output_AX_ALG_dest_V_1_payload_A );
    sensitive << ( output_AX_ALG_dest_V_1_payload_B );
    sensitive << ( output_AX_ALG_dest_V_1_sel );

    SC_METHOD(thread_output_AX_ALG_dest_V_1_load_A);
    sensitive << ( output_AX_ALG_dest_V_1_sel_wr );
    sensitive << ( output_AX_ALG_dest_V_1_state_cmp_full );

    SC_METHOD(thread_output_AX_ALG_dest_V_1_load_B);
    sensitive << ( output_AX_ALG_dest_V_1_sel_wr );
    sensitive << ( output_AX_ALG_dest_V_1_state_cmp_full );

    SC_METHOD(thread_output_AX_ALG_dest_V_1_sel);
    sensitive << ( output_AX_ALG_dest_V_1_sel_rd );

    SC_METHOD(thread_output_AX_ALG_dest_V_1_state_cmp_full);
    sensitive << ( output_AX_ALG_dest_V_1_state );

    SC_METHOD(thread_output_AX_ALG_dest_V_1_vld_in);
    sensitive << ( grp_write_data_fu_89_output_AX_ALG_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_AX_ALG_dest_V_1_vld_out);
    sensitive << ( output_AX_ALG_dest_V_1_state );

    SC_METHOD(thread_output_AX_ALG_id_V_1_ack_in);
    sensitive << ( output_AX_ALG_id_V_1_state );

    SC_METHOD(thread_output_AX_ALG_id_V_1_ack_out);
    sensitive << ( output_AX_ALG_TREADY );

    SC_METHOD(thread_output_AX_ALG_id_V_1_data_out);
    sensitive << ( output_AX_ALG_id_V_1_payload_A );
    sensitive << ( output_AX_ALG_id_V_1_payload_B );
    sensitive << ( output_AX_ALG_id_V_1_sel );

    SC_METHOD(thread_output_AX_ALG_id_V_1_load_A);
    sensitive << ( output_AX_ALG_id_V_1_sel_wr );
    sensitive << ( output_AX_ALG_id_V_1_state_cmp_full );

    SC_METHOD(thread_output_AX_ALG_id_V_1_load_B);
    sensitive << ( output_AX_ALG_id_V_1_sel_wr );
    sensitive << ( output_AX_ALG_id_V_1_state_cmp_full );

    SC_METHOD(thread_output_AX_ALG_id_V_1_sel);
    sensitive << ( output_AX_ALG_id_V_1_sel_rd );

    SC_METHOD(thread_output_AX_ALG_id_V_1_state_cmp_full);
    sensitive << ( output_AX_ALG_id_V_1_state );

    SC_METHOD(thread_output_AX_ALG_id_V_1_vld_in);
    sensitive << ( grp_write_data_fu_89_output_AX_ALG_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_AX_ALG_id_V_1_vld_out);
    sensitive << ( output_AX_ALG_id_V_1_state );

    SC_METHOD(thread_output_AX_ALG_keep_V_1_ack_in);
    sensitive << ( output_AX_ALG_keep_V_1_state );

    SC_METHOD(thread_output_AX_ALG_keep_V_1_ack_out);
    sensitive << ( output_AX_ALG_TREADY );

    SC_METHOD(thread_output_AX_ALG_keep_V_1_data_out);
    sensitive << ( output_AX_ALG_keep_V_1_payload_A );
    sensitive << ( output_AX_ALG_keep_V_1_payload_B );
    sensitive << ( output_AX_ALG_keep_V_1_sel );

    SC_METHOD(thread_output_AX_ALG_keep_V_1_load_A);
    sensitive << ( output_AX_ALG_keep_V_1_sel_wr );
    sensitive << ( output_AX_ALG_keep_V_1_state_cmp_full );

    SC_METHOD(thread_output_AX_ALG_keep_V_1_load_B);
    sensitive << ( output_AX_ALG_keep_V_1_sel_wr );
    sensitive << ( output_AX_ALG_keep_V_1_state_cmp_full );

    SC_METHOD(thread_output_AX_ALG_keep_V_1_sel);
    sensitive << ( output_AX_ALG_keep_V_1_sel_rd );

    SC_METHOD(thread_output_AX_ALG_keep_V_1_state_cmp_full);
    sensitive << ( output_AX_ALG_keep_V_1_state );

    SC_METHOD(thread_output_AX_ALG_keep_V_1_vld_in);
    sensitive << ( grp_write_data_fu_89_output_AX_ALG_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_AX_ALG_keep_V_1_vld_out);
    sensitive << ( output_AX_ALG_keep_V_1_state );

    SC_METHOD(thread_output_AX_ALG_last_V_1_ack_in);
    sensitive << ( output_AX_ALG_last_V_1_state );

    SC_METHOD(thread_output_AX_ALG_last_V_1_ack_out);
    sensitive << ( output_AX_ALG_TREADY );

    SC_METHOD(thread_output_AX_ALG_last_V_1_data_out);
    sensitive << ( output_AX_ALG_last_V_1_payload_A );
    sensitive << ( output_AX_ALG_last_V_1_payload_B );
    sensitive << ( output_AX_ALG_last_V_1_sel );

    SC_METHOD(thread_output_AX_ALG_last_V_1_load_A);
    sensitive << ( output_AX_ALG_last_V_1_sel_wr );
    sensitive << ( output_AX_ALG_last_V_1_state_cmp_full );

    SC_METHOD(thread_output_AX_ALG_last_V_1_load_B);
    sensitive << ( output_AX_ALG_last_V_1_sel_wr );
    sensitive << ( output_AX_ALG_last_V_1_state_cmp_full );

    SC_METHOD(thread_output_AX_ALG_last_V_1_sel);
    sensitive << ( output_AX_ALG_last_V_1_sel_rd );

    SC_METHOD(thread_output_AX_ALG_last_V_1_state_cmp_full);
    sensitive << ( output_AX_ALG_last_V_1_state );

    SC_METHOD(thread_output_AX_ALG_last_V_1_vld_in);
    sensitive << ( grp_write_data_fu_89_output_AX_ALG_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_AX_ALG_last_V_1_vld_out);
    sensitive << ( output_AX_ALG_last_V_1_state );

    SC_METHOD(thread_output_AX_ALG_strb_V_1_ack_in);
    sensitive << ( output_AX_ALG_strb_V_1_state );

    SC_METHOD(thread_output_AX_ALG_strb_V_1_ack_out);
    sensitive << ( output_AX_ALG_TREADY );

    SC_METHOD(thread_output_AX_ALG_strb_V_1_data_out);
    sensitive << ( output_AX_ALG_strb_V_1_payload_A );
    sensitive << ( output_AX_ALG_strb_V_1_payload_B );
    sensitive << ( output_AX_ALG_strb_V_1_sel );

    SC_METHOD(thread_output_AX_ALG_strb_V_1_load_A);
    sensitive << ( output_AX_ALG_strb_V_1_sel_wr );
    sensitive << ( output_AX_ALG_strb_V_1_state_cmp_full );

    SC_METHOD(thread_output_AX_ALG_strb_V_1_load_B);
    sensitive << ( output_AX_ALG_strb_V_1_sel_wr );
    sensitive << ( output_AX_ALG_strb_V_1_state_cmp_full );

    SC_METHOD(thread_output_AX_ALG_strb_V_1_sel);
    sensitive << ( output_AX_ALG_strb_V_1_sel_rd );

    SC_METHOD(thread_output_AX_ALG_strb_V_1_state_cmp_full);
    sensitive << ( output_AX_ALG_strb_V_1_state );

    SC_METHOD(thread_output_AX_ALG_strb_V_1_vld_in);
    sensitive << ( grp_write_data_fu_89_output_AX_ALG_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_AX_ALG_strb_V_1_vld_out);
    sensitive << ( output_AX_ALG_strb_V_1_state );

    SC_METHOD(thread_output_AX_ALG_user_V_1_ack_in);
    sensitive << ( output_AX_ALG_user_V_1_state );

    SC_METHOD(thread_output_AX_ALG_user_V_1_ack_out);
    sensitive << ( output_AX_ALG_TREADY );

    SC_METHOD(thread_output_AX_ALG_user_V_1_data_out);
    sensitive << ( output_AX_ALG_user_V_1_payload_A );
    sensitive << ( output_AX_ALG_user_V_1_payload_B );
    sensitive << ( output_AX_ALG_user_V_1_sel );

    SC_METHOD(thread_output_AX_ALG_user_V_1_load_A);
    sensitive << ( output_AX_ALG_user_V_1_sel_wr );
    sensitive << ( output_AX_ALG_user_V_1_state_cmp_full );

    SC_METHOD(thread_output_AX_ALG_user_V_1_load_B);
    sensitive << ( output_AX_ALG_user_V_1_sel_wr );
    sensitive << ( output_AX_ALG_user_V_1_state_cmp_full );

    SC_METHOD(thread_output_AX_ALG_user_V_1_sel);
    sensitive << ( output_AX_ALG_user_V_1_sel_rd );

    SC_METHOD(thread_output_AX_ALG_user_V_1_state_cmp_full);
    sensitive << ( output_AX_ALG_user_V_1_state );

    SC_METHOD(thread_output_AX_ALG_user_V_1_vld_in);
    sensitive << ( grp_write_data_fu_89_output_AX_ALG_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_AX_ALG_user_V_1_vld_out);
    sensitive << ( output_AX_ALG_user_V_1_state );

    SC_METHOD(thread_p_Val2_1_fu_127_p1);
    sensitive << ( buf_Tj_in_0_V_read_data_fu_109_ap_return );

    SC_METHOD(thread_tmp_s_fu_132_p2);
    sensitive << ( full_fifo );
    sensitive << ( grp_sweep_algorithm_DECM_fu_76_ap_done );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( output_AX_ALG_data_V_1_ack_in );
    sensitive << ( output_AX_ALG_keep_V_1_ack_in );
    sensitive << ( output_AX_ALG_strb_V_1_ack_in );
    sensitive << ( output_AX_ALG_user_V_1_ack_in );
    sensitive << ( output_AX_ALG_last_V_1_ack_in );
    sensitive << ( output_AX_ALG_id_V_1_ack_in );
    sensitive << ( output_AX_ALG_dest_V_1_ack_in );
    sensitive << ( buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TDATA_blk_n );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_sweep_algorithm_DECM_fu_76_ap_done );
    sensitive << ( grp_write_data_fu_89_ap_done );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_fu_132_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    input_AX_ALG_data_V_0_sel_rd = SC_LOGIC_0;
    input_AX_ALG_data_V_0_sel_wr = SC_LOGIC_0;
    input_AX_ALG_data_V_0_state = "00";
    input_AX_ALG_keep_V_0_sel_rd = SC_LOGIC_0;
    input_AX_ALG_keep_V_0_sel_wr = SC_LOGIC_0;
    input_AX_ALG_keep_V_0_state = "00";
    input_AX_ALG_strb_V_0_sel_rd = SC_LOGIC_0;
    input_AX_ALG_strb_V_0_sel_wr = SC_LOGIC_0;
    input_AX_ALG_strb_V_0_state = "00";
    input_AX_ALG_user_V_0_sel_rd = SC_LOGIC_0;
    input_AX_ALG_user_V_0_sel_wr = SC_LOGIC_0;
    input_AX_ALG_user_V_0_state = "00";
    input_AX_ALG_last_V_0_sel_rd = SC_LOGIC_0;
    input_AX_ALG_last_V_0_sel_wr = SC_LOGIC_0;
    input_AX_ALG_last_V_0_state = "00";
    input_AX_ALG_id_V_0_sel_rd = SC_LOGIC_0;
    input_AX_ALG_id_V_0_sel_wr = SC_LOGIC_0;
    input_AX_ALG_id_V_0_state = "00";
    input_AX_ALG_dest_V_0_sel_rd = SC_LOGIC_0;
    input_AX_ALG_dest_V_0_sel_wr = SC_LOGIC_0;
    input_AX_ALG_dest_V_0_state = "00";
    output_AX_ALG_data_V_1_sel_rd = SC_LOGIC_0;
    output_AX_ALG_data_V_1_sel_wr = SC_LOGIC_0;
    output_AX_ALG_data_V_1_state = "00";
    output_AX_ALG_keep_V_1_sel_rd = SC_LOGIC_0;
    output_AX_ALG_keep_V_1_sel_wr = SC_LOGIC_0;
    output_AX_ALG_keep_V_1_state = "00";
    output_AX_ALG_strb_V_1_sel_rd = SC_LOGIC_0;
    output_AX_ALG_strb_V_1_sel_wr = SC_LOGIC_0;
    output_AX_ALG_strb_V_1_state = "00";
    output_AX_ALG_user_V_1_sel_rd = SC_LOGIC_0;
    output_AX_ALG_user_V_1_sel_wr = SC_LOGIC_0;
    output_AX_ALG_user_V_1_state = "00";
    output_AX_ALG_last_V_1_sel_rd = SC_LOGIC_0;
    output_AX_ALG_last_V_1_sel_wr = SC_LOGIC_0;
    output_AX_ALG_last_V_1_state = "00";
    output_AX_ALG_id_V_1_sel_rd = SC_LOGIC_0;
    output_AX_ALG_id_V_1_sel_wr = SC_LOGIC_0;
    output_AX_ALG_id_V_1_state = "00";
    output_AX_ALG_dest_V_1_sel_rd = SC_LOGIC_0;
    output_AX_ALG_dest_V_1_sel_wr = SC_LOGIC_0;
    output_AX_ALG_dest_V_1_state = "00";
    ap_CS_fsm = "00001";
    ap_reg_grp_sweep_algorithm_DECM_fu_76_ap_start = SC_LOGIC_0;
    ap_reg_grp_write_data_fu_89_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "axi_algorithm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, input_AX_ALG_TDATA, "(port)input_AX_ALG_TDATA");
    sc_trace(mVcdFile, input_AX_ALG_TVALID, "(port)input_AX_ALG_TVALID");
    sc_trace(mVcdFile, input_AX_ALG_TREADY, "(port)input_AX_ALG_TREADY");
    sc_trace(mVcdFile, input_AX_ALG_TKEEP, "(port)input_AX_ALG_TKEEP");
    sc_trace(mVcdFile, input_AX_ALG_TSTRB, "(port)input_AX_ALG_TSTRB");
    sc_trace(mVcdFile, input_AX_ALG_TUSER, "(port)input_AX_ALG_TUSER");
    sc_trace(mVcdFile, input_AX_ALG_TLAST, "(port)input_AX_ALG_TLAST");
    sc_trace(mVcdFile, input_AX_ALG_TID, "(port)input_AX_ALG_TID");
    sc_trace(mVcdFile, input_AX_ALG_TDEST, "(port)input_AX_ALG_TDEST");
    sc_trace(mVcdFile, output_AX_ALG_TDATA, "(port)output_AX_ALG_TDATA");
    sc_trace(mVcdFile, output_AX_ALG_TVALID, "(port)output_AX_ALG_TVALID");
    sc_trace(mVcdFile, output_AX_ALG_TREADY, "(port)output_AX_ALG_TREADY");
    sc_trace(mVcdFile, output_AX_ALG_TKEEP, "(port)output_AX_ALG_TKEEP");
    sc_trace(mVcdFile, output_AX_ALG_TSTRB, "(port)output_AX_ALG_TSTRB");
    sc_trace(mVcdFile, output_AX_ALG_TUSER, "(port)output_AX_ALG_TUSER");
    sc_trace(mVcdFile, output_AX_ALG_TLAST, "(port)output_AX_ALG_TLAST");
    sc_trace(mVcdFile, output_AX_ALG_TID, "(port)output_AX_ALG_TID");
    sc_trace(mVcdFile, output_AX_ALG_TDEST, "(port)output_AX_ALG_TDEST");
    sc_trace(mVcdFile, full_fifo, "(port)full_fifo");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, input_AX_ALG_data_V_0_data_out, "input_AX_ALG_data_V_0_data_out");
    sc_trace(mVcdFile, input_AX_ALG_data_V_0_vld_in, "input_AX_ALG_data_V_0_vld_in");
    sc_trace(mVcdFile, input_AX_ALG_data_V_0_vld_out, "input_AX_ALG_data_V_0_vld_out");
    sc_trace(mVcdFile, input_AX_ALG_data_V_0_ack_in, "input_AX_ALG_data_V_0_ack_in");
    sc_trace(mVcdFile, input_AX_ALG_data_V_0_ack_out, "input_AX_ALG_data_V_0_ack_out");
    sc_trace(mVcdFile, input_AX_ALG_data_V_0_payload_A, "input_AX_ALG_data_V_0_payload_A");
    sc_trace(mVcdFile, input_AX_ALG_data_V_0_payload_B, "input_AX_ALG_data_V_0_payload_B");
    sc_trace(mVcdFile, input_AX_ALG_data_V_0_sel_rd, "input_AX_ALG_data_V_0_sel_rd");
    sc_trace(mVcdFile, input_AX_ALG_data_V_0_sel_wr, "input_AX_ALG_data_V_0_sel_wr");
    sc_trace(mVcdFile, input_AX_ALG_data_V_0_sel, "input_AX_ALG_data_V_0_sel");
    sc_trace(mVcdFile, input_AX_ALG_data_V_0_load_A, "input_AX_ALG_data_V_0_load_A");
    sc_trace(mVcdFile, input_AX_ALG_data_V_0_load_B, "input_AX_ALG_data_V_0_load_B");
    sc_trace(mVcdFile, input_AX_ALG_data_V_0_state, "input_AX_ALG_data_V_0_state");
    sc_trace(mVcdFile, input_AX_ALG_data_V_0_state_cmp_full, "input_AX_ALG_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, input_AX_ALG_keep_V_0_data_out, "input_AX_ALG_keep_V_0_data_out");
    sc_trace(mVcdFile, input_AX_ALG_keep_V_0_vld_in, "input_AX_ALG_keep_V_0_vld_in");
    sc_trace(mVcdFile, input_AX_ALG_keep_V_0_vld_out, "input_AX_ALG_keep_V_0_vld_out");
    sc_trace(mVcdFile, input_AX_ALG_keep_V_0_ack_in, "input_AX_ALG_keep_V_0_ack_in");
    sc_trace(mVcdFile, input_AX_ALG_keep_V_0_ack_out, "input_AX_ALG_keep_V_0_ack_out");
    sc_trace(mVcdFile, input_AX_ALG_keep_V_0_payload_A, "input_AX_ALG_keep_V_0_payload_A");
    sc_trace(mVcdFile, input_AX_ALG_keep_V_0_payload_B, "input_AX_ALG_keep_V_0_payload_B");
    sc_trace(mVcdFile, input_AX_ALG_keep_V_0_sel_rd, "input_AX_ALG_keep_V_0_sel_rd");
    sc_trace(mVcdFile, input_AX_ALG_keep_V_0_sel_wr, "input_AX_ALG_keep_V_0_sel_wr");
    sc_trace(mVcdFile, input_AX_ALG_keep_V_0_sel, "input_AX_ALG_keep_V_0_sel");
    sc_trace(mVcdFile, input_AX_ALG_keep_V_0_load_A, "input_AX_ALG_keep_V_0_load_A");
    sc_trace(mVcdFile, input_AX_ALG_keep_V_0_load_B, "input_AX_ALG_keep_V_0_load_B");
    sc_trace(mVcdFile, input_AX_ALG_keep_V_0_state, "input_AX_ALG_keep_V_0_state");
    sc_trace(mVcdFile, input_AX_ALG_keep_V_0_state_cmp_full, "input_AX_ALG_keep_V_0_state_cmp_full");
    sc_trace(mVcdFile, input_AX_ALG_strb_V_0_data_out, "input_AX_ALG_strb_V_0_data_out");
    sc_trace(mVcdFile, input_AX_ALG_strb_V_0_vld_in, "input_AX_ALG_strb_V_0_vld_in");
    sc_trace(mVcdFile, input_AX_ALG_strb_V_0_vld_out, "input_AX_ALG_strb_V_0_vld_out");
    sc_trace(mVcdFile, input_AX_ALG_strb_V_0_ack_in, "input_AX_ALG_strb_V_0_ack_in");
    sc_trace(mVcdFile, input_AX_ALG_strb_V_0_ack_out, "input_AX_ALG_strb_V_0_ack_out");
    sc_trace(mVcdFile, input_AX_ALG_strb_V_0_payload_A, "input_AX_ALG_strb_V_0_payload_A");
    sc_trace(mVcdFile, input_AX_ALG_strb_V_0_payload_B, "input_AX_ALG_strb_V_0_payload_B");
    sc_trace(mVcdFile, input_AX_ALG_strb_V_0_sel_rd, "input_AX_ALG_strb_V_0_sel_rd");
    sc_trace(mVcdFile, input_AX_ALG_strb_V_0_sel_wr, "input_AX_ALG_strb_V_0_sel_wr");
    sc_trace(mVcdFile, input_AX_ALG_strb_V_0_sel, "input_AX_ALG_strb_V_0_sel");
    sc_trace(mVcdFile, input_AX_ALG_strb_V_0_load_A, "input_AX_ALG_strb_V_0_load_A");
    sc_trace(mVcdFile, input_AX_ALG_strb_V_0_load_B, "input_AX_ALG_strb_V_0_load_B");
    sc_trace(mVcdFile, input_AX_ALG_strb_V_0_state, "input_AX_ALG_strb_V_0_state");
    sc_trace(mVcdFile, input_AX_ALG_strb_V_0_state_cmp_full, "input_AX_ALG_strb_V_0_state_cmp_full");
    sc_trace(mVcdFile, input_AX_ALG_user_V_0_data_out, "input_AX_ALG_user_V_0_data_out");
    sc_trace(mVcdFile, input_AX_ALG_user_V_0_vld_in, "input_AX_ALG_user_V_0_vld_in");
    sc_trace(mVcdFile, input_AX_ALG_user_V_0_vld_out, "input_AX_ALG_user_V_0_vld_out");
    sc_trace(mVcdFile, input_AX_ALG_user_V_0_ack_in, "input_AX_ALG_user_V_0_ack_in");
    sc_trace(mVcdFile, input_AX_ALG_user_V_0_ack_out, "input_AX_ALG_user_V_0_ack_out");
    sc_trace(mVcdFile, input_AX_ALG_user_V_0_payload_A, "input_AX_ALG_user_V_0_payload_A");
    sc_trace(mVcdFile, input_AX_ALG_user_V_0_payload_B, "input_AX_ALG_user_V_0_payload_B");
    sc_trace(mVcdFile, input_AX_ALG_user_V_0_sel_rd, "input_AX_ALG_user_V_0_sel_rd");
    sc_trace(mVcdFile, input_AX_ALG_user_V_0_sel_wr, "input_AX_ALG_user_V_0_sel_wr");
    sc_trace(mVcdFile, input_AX_ALG_user_V_0_sel, "input_AX_ALG_user_V_0_sel");
    sc_trace(mVcdFile, input_AX_ALG_user_V_0_load_A, "input_AX_ALG_user_V_0_load_A");
    sc_trace(mVcdFile, input_AX_ALG_user_V_0_load_B, "input_AX_ALG_user_V_0_load_B");
    sc_trace(mVcdFile, input_AX_ALG_user_V_0_state, "input_AX_ALG_user_V_0_state");
    sc_trace(mVcdFile, input_AX_ALG_user_V_0_state_cmp_full, "input_AX_ALG_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, input_AX_ALG_last_V_0_data_out, "input_AX_ALG_last_V_0_data_out");
    sc_trace(mVcdFile, input_AX_ALG_last_V_0_vld_in, "input_AX_ALG_last_V_0_vld_in");
    sc_trace(mVcdFile, input_AX_ALG_last_V_0_vld_out, "input_AX_ALG_last_V_0_vld_out");
    sc_trace(mVcdFile, input_AX_ALG_last_V_0_ack_in, "input_AX_ALG_last_V_0_ack_in");
    sc_trace(mVcdFile, input_AX_ALG_last_V_0_ack_out, "input_AX_ALG_last_V_0_ack_out");
    sc_trace(mVcdFile, input_AX_ALG_last_V_0_payload_A, "input_AX_ALG_last_V_0_payload_A");
    sc_trace(mVcdFile, input_AX_ALG_last_V_0_payload_B, "input_AX_ALG_last_V_0_payload_B");
    sc_trace(mVcdFile, input_AX_ALG_last_V_0_sel_rd, "input_AX_ALG_last_V_0_sel_rd");
    sc_trace(mVcdFile, input_AX_ALG_last_V_0_sel_wr, "input_AX_ALG_last_V_0_sel_wr");
    sc_trace(mVcdFile, input_AX_ALG_last_V_0_sel, "input_AX_ALG_last_V_0_sel");
    sc_trace(mVcdFile, input_AX_ALG_last_V_0_load_A, "input_AX_ALG_last_V_0_load_A");
    sc_trace(mVcdFile, input_AX_ALG_last_V_0_load_B, "input_AX_ALG_last_V_0_load_B");
    sc_trace(mVcdFile, input_AX_ALG_last_V_0_state, "input_AX_ALG_last_V_0_state");
    sc_trace(mVcdFile, input_AX_ALG_last_V_0_state_cmp_full, "input_AX_ALG_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, input_AX_ALG_id_V_0_data_out, "input_AX_ALG_id_V_0_data_out");
    sc_trace(mVcdFile, input_AX_ALG_id_V_0_vld_in, "input_AX_ALG_id_V_0_vld_in");
    sc_trace(mVcdFile, input_AX_ALG_id_V_0_vld_out, "input_AX_ALG_id_V_0_vld_out");
    sc_trace(mVcdFile, input_AX_ALG_id_V_0_ack_in, "input_AX_ALG_id_V_0_ack_in");
    sc_trace(mVcdFile, input_AX_ALG_id_V_0_ack_out, "input_AX_ALG_id_V_0_ack_out");
    sc_trace(mVcdFile, input_AX_ALG_id_V_0_payload_A, "input_AX_ALG_id_V_0_payload_A");
    sc_trace(mVcdFile, input_AX_ALG_id_V_0_payload_B, "input_AX_ALG_id_V_0_payload_B");
    sc_trace(mVcdFile, input_AX_ALG_id_V_0_sel_rd, "input_AX_ALG_id_V_0_sel_rd");
    sc_trace(mVcdFile, input_AX_ALG_id_V_0_sel_wr, "input_AX_ALG_id_V_0_sel_wr");
    sc_trace(mVcdFile, input_AX_ALG_id_V_0_sel, "input_AX_ALG_id_V_0_sel");
    sc_trace(mVcdFile, input_AX_ALG_id_V_0_load_A, "input_AX_ALG_id_V_0_load_A");
    sc_trace(mVcdFile, input_AX_ALG_id_V_0_load_B, "input_AX_ALG_id_V_0_load_B");
    sc_trace(mVcdFile, input_AX_ALG_id_V_0_state, "input_AX_ALG_id_V_0_state");
    sc_trace(mVcdFile, input_AX_ALG_id_V_0_state_cmp_full, "input_AX_ALG_id_V_0_state_cmp_full");
    sc_trace(mVcdFile, input_AX_ALG_dest_V_0_data_out, "input_AX_ALG_dest_V_0_data_out");
    sc_trace(mVcdFile, input_AX_ALG_dest_V_0_vld_in, "input_AX_ALG_dest_V_0_vld_in");
    sc_trace(mVcdFile, input_AX_ALG_dest_V_0_vld_out, "input_AX_ALG_dest_V_0_vld_out");
    sc_trace(mVcdFile, input_AX_ALG_dest_V_0_ack_in, "input_AX_ALG_dest_V_0_ack_in");
    sc_trace(mVcdFile, input_AX_ALG_dest_V_0_ack_out, "input_AX_ALG_dest_V_0_ack_out");
    sc_trace(mVcdFile, input_AX_ALG_dest_V_0_payload_A, "input_AX_ALG_dest_V_0_payload_A");
    sc_trace(mVcdFile, input_AX_ALG_dest_V_0_payload_B, "input_AX_ALG_dest_V_0_payload_B");
    sc_trace(mVcdFile, input_AX_ALG_dest_V_0_sel_rd, "input_AX_ALG_dest_V_0_sel_rd");
    sc_trace(mVcdFile, input_AX_ALG_dest_V_0_sel_wr, "input_AX_ALG_dest_V_0_sel_wr");
    sc_trace(mVcdFile, input_AX_ALG_dest_V_0_sel, "input_AX_ALG_dest_V_0_sel");
    sc_trace(mVcdFile, input_AX_ALG_dest_V_0_load_A, "input_AX_ALG_dest_V_0_load_A");
    sc_trace(mVcdFile, input_AX_ALG_dest_V_0_load_B, "input_AX_ALG_dest_V_0_load_B");
    sc_trace(mVcdFile, input_AX_ALG_dest_V_0_state, "input_AX_ALG_dest_V_0_state");
    sc_trace(mVcdFile, input_AX_ALG_dest_V_0_state_cmp_full, "input_AX_ALG_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, output_AX_ALG_data_V_1_data_out, "output_AX_ALG_data_V_1_data_out");
    sc_trace(mVcdFile, output_AX_ALG_data_V_1_vld_in, "output_AX_ALG_data_V_1_vld_in");
    sc_trace(mVcdFile, output_AX_ALG_data_V_1_vld_out, "output_AX_ALG_data_V_1_vld_out");
    sc_trace(mVcdFile, output_AX_ALG_data_V_1_ack_in, "output_AX_ALG_data_V_1_ack_in");
    sc_trace(mVcdFile, output_AX_ALG_data_V_1_ack_out, "output_AX_ALG_data_V_1_ack_out");
    sc_trace(mVcdFile, output_AX_ALG_data_V_1_payload_A, "output_AX_ALG_data_V_1_payload_A");
    sc_trace(mVcdFile, output_AX_ALG_data_V_1_payload_B, "output_AX_ALG_data_V_1_payload_B");
    sc_trace(mVcdFile, output_AX_ALG_data_V_1_sel_rd, "output_AX_ALG_data_V_1_sel_rd");
    sc_trace(mVcdFile, output_AX_ALG_data_V_1_sel_wr, "output_AX_ALG_data_V_1_sel_wr");
    sc_trace(mVcdFile, output_AX_ALG_data_V_1_sel, "output_AX_ALG_data_V_1_sel");
    sc_trace(mVcdFile, output_AX_ALG_data_V_1_load_A, "output_AX_ALG_data_V_1_load_A");
    sc_trace(mVcdFile, output_AX_ALG_data_V_1_load_B, "output_AX_ALG_data_V_1_load_B");
    sc_trace(mVcdFile, output_AX_ALG_data_V_1_state, "output_AX_ALG_data_V_1_state");
    sc_trace(mVcdFile, output_AX_ALG_data_V_1_state_cmp_full, "output_AX_ALG_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, output_AX_ALG_keep_V_1_data_out, "output_AX_ALG_keep_V_1_data_out");
    sc_trace(mVcdFile, output_AX_ALG_keep_V_1_vld_in, "output_AX_ALG_keep_V_1_vld_in");
    sc_trace(mVcdFile, output_AX_ALG_keep_V_1_vld_out, "output_AX_ALG_keep_V_1_vld_out");
    sc_trace(mVcdFile, output_AX_ALG_keep_V_1_ack_in, "output_AX_ALG_keep_V_1_ack_in");
    sc_trace(mVcdFile, output_AX_ALG_keep_V_1_ack_out, "output_AX_ALG_keep_V_1_ack_out");
    sc_trace(mVcdFile, output_AX_ALG_keep_V_1_payload_A, "output_AX_ALG_keep_V_1_payload_A");
    sc_trace(mVcdFile, output_AX_ALG_keep_V_1_payload_B, "output_AX_ALG_keep_V_1_payload_B");
    sc_trace(mVcdFile, output_AX_ALG_keep_V_1_sel_rd, "output_AX_ALG_keep_V_1_sel_rd");
    sc_trace(mVcdFile, output_AX_ALG_keep_V_1_sel_wr, "output_AX_ALG_keep_V_1_sel_wr");
    sc_trace(mVcdFile, output_AX_ALG_keep_V_1_sel, "output_AX_ALG_keep_V_1_sel");
    sc_trace(mVcdFile, output_AX_ALG_keep_V_1_load_A, "output_AX_ALG_keep_V_1_load_A");
    sc_trace(mVcdFile, output_AX_ALG_keep_V_1_load_B, "output_AX_ALG_keep_V_1_load_B");
    sc_trace(mVcdFile, output_AX_ALG_keep_V_1_state, "output_AX_ALG_keep_V_1_state");
    sc_trace(mVcdFile, output_AX_ALG_keep_V_1_state_cmp_full, "output_AX_ALG_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, output_AX_ALG_strb_V_1_data_out, "output_AX_ALG_strb_V_1_data_out");
    sc_trace(mVcdFile, output_AX_ALG_strb_V_1_vld_in, "output_AX_ALG_strb_V_1_vld_in");
    sc_trace(mVcdFile, output_AX_ALG_strb_V_1_vld_out, "output_AX_ALG_strb_V_1_vld_out");
    sc_trace(mVcdFile, output_AX_ALG_strb_V_1_ack_in, "output_AX_ALG_strb_V_1_ack_in");
    sc_trace(mVcdFile, output_AX_ALG_strb_V_1_ack_out, "output_AX_ALG_strb_V_1_ack_out");
    sc_trace(mVcdFile, output_AX_ALG_strb_V_1_payload_A, "output_AX_ALG_strb_V_1_payload_A");
    sc_trace(mVcdFile, output_AX_ALG_strb_V_1_payload_B, "output_AX_ALG_strb_V_1_payload_B");
    sc_trace(mVcdFile, output_AX_ALG_strb_V_1_sel_rd, "output_AX_ALG_strb_V_1_sel_rd");
    sc_trace(mVcdFile, output_AX_ALG_strb_V_1_sel_wr, "output_AX_ALG_strb_V_1_sel_wr");
    sc_trace(mVcdFile, output_AX_ALG_strb_V_1_sel, "output_AX_ALG_strb_V_1_sel");
    sc_trace(mVcdFile, output_AX_ALG_strb_V_1_load_A, "output_AX_ALG_strb_V_1_load_A");
    sc_trace(mVcdFile, output_AX_ALG_strb_V_1_load_B, "output_AX_ALG_strb_V_1_load_B");
    sc_trace(mVcdFile, output_AX_ALG_strb_V_1_state, "output_AX_ALG_strb_V_1_state");
    sc_trace(mVcdFile, output_AX_ALG_strb_V_1_state_cmp_full, "output_AX_ALG_strb_V_1_state_cmp_full");
    sc_trace(mVcdFile, output_AX_ALG_user_V_1_data_out, "output_AX_ALG_user_V_1_data_out");
    sc_trace(mVcdFile, output_AX_ALG_user_V_1_vld_in, "output_AX_ALG_user_V_1_vld_in");
    sc_trace(mVcdFile, output_AX_ALG_user_V_1_vld_out, "output_AX_ALG_user_V_1_vld_out");
    sc_trace(mVcdFile, output_AX_ALG_user_V_1_ack_in, "output_AX_ALG_user_V_1_ack_in");
    sc_trace(mVcdFile, output_AX_ALG_user_V_1_ack_out, "output_AX_ALG_user_V_1_ack_out");
    sc_trace(mVcdFile, output_AX_ALG_user_V_1_payload_A, "output_AX_ALG_user_V_1_payload_A");
    sc_trace(mVcdFile, output_AX_ALG_user_V_1_payload_B, "output_AX_ALG_user_V_1_payload_B");
    sc_trace(mVcdFile, output_AX_ALG_user_V_1_sel_rd, "output_AX_ALG_user_V_1_sel_rd");
    sc_trace(mVcdFile, output_AX_ALG_user_V_1_sel_wr, "output_AX_ALG_user_V_1_sel_wr");
    sc_trace(mVcdFile, output_AX_ALG_user_V_1_sel, "output_AX_ALG_user_V_1_sel");
    sc_trace(mVcdFile, output_AX_ALG_user_V_1_load_A, "output_AX_ALG_user_V_1_load_A");
    sc_trace(mVcdFile, output_AX_ALG_user_V_1_load_B, "output_AX_ALG_user_V_1_load_B");
    sc_trace(mVcdFile, output_AX_ALG_user_V_1_state, "output_AX_ALG_user_V_1_state");
    sc_trace(mVcdFile, output_AX_ALG_user_V_1_state_cmp_full, "output_AX_ALG_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, output_AX_ALG_last_V_1_data_out, "output_AX_ALG_last_V_1_data_out");
    sc_trace(mVcdFile, output_AX_ALG_last_V_1_vld_in, "output_AX_ALG_last_V_1_vld_in");
    sc_trace(mVcdFile, output_AX_ALG_last_V_1_vld_out, "output_AX_ALG_last_V_1_vld_out");
    sc_trace(mVcdFile, output_AX_ALG_last_V_1_ack_in, "output_AX_ALG_last_V_1_ack_in");
    sc_trace(mVcdFile, output_AX_ALG_last_V_1_ack_out, "output_AX_ALG_last_V_1_ack_out");
    sc_trace(mVcdFile, output_AX_ALG_last_V_1_payload_A, "output_AX_ALG_last_V_1_payload_A");
    sc_trace(mVcdFile, output_AX_ALG_last_V_1_payload_B, "output_AX_ALG_last_V_1_payload_B");
    sc_trace(mVcdFile, output_AX_ALG_last_V_1_sel_rd, "output_AX_ALG_last_V_1_sel_rd");
    sc_trace(mVcdFile, output_AX_ALG_last_V_1_sel_wr, "output_AX_ALG_last_V_1_sel_wr");
    sc_trace(mVcdFile, output_AX_ALG_last_V_1_sel, "output_AX_ALG_last_V_1_sel");
    sc_trace(mVcdFile, output_AX_ALG_last_V_1_load_A, "output_AX_ALG_last_V_1_load_A");
    sc_trace(mVcdFile, output_AX_ALG_last_V_1_load_B, "output_AX_ALG_last_V_1_load_B");
    sc_trace(mVcdFile, output_AX_ALG_last_V_1_state, "output_AX_ALG_last_V_1_state");
    sc_trace(mVcdFile, output_AX_ALG_last_V_1_state_cmp_full, "output_AX_ALG_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, output_AX_ALG_id_V_1_data_out, "output_AX_ALG_id_V_1_data_out");
    sc_trace(mVcdFile, output_AX_ALG_id_V_1_vld_in, "output_AX_ALG_id_V_1_vld_in");
    sc_trace(mVcdFile, output_AX_ALG_id_V_1_vld_out, "output_AX_ALG_id_V_1_vld_out");
    sc_trace(mVcdFile, output_AX_ALG_id_V_1_ack_in, "output_AX_ALG_id_V_1_ack_in");
    sc_trace(mVcdFile, output_AX_ALG_id_V_1_ack_out, "output_AX_ALG_id_V_1_ack_out");
    sc_trace(mVcdFile, output_AX_ALG_id_V_1_payload_A, "output_AX_ALG_id_V_1_payload_A");
    sc_trace(mVcdFile, output_AX_ALG_id_V_1_payload_B, "output_AX_ALG_id_V_1_payload_B");
    sc_trace(mVcdFile, output_AX_ALG_id_V_1_sel_rd, "output_AX_ALG_id_V_1_sel_rd");
    sc_trace(mVcdFile, output_AX_ALG_id_V_1_sel_wr, "output_AX_ALG_id_V_1_sel_wr");
    sc_trace(mVcdFile, output_AX_ALG_id_V_1_sel, "output_AX_ALG_id_V_1_sel");
    sc_trace(mVcdFile, output_AX_ALG_id_V_1_load_A, "output_AX_ALG_id_V_1_load_A");
    sc_trace(mVcdFile, output_AX_ALG_id_V_1_load_B, "output_AX_ALG_id_V_1_load_B");
    sc_trace(mVcdFile, output_AX_ALG_id_V_1_state, "output_AX_ALG_id_V_1_state");
    sc_trace(mVcdFile, output_AX_ALG_id_V_1_state_cmp_full, "output_AX_ALG_id_V_1_state_cmp_full");
    sc_trace(mVcdFile, output_AX_ALG_dest_V_1_data_out, "output_AX_ALG_dest_V_1_data_out");
    sc_trace(mVcdFile, output_AX_ALG_dest_V_1_vld_in, "output_AX_ALG_dest_V_1_vld_in");
    sc_trace(mVcdFile, output_AX_ALG_dest_V_1_vld_out, "output_AX_ALG_dest_V_1_vld_out");
    sc_trace(mVcdFile, output_AX_ALG_dest_V_1_ack_in, "output_AX_ALG_dest_V_1_ack_in");
    sc_trace(mVcdFile, output_AX_ALG_dest_V_1_ack_out, "output_AX_ALG_dest_V_1_ack_out");
    sc_trace(mVcdFile, output_AX_ALG_dest_V_1_payload_A, "output_AX_ALG_dest_V_1_payload_A");
    sc_trace(mVcdFile, output_AX_ALG_dest_V_1_payload_B, "output_AX_ALG_dest_V_1_payload_B");
    sc_trace(mVcdFile, output_AX_ALG_dest_V_1_sel_rd, "output_AX_ALG_dest_V_1_sel_rd");
    sc_trace(mVcdFile, output_AX_ALG_dest_V_1_sel_wr, "output_AX_ALG_dest_V_1_sel_wr");
    sc_trace(mVcdFile, output_AX_ALG_dest_V_1_sel, "output_AX_ALG_dest_V_1_sel");
    sc_trace(mVcdFile, output_AX_ALG_dest_V_1_load_A, "output_AX_ALG_dest_V_1_load_A");
    sc_trace(mVcdFile, output_AX_ALG_dest_V_1_load_B, "output_AX_ALG_dest_V_1_load_B");
    sc_trace(mVcdFile, output_AX_ALG_dest_V_1_state, "output_AX_ALG_dest_V_1_state");
    sc_trace(mVcdFile, output_AX_ALG_dest_V_1_state_cmp_full, "output_AX_ALG_dest_V_1_state_cmp_full");
    sc_trace(mVcdFile, buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TDATA_blk_n, "buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TDATA_blk_n");
    sc_trace(mVcdFile, input_AX_ALG_TDATA_blk_n, "input_AX_ALG_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, p_Val2_1_fu_127_p1, "p_Val2_1_fu_127_p1");
    sc_trace(mVcdFile, p_Val2_1_reg_138, "p_Val2_1_reg_138");
    sc_trace(mVcdFile, grp_sweep_algorithm_DECM_fu_76_ap_start, "grp_sweep_algorithm_DECM_fu_76_ap_start");
    sc_trace(mVcdFile, grp_sweep_algorithm_DECM_fu_76_ap_done, "grp_sweep_algorithm_DECM_fu_76_ap_done");
    sc_trace(mVcdFile, grp_sweep_algorithm_DECM_fu_76_ap_idle, "grp_sweep_algorithm_DECM_fu_76_ap_idle");
    sc_trace(mVcdFile, grp_sweep_algorithm_DECM_fu_76_ap_ready, "grp_sweep_algorithm_DECM_fu_76_ap_ready");
    sc_trace(mVcdFile, grp_write_data_fu_89_ap_start, "grp_write_data_fu_89_ap_start");
    sc_trace(mVcdFile, grp_write_data_fu_89_ap_done, "grp_write_data_fu_89_ap_done");
    sc_trace(mVcdFile, grp_write_data_fu_89_ap_idle, "grp_write_data_fu_89_ap_idle");
    sc_trace(mVcdFile, grp_write_data_fu_89_ap_ready, "grp_write_data_fu_89_ap_ready");
    sc_trace(mVcdFile, grp_write_data_fu_89_output_AX_ALG_TDATA, "grp_write_data_fu_89_output_AX_ALG_TDATA");
    sc_trace(mVcdFile, grp_write_data_fu_89_output_AX_ALG_TVALID, "grp_write_data_fu_89_output_AX_ALG_TVALID");
    sc_trace(mVcdFile, grp_write_data_fu_89_output_AX_ALG_TREADY, "grp_write_data_fu_89_output_AX_ALG_TREADY");
    sc_trace(mVcdFile, grp_write_data_fu_89_output_AX_ALG_TKEEP, "grp_write_data_fu_89_output_AX_ALG_TKEEP");
    sc_trace(mVcdFile, grp_write_data_fu_89_output_AX_ALG_TSTRB, "grp_write_data_fu_89_output_AX_ALG_TSTRB");
    sc_trace(mVcdFile, grp_write_data_fu_89_output_AX_ALG_TUSER, "grp_write_data_fu_89_output_AX_ALG_TUSER");
    sc_trace(mVcdFile, grp_write_data_fu_89_output_AX_ALG_TLAST, "grp_write_data_fu_89_output_AX_ALG_TLAST");
    sc_trace(mVcdFile, grp_write_data_fu_89_output_AX_ALG_TID, "grp_write_data_fu_89_output_AX_ALG_TID");
    sc_trace(mVcdFile, grp_write_data_fu_89_output_AX_ALG_TDEST, "grp_write_data_fu_89_output_AX_ALG_TDEST");
    sc_trace(mVcdFile, buf_Tj_in_0_V_read_data_fu_109_ap_start, "buf_Tj_in_0_V_read_data_fu_109_ap_start");
    sc_trace(mVcdFile, buf_Tj_in_0_V_read_data_fu_109_ap_done, "buf_Tj_in_0_V_read_data_fu_109_ap_done");
    sc_trace(mVcdFile, buf_Tj_in_0_V_read_data_fu_109_ap_idle, "buf_Tj_in_0_V_read_data_fu_109_ap_idle");
    sc_trace(mVcdFile, buf_Tj_in_0_V_read_data_fu_109_ap_ready, "buf_Tj_in_0_V_read_data_fu_109_ap_ready");
    sc_trace(mVcdFile, buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TVALID, "buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TVALID");
    sc_trace(mVcdFile, buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY, "buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY");
    sc_trace(mVcdFile, buf_Tj_in_0_V_read_data_fu_109_ap_return, "buf_Tj_in_0_V_read_data_fu_109_ap_return");
    sc_trace(mVcdFile, ap_reg_grp_sweep_algorithm_DECM_fu_76_ap_start, "ap_reg_grp_sweep_algorithm_DECM_fu_76_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_reg_grp_write_data_fu_89_ap_start, "ap_reg_grp_write_data_fu_89_ap_start");
    sc_trace(mVcdFile, tmp_s_fu_132_p2, "tmp_s_fu_132_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
#endif

    }
    mHdltvinHandle.open("axi_algorithm.hdltvin.dat");
    mHdltvoutHandle.open("axi_algorithm.hdltvout.dat");
}

axi_algorithm::~axi_algorithm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_sweep_algorithm_DECM_fu_76;
    delete grp_write_data_fu_89;
    delete buf_Tj_in_0_V_read_data_fu_109;
}

void axi_algorithm::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv1_0;
}

void axi_algorithm::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_sweep_algorithm_DECM_fu_76_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TDATA_blk_n.read(), ap_const_logic_1))) {
            ap_reg_grp_sweep_algorithm_DECM_fu_76_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sweep_algorithm_DECM_fu_76_ap_ready.read())) {
            ap_reg_grp_sweep_algorithm_DECM_fu_76_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_write_data_fu_89_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             esl_seteq<1,1,1>(grp_sweep_algorithm_DECM_fu_76_ap_done.read(), ap_const_logic_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_fu_132_p2.read()))) {
            ap_reg_grp_write_data_fu_89_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_write_data_fu_89_ap_ready.read())) {
            ap_reg_grp_write_data_fu_89_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_data_V_0_vld_out.read()))) {
            input_AX_ALG_data_V_0_sel_rd =  (sc_logic) (~input_AX_ALG_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_data_V_0_ack_in.read()))) {
            input_AX_ALG_data_V_0_sel_wr =  (sc_logic) (~input_AX_ALG_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(input_AX_ALG_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(input_AX_ALG_data_V_0_state.read(), ap_const_lv2_2)))) {
            input_AX_ALG_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(input_AX_ALG_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(input_AX_ALG_data_V_0_state.read(), ap_const_lv2_1)))) {
            input_AX_ALG_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(input_AX_ALG_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(input_AX_ALG_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(input_AX_ALG_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_data_V_0_ack_out.read()))))) {
            input_AX_ALG_data_V_0_state = ap_const_lv2_3;
        } else {
            input_AX_ALG_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_dest_V_0_vld_out.read()))) {
            input_AX_ALG_dest_V_0_sel_rd =  (sc_logic) (~input_AX_ALG_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_dest_V_0_ack_in.read()))) {
            input_AX_ALG_dest_V_0_sel_wr =  (sc_logic) (~input_AX_ALG_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, input_AX_ALG_dest_V_0_state.read())))) {
            input_AX_ALG_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, input_AX_ALG_dest_V_0_state.read())))) {
            input_AX_ALG_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, input_AX_ALG_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, input_AX_ALG_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_dest_V_0_ack_out.read()))))) {
            input_AX_ALG_dest_V_0_state = ap_const_lv2_3;
        } else {
            input_AX_ALG_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_id_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_id_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_id_V_0_vld_out.read()))) {
            input_AX_ALG_id_V_0_sel_rd =  (sc_logic) (~input_AX_ALG_id_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_id_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_id_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_id_V_0_ack_in.read()))) {
            input_AX_ALG_id_V_0_sel_wr =  (sc_logic) (~input_AX_ALG_id_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_id_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_id_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_id_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_id_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_id_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, input_AX_ALG_id_V_0_state.read())))) {
            input_AX_ALG_id_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_id_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, input_AX_ALG_id_V_0_state.read())))) {
            input_AX_ALG_id_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_id_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, input_AX_ALG_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, input_AX_ALG_id_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_id_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_id_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_id_V_0_ack_out.read()))))) {
            input_AX_ALG_id_V_0_state = ap_const_lv2_3;
        } else {
            input_AX_ALG_id_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_keep_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_keep_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_keep_V_0_vld_out.read()))) {
            input_AX_ALG_keep_V_0_sel_rd =  (sc_logic) (~input_AX_ALG_keep_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_keep_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_keep_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_keep_V_0_ack_in.read()))) {
            input_AX_ALG_keep_V_0_sel_wr =  (sc_logic) (~input_AX_ALG_keep_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, input_AX_ALG_keep_V_0_state.read())))) {
            input_AX_ALG_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, input_AX_ALG_keep_V_0_state.read())))) {
            input_AX_ALG_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, input_AX_ALG_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, input_AX_ALG_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_keep_V_0_ack_out.read()))))) {
            input_AX_ALG_keep_V_0_state = ap_const_lv2_3;
        } else {
            input_AX_ALG_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_last_V_0_vld_out.read()))) {
            input_AX_ALG_last_V_0_sel_rd =  (sc_logic) (~input_AX_ALG_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_last_V_0_ack_in.read()))) {
            input_AX_ALG_last_V_0_sel_wr =  (sc_logic) (~input_AX_ALG_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, input_AX_ALG_last_V_0_state.read())))) {
            input_AX_ALG_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, input_AX_ALG_last_V_0_state.read())))) {
            input_AX_ALG_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, input_AX_ALG_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, input_AX_ALG_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_last_V_0_ack_out.read()))))) {
            input_AX_ALG_last_V_0_state = ap_const_lv2_3;
        } else {
            input_AX_ALG_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_strb_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_strb_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_strb_V_0_vld_out.read()))) {
            input_AX_ALG_strb_V_0_sel_rd =  (sc_logic) (~input_AX_ALG_strb_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_strb_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_strb_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_strb_V_0_ack_in.read()))) {
            input_AX_ALG_strb_V_0_sel_wr =  (sc_logic) (~input_AX_ALG_strb_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_strb_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_strb_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_strb_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_strb_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_strb_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, input_AX_ALG_strb_V_0_state.read())))) {
            input_AX_ALG_strb_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, input_AX_ALG_strb_V_0_state.read())))) {
            input_AX_ALG_strb_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, input_AX_ALG_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, input_AX_ALG_strb_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_strb_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_strb_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_strb_V_0_ack_out.read()))))) {
            input_AX_ALG_strb_V_0_state = ap_const_lv2_3;
        } else {
            input_AX_ALG_strb_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_user_V_0_vld_out.read()))) {
            input_AX_ALG_user_V_0_sel_rd =  (sc_logic) (~input_AX_ALG_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_user_V_0_ack_in.read()))) {
            input_AX_ALG_user_V_0_sel_wr =  (sc_logic) (~input_AX_ALG_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_AX_ALG_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, input_AX_ALG_user_V_0_state.read())))) {
            input_AX_ALG_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, input_AX_ALG_user_V_0_state.read())))) {
            input_AX_ALG_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, input_AX_ALG_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, input_AX_ALG_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, input_AX_ALG_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, input_AX_ALG_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_user_V_0_ack_out.read()))))) {
            input_AX_ALG_user_V_0_state = ap_const_lv2_3;
        } else {
            input_AX_ALG_user_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_data_V_1_vld_out.read()))) {
            output_AX_ALG_data_V_1_sel_rd =  (sc_logic) (~output_AX_ALG_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_data_V_1_ack_in.read()))) {
            output_AX_ALG_data_V_1_sel_wr =  (sc_logic) (~output_AX_ALG_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_AX_ALG_data_V_1_state.read())))) {
            output_AX_ALG_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_AX_ALG_data_V_1_state.read())))) {
            output_AX_ALG_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_AX_ALG_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_AX_ALG_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_data_V_1_ack_out.read()))))) {
            output_AX_ALG_data_V_1_state = ap_const_lv2_3;
        } else {
            output_AX_ALG_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_dest_V_1_vld_out.read()))) {
            output_AX_ALG_dest_V_1_sel_rd =  (sc_logic) (~output_AX_ALG_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_dest_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_dest_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_dest_V_1_ack_in.read()))) {
            output_AX_ALG_dest_V_1_sel_wr =  (sc_logic) (~output_AX_ALG_dest_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_AX_ALG_dest_V_1_state.read())))) {
            output_AX_ALG_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_AX_ALG_dest_V_1_state.read())))) {
            output_AX_ALG_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_AX_ALG_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_AX_ALG_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_dest_V_1_ack_out.read()))))) {
            output_AX_ALG_dest_V_1_state = ap_const_lv2_3;
        } else {
            output_AX_ALG_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_id_V_1_vld_out.read()))) {
            output_AX_ALG_id_V_1_sel_rd =  (sc_logic) (~output_AX_ALG_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_id_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_id_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_id_V_1_ack_in.read()))) {
            output_AX_ALG_id_V_1_sel_wr =  (sc_logic) (~output_AX_ALG_id_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_AX_ALG_id_V_1_state.read())))) {
            output_AX_ALG_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_AX_ALG_id_V_1_state.read())))) {
            output_AX_ALG_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_AX_ALG_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_AX_ALG_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_id_V_1_ack_out.read()))))) {
            output_AX_ALG_id_V_1_state = ap_const_lv2_3;
        } else {
            output_AX_ALG_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_keep_V_1_vld_out.read()))) {
            output_AX_ALG_keep_V_1_sel_rd =  (sc_logic) (~output_AX_ALG_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_keep_V_1_ack_in.read()))) {
            output_AX_ALG_keep_V_1_sel_wr =  (sc_logic) (~output_AX_ALG_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_AX_ALG_keep_V_1_state.read())))) {
            output_AX_ALG_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_AX_ALG_keep_V_1_state.read())))) {
            output_AX_ALG_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_AX_ALG_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_AX_ALG_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_keep_V_1_ack_out.read()))))) {
            output_AX_ALG_keep_V_1_state = ap_const_lv2_3;
        } else {
            output_AX_ALG_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_last_V_1_vld_out.read()))) {
            output_AX_ALG_last_V_1_sel_rd =  (sc_logic) (~output_AX_ALG_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_last_V_1_ack_in.read()))) {
            output_AX_ALG_last_V_1_sel_wr =  (sc_logic) (~output_AX_ALG_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_AX_ALG_last_V_1_state.read())))) {
            output_AX_ALG_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_AX_ALG_last_V_1_state.read())))) {
            output_AX_ALG_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_AX_ALG_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_AX_ALG_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_last_V_1_ack_out.read()))))) {
            output_AX_ALG_last_V_1_state = ap_const_lv2_3;
        } else {
            output_AX_ALG_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_strb_V_1_vld_out.read()))) {
            output_AX_ALG_strb_V_1_sel_rd =  (sc_logic) (~output_AX_ALG_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_strb_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_strb_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_strb_V_1_ack_in.read()))) {
            output_AX_ALG_strb_V_1_sel_wr =  (sc_logic) (~output_AX_ALG_strb_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_AX_ALG_strb_V_1_state.read())))) {
            output_AX_ALG_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_AX_ALG_strb_V_1_state.read())))) {
            output_AX_ALG_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_AX_ALG_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_AX_ALG_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_strb_V_1_ack_out.read()))))) {
            output_AX_ALG_strb_V_1_state = ap_const_lv2_3;
        } else {
            output_AX_ALG_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_user_V_1_vld_out.read()))) {
            output_AX_ALG_user_V_1_sel_rd =  (sc_logic) (~output_AX_ALG_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_user_V_1_ack_in.read()))) {
            output_AX_ALG_user_V_1_sel_wr =  (sc_logic) (~output_AX_ALG_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_AX_ALG_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_AX_ALG_user_V_1_state.read())))) {
            output_AX_ALG_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_AX_ALG_user_V_1_state.read())))) {
            output_AX_ALG_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_AX_ALG_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_AX_ALG_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_AX_ALG_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_user_V_1_ack_out.read()))))) {
            output_AX_ALG_user_V_1_state = ap_const_lv2_3;
        } else {
            output_AX_ALG_user_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_data_V_0_load_A.read())) {
        input_AX_ALG_data_V_0_payload_A = input_AX_ALG_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_data_V_0_load_B.read())) {
        input_AX_ALG_data_V_0_payload_B = input_AX_ALG_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_dest_V_0_load_A.read())) {
        input_AX_ALG_dest_V_0_payload_A = input_AX_ALG_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_dest_V_0_load_B.read())) {
        input_AX_ALG_dest_V_0_payload_B = input_AX_ALG_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_id_V_0_load_A.read())) {
        input_AX_ALG_id_V_0_payload_A = input_AX_ALG_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_id_V_0_load_B.read())) {
        input_AX_ALG_id_V_0_payload_B = input_AX_ALG_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_keep_V_0_load_A.read())) {
        input_AX_ALG_keep_V_0_payload_A = input_AX_ALG_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_keep_V_0_load_B.read())) {
        input_AX_ALG_keep_V_0_payload_B = input_AX_ALG_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_last_V_0_load_A.read())) {
        input_AX_ALG_last_V_0_payload_A = input_AX_ALG_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_last_V_0_load_B.read())) {
        input_AX_ALG_last_V_0_payload_B = input_AX_ALG_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_strb_V_0_load_A.read())) {
        input_AX_ALG_strb_V_0_payload_A = input_AX_ALG_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_strb_V_0_load_B.read())) {
        input_AX_ALG_strb_V_0_payload_B = input_AX_ALG_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_user_V_0_load_A.read())) {
        input_AX_ALG_user_V_0_payload_A = input_AX_ALG_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_user_V_0_load_B.read())) {
        input_AX_ALG_user_V_0_payload_B = input_AX_ALG_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_data_V_1_load_A.read())) {
        output_AX_ALG_data_V_1_payload_A = grp_write_data_fu_89_output_AX_ALG_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_data_V_1_load_B.read())) {
        output_AX_ALG_data_V_1_payload_B = grp_write_data_fu_89_output_AX_ALG_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_dest_V_1_load_A.read())) {
        output_AX_ALG_dest_V_1_payload_A = grp_write_data_fu_89_output_AX_ALG_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_dest_V_1_load_B.read())) {
        output_AX_ALG_dest_V_1_payload_B = grp_write_data_fu_89_output_AX_ALG_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_id_V_1_load_A.read())) {
        output_AX_ALG_id_V_1_payload_A = grp_write_data_fu_89_output_AX_ALG_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_id_V_1_load_B.read())) {
        output_AX_ALG_id_V_1_payload_B = grp_write_data_fu_89_output_AX_ALG_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_keep_V_1_load_A.read())) {
        output_AX_ALG_keep_V_1_payload_A = grp_write_data_fu_89_output_AX_ALG_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_keep_V_1_load_B.read())) {
        output_AX_ALG_keep_V_1_payload_B = grp_write_data_fu_89_output_AX_ALG_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_last_V_1_load_A.read())) {
        output_AX_ALG_last_V_1_payload_A = grp_write_data_fu_89_output_AX_ALG_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_last_V_1_load_B.read())) {
        output_AX_ALG_last_V_1_payload_B = grp_write_data_fu_89_output_AX_ALG_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_strb_V_1_load_A.read())) {
        output_AX_ALG_strb_V_1_payload_A = grp_write_data_fu_89_output_AX_ALG_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_strb_V_1_load_B.read())) {
        output_AX_ALG_strb_V_1_payload_B = grp_write_data_fu_89_output_AX_ALG_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_user_V_1_load_A.read())) {
        output_AX_ALG_user_V_1_payload_A = grp_write_data_fu_89_output_AX_ALG_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_user_V_1_load_B.read())) {
        output_AX_ALG_user_V_1_payload_B = grp_write_data_fu_89_output_AX_ALG_TUSER.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TDATA_blk_n.read(), ap_const_logic_1))) {
        p_Val2_1_reg_138 = p_Val2_1_fu_127_p1.read();
    }
}

void axi_algorithm::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void axi_algorithm::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void axi_algorithm::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void axi_algorithm::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void axi_algorithm::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_dest_V_1_ack_in.read()));
}

void axi_algorithm::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void axi_algorithm::thread_buf_Tj_in_0_V_read_data_fu_109_ap_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        buf_Tj_in_0_V_read_data_fu_109_ap_start = ap_const_logic_1;
    } else {
        buf_Tj_in_0_V_read_data_fu_109_ap_start = ap_const_logic_0;
    }
}

void axi_algorithm::thread_buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TVALID() {
    buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TVALID = input_AX_ALG_dest_V_0_state.read()[0];
}

void axi_algorithm::thread_grp_sweep_algorithm_DECM_fu_76_ap_start() {
    grp_sweep_algorithm_DECM_fu_76_ap_start = ap_reg_grp_sweep_algorithm_DECM_fu_76_ap_start.read();
}

void axi_algorithm::thread_grp_write_data_fu_89_ap_start() {
    grp_write_data_fu_89_ap_start = ap_reg_grp_write_data_fu_89_ap_start.read();
}

void axi_algorithm::thread_grp_write_data_fu_89_output_AX_ALG_TREADY() {
    grp_write_data_fu_89_output_AX_ALG_TREADY = output_AX_ALG_dest_V_1_state.read()[1];
}

void axi_algorithm::thread_input_AX_ALG_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        input_AX_ALG_TDATA_blk_n = buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TDATA_blk_n.read();
    } else {
        input_AX_ALG_TDATA_blk_n = ap_const_logic_1;
    }
}

void axi_algorithm::thread_input_AX_ALG_TREADY() {
    input_AX_ALG_TREADY = input_AX_ALG_dest_V_0_state.read()[1];
}

void axi_algorithm::thread_input_AX_ALG_data_V_0_ack_in() {
    input_AX_ALG_data_V_0_ack_in = input_AX_ALG_data_V_0_state.read()[1];
}

void axi_algorithm::thread_input_AX_ALG_data_V_0_ack_out() {
    input_AX_ALG_data_V_0_ack_out = buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY.read();
}

void axi_algorithm::thread_input_AX_ALG_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_data_V_0_sel.read())) {
        input_AX_ALG_data_V_0_data_out = input_AX_ALG_data_V_0_payload_B.read();
    } else {
        input_AX_ALG_data_V_0_data_out = input_AX_ALG_data_V_0_payload_A.read();
    }
}

void axi_algorithm::thread_input_AX_ALG_data_V_0_load_A() {
    input_AX_ALG_data_V_0_load_A = (input_AX_ALG_data_V_0_state_cmp_full.read() & ~input_AX_ALG_data_V_0_sel_wr.read());
}

void axi_algorithm::thread_input_AX_ALG_data_V_0_load_B() {
    input_AX_ALG_data_V_0_load_B = (input_AX_ALG_data_V_0_sel_wr.read() & input_AX_ALG_data_V_0_state_cmp_full.read());
}

void axi_algorithm::thread_input_AX_ALG_data_V_0_sel() {
    input_AX_ALG_data_V_0_sel = input_AX_ALG_data_V_0_sel_rd.read();
}

void axi_algorithm::thread_input_AX_ALG_data_V_0_state_cmp_full() {
    input_AX_ALG_data_V_0_state_cmp_full =  (sc_logic) ((!input_AX_ALG_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(input_AX_ALG_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void axi_algorithm::thread_input_AX_ALG_data_V_0_vld_in() {
    input_AX_ALG_data_V_0_vld_in = input_AX_ALG_TVALID.read();
}

void axi_algorithm::thread_input_AX_ALG_data_V_0_vld_out() {
    input_AX_ALG_data_V_0_vld_out = input_AX_ALG_data_V_0_state.read()[0];
}

void axi_algorithm::thread_input_AX_ALG_dest_V_0_ack_in() {
    input_AX_ALG_dest_V_0_ack_in = input_AX_ALG_dest_V_0_state.read()[1];
}

void axi_algorithm::thread_input_AX_ALG_dest_V_0_ack_out() {
    input_AX_ALG_dest_V_0_ack_out = buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY.read();
}

void axi_algorithm::thread_input_AX_ALG_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_dest_V_0_sel.read())) {
        input_AX_ALG_dest_V_0_data_out = input_AX_ALG_dest_V_0_payload_B.read();
    } else {
        input_AX_ALG_dest_V_0_data_out = input_AX_ALG_dest_V_0_payload_A.read();
    }
}

void axi_algorithm::thread_input_AX_ALG_dest_V_0_load_A() {
    input_AX_ALG_dest_V_0_load_A = (input_AX_ALG_dest_V_0_state_cmp_full.read() & ~input_AX_ALG_dest_V_0_sel_wr.read());
}

void axi_algorithm::thread_input_AX_ALG_dest_V_0_load_B() {
    input_AX_ALG_dest_V_0_load_B = (input_AX_ALG_dest_V_0_sel_wr.read() & input_AX_ALG_dest_V_0_state_cmp_full.read());
}

void axi_algorithm::thread_input_AX_ALG_dest_V_0_sel() {
    input_AX_ALG_dest_V_0_sel = input_AX_ALG_dest_V_0_sel_rd.read();
}

void axi_algorithm::thread_input_AX_ALG_dest_V_0_state_cmp_full() {
    input_AX_ALG_dest_V_0_state_cmp_full =  (sc_logic) ((!input_AX_ALG_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(input_AX_ALG_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void axi_algorithm::thread_input_AX_ALG_dest_V_0_vld_in() {
    input_AX_ALG_dest_V_0_vld_in = input_AX_ALG_TVALID.read();
}

void axi_algorithm::thread_input_AX_ALG_dest_V_0_vld_out() {
    input_AX_ALG_dest_V_0_vld_out = input_AX_ALG_dest_V_0_state.read()[0];
}

void axi_algorithm::thread_input_AX_ALG_id_V_0_ack_in() {
    input_AX_ALG_id_V_0_ack_in = input_AX_ALG_id_V_0_state.read()[1];
}

void axi_algorithm::thread_input_AX_ALG_id_V_0_ack_out() {
    input_AX_ALG_id_V_0_ack_out = buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY.read();
}

void axi_algorithm::thread_input_AX_ALG_id_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_id_V_0_sel.read())) {
        input_AX_ALG_id_V_0_data_out = input_AX_ALG_id_V_0_payload_B.read();
    } else {
        input_AX_ALG_id_V_0_data_out = input_AX_ALG_id_V_0_payload_A.read();
    }
}

void axi_algorithm::thread_input_AX_ALG_id_V_0_load_A() {
    input_AX_ALG_id_V_0_load_A = (input_AX_ALG_id_V_0_state_cmp_full.read() & ~input_AX_ALG_id_V_0_sel_wr.read());
}

void axi_algorithm::thread_input_AX_ALG_id_V_0_load_B() {
    input_AX_ALG_id_V_0_load_B = (input_AX_ALG_id_V_0_sel_wr.read() & input_AX_ALG_id_V_0_state_cmp_full.read());
}

void axi_algorithm::thread_input_AX_ALG_id_V_0_sel() {
    input_AX_ALG_id_V_0_sel = input_AX_ALG_id_V_0_sel_rd.read();
}

void axi_algorithm::thread_input_AX_ALG_id_V_0_state_cmp_full() {
    input_AX_ALG_id_V_0_state_cmp_full =  (sc_logic) ((!input_AX_ALG_id_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(input_AX_ALG_id_V_0_state.read() != ap_const_lv2_1))[0];
}

void axi_algorithm::thread_input_AX_ALG_id_V_0_vld_in() {
    input_AX_ALG_id_V_0_vld_in = input_AX_ALG_TVALID.read();
}

void axi_algorithm::thread_input_AX_ALG_id_V_0_vld_out() {
    input_AX_ALG_id_V_0_vld_out = input_AX_ALG_id_V_0_state.read()[0];
}

void axi_algorithm::thread_input_AX_ALG_keep_V_0_ack_in() {
    input_AX_ALG_keep_V_0_ack_in = input_AX_ALG_keep_V_0_state.read()[1];
}

void axi_algorithm::thread_input_AX_ALG_keep_V_0_ack_out() {
    input_AX_ALG_keep_V_0_ack_out = buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY.read();
}

void axi_algorithm::thread_input_AX_ALG_keep_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_keep_V_0_sel.read())) {
        input_AX_ALG_keep_V_0_data_out = input_AX_ALG_keep_V_0_payload_B.read();
    } else {
        input_AX_ALG_keep_V_0_data_out = input_AX_ALG_keep_V_0_payload_A.read();
    }
}

void axi_algorithm::thread_input_AX_ALG_keep_V_0_load_A() {
    input_AX_ALG_keep_V_0_load_A = (input_AX_ALG_keep_V_0_state_cmp_full.read() & ~input_AX_ALG_keep_V_0_sel_wr.read());
}

void axi_algorithm::thread_input_AX_ALG_keep_V_0_load_B() {
    input_AX_ALG_keep_V_0_load_B = (input_AX_ALG_keep_V_0_sel_wr.read() & input_AX_ALG_keep_V_0_state_cmp_full.read());
}

void axi_algorithm::thread_input_AX_ALG_keep_V_0_sel() {
    input_AX_ALG_keep_V_0_sel = input_AX_ALG_keep_V_0_sel_rd.read();
}

void axi_algorithm::thread_input_AX_ALG_keep_V_0_state_cmp_full() {
    input_AX_ALG_keep_V_0_state_cmp_full =  (sc_logic) ((!input_AX_ALG_keep_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(input_AX_ALG_keep_V_0_state.read() != ap_const_lv2_1))[0];
}

void axi_algorithm::thread_input_AX_ALG_keep_V_0_vld_in() {
    input_AX_ALG_keep_V_0_vld_in = input_AX_ALG_TVALID.read();
}

void axi_algorithm::thread_input_AX_ALG_keep_V_0_vld_out() {
    input_AX_ALG_keep_V_0_vld_out = input_AX_ALG_keep_V_0_state.read()[0];
}

void axi_algorithm::thread_input_AX_ALG_last_V_0_ack_in() {
    input_AX_ALG_last_V_0_ack_in = input_AX_ALG_last_V_0_state.read()[1];
}

void axi_algorithm::thread_input_AX_ALG_last_V_0_ack_out() {
    input_AX_ALG_last_V_0_ack_out = buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY.read();
}

void axi_algorithm::thread_input_AX_ALG_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_last_V_0_sel.read())) {
        input_AX_ALG_last_V_0_data_out = input_AX_ALG_last_V_0_payload_B.read();
    } else {
        input_AX_ALG_last_V_0_data_out = input_AX_ALG_last_V_0_payload_A.read();
    }
}

void axi_algorithm::thread_input_AX_ALG_last_V_0_load_A() {
    input_AX_ALG_last_V_0_load_A = (input_AX_ALG_last_V_0_state_cmp_full.read() & ~input_AX_ALG_last_V_0_sel_wr.read());
}

void axi_algorithm::thread_input_AX_ALG_last_V_0_load_B() {
    input_AX_ALG_last_V_0_load_B = (input_AX_ALG_last_V_0_sel_wr.read() & input_AX_ALG_last_V_0_state_cmp_full.read());
}

void axi_algorithm::thread_input_AX_ALG_last_V_0_sel() {
    input_AX_ALG_last_V_0_sel = input_AX_ALG_last_V_0_sel_rd.read();
}

void axi_algorithm::thread_input_AX_ALG_last_V_0_state_cmp_full() {
    input_AX_ALG_last_V_0_state_cmp_full =  (sc_logic) ((!input_AX_ALG_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(input_AX_ALG_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void axi_algorithm::thread_input_AX_ALG_last_V_0_vld_in() {
    input_AX_ALG_last_V_0_vld_in = input_AX_ALG_TVALID.read();
}

void axi_algorithm::thread_input_AX_ALG_last_V_0_vld_out() {
    input_AX_ALG_last_V_0_vld_out = input_AX_ALG_last_V_0_state.read()[0];
}

void axi_algorithm::thread_input_AX_ALG_strb_V_0_ack_in() {
    input_AX_ALG_strb_V_0_ack_in = input_AX_ALG_strb_V_0_state.read()[1];
}

void axi_algorithm::thread_input_AX_ALG_strb_V_0_ack_out() {
    input_AX_ALG_strb_V_0_ack_out = buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY.read();
}

void axi_algorithm::thread_input_AX_ALG_strb_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_strb_V_0_sel.read())) {
        input_AX_ALG_strb_V_0_data_out = input_AX_ALG_strb_V_0_payload_B.read();
    } else {
        input_AX_ALG_strb_V_0_data_out = input_AX_ALG_strb_V_0_payload_A.read();
    }
}

void axi_algorithm::thread_input_AX_ALG_strb_V_0_load_A() {
    input_AX_ALG_strb_V_0_load_A = (input_AX_ALG_strb_V_0_state_cmp_full.read() & ~input_AX_ALG_strb_V_0_sel_wr.read());
}

void axi_algorithm::thread_input_AX_ALG_strb_V_0_load_B() {
    input_AX_ALG_strb_V_0_load_B = (input_AX_ALG_strb_V_0_sel_wr.read() & input_AX_ALG_strb_V_0_state_cmp_full.read());
}

void axi_algorithm::thread_input_AX_ALG_strb_V_0_sel() {
    input_AX_ALG_strb_V_0_sel = input_AX_ALG_strb_V_0_sel_rd.read();
}

void axi_algorithm::thread_input_AX_ALG_strb_V_0_state_cmp_full() {
    input_AX_ALG_strb_V_0_state_cmp_full =  (sc_logic) ((!input_AX_ALG_strb_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(input_AX_ALG_strb_V_0_state.read() != ap_const_lv2_1))[0];
}

void axi_algorithm::thread_input_AX_ALG_strb_V_0_vld_in() {
    input_AX_ALG_strb_V_0_vld_in = input_AX_ALG_TVALID.read();
}

void axi_algorithm::thread_input_AX_ALG_strb_V_0_vld_out() {
    input_AX_ALG_strb_V_0_vld_out = input_AX_ALG_strb_V_0_state.read()[0];
}

void axi_algorithm::thread_input_AX_ALG_user_V_0_ack_in() {
    input_AX_ALG_user_V_0_ack_in = input_AX_ALG_user_V_0_state.read()[1];
}

void axi_algorithm::thread_input_AX_ALG_user_V_0_ack_out() {
    input_AX_ALG_user_V_0_ack_out = buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TREADY.read();
}

void axi_algorithm::thread_input_AX_ALG_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_AX_ALG_user_V_0_sel.read())) {
        input_AX_ALG_user_V_0_data_out = input_AX_ALG_user_V_0_payload_B.read();
    } else {
        input_AX_ALG_user_V_0_data_out = input_AX_ALG_user_V_0_payload_A.read();
    }
}

void axi_algorithm::thread_input_AX_ALG_user_V_0_load_A() {
    input_AX_ALG_user_V_0_load_A = (input_AX_ALG_user_V_0_state_cmp_full.read() & ~input_AX_ALG_user_V_0_sel_wr.read());
}

void axi_algorithm::thread_input_AX_ALG_user_V_0_load_B() {
    input_AX_ALG_user_V_0_load_B = (input_AX_ALG_user_V_0_sel_wr.read() & input_AX_ALG_user_V_0_state_cmp_full.read());
}

void axi_algorithm::thread_input_AX_ALG_user_V_0_sel() {
    input_AX_ALG_user_V_0_sel = input_AX_ALG_user_V_0_sel_rd.read();
}

void axi_algorithm::thread_input_AX_ALG_user_V_0_state_cmp_full() {
    input_AX_ALG_user_V_0_state_cmp_full =  (sc_logic) ((!input_AX_ALG_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(input_AX_ALG_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void axi_algorithm::thread_input_AX_ALG_user_V_0_vld_in() {
    input_AX_ALG_user_V_0_vld_in = input_AX_ALG_TVALID.read();
}

void axi_algorithm::thread_input_AX_ALG_user_V_0_vld_out() {
    input_AX_ALG_user_V_0_vld_out = input_AX_ALG_user_V_0_state.read()[0];
}

void axi_algorithm::thread_output_AX_ALG_TDATA() {
    output_AX_ALG_TDATA = output_AX_ALG_data_V_1_data_out.read();
}

void axi_algorithm::thread_output_AX_ALG_TDEST() {
    output_AX_ALG_TDEST = output_AX_ALG_dest_V_1_data_out.read();
}

void axi_algorithm::thread_output_AX_ALG_TID() {
    output_AX_ALG_TID = output_AX_ALG_id_V_1_data_out.read();
}

void axi_algorithm::thread_output_AX_ALG_TKEEP() {
    output_AX_ALG_TKEEP = output_AX_ALG_keep_V_1_data_out.read();
}

void axi_algorithm::thread_output_AX_ALG_TLAST() {
    output_AX_ALG_TLAST = output_AX_ALG_last_V_1_data_out.read();
}

void axi_algorithm::thread_output_AX_ALG_TSTRB() {
    output_AX_ALG_TSTRB = output_AX_ALG_strb_V_1_data_out.read();
}

void axi_algorithm::thread_output_AX_ALG_TUSER() {
    output_AX_ALG_TUSER = output_AX_ALG_user_V_1_data_out.read();
}

void axi_algorithm::thread_output_AX_ALG_TVALID() {
    output_AX_ALG_TVALID = output_AX_ALG_dest_V_1_state.read()[0];
}

void axi_algorithm::thread_output_AX_ALG_data_V_1_ack_in() {
    output_AX_ALG_data_V_1_ack_in = output_AX_ALG_data_V_1_state.read()[1];
}

void axi_algorithm::thread_output_AX_ALG_data_V_1_ack_out() {
    output_AX_ALG_data_V_1_ack_out = output_AX_ALG_TREADY.read();
}

void axi_algorithm::thread_output_AX_ALG_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_data_V_1_sel.read())) {
        output_AX_ALG_data_V_1_data_out = output_AX_ALG_data_V_1_payload_B.read();
    } else {
        output_AX_ALG_data_V_1_data_out = output_AX_ALG_data_V_1_payload_A.read();
    }
}

void axi_algorithm::thread_output_AX_ALG_data_V_1_load_A() {
    output_AX_ALG_data_V_1_load_A = (output_AX_ALG_data_V_1_state_cmp_full.read() & ~output_AX_ALG_data_V_1_sel_wr.read());
}

void axi_algorithm::thread_output_AX_ALG_data_V_1_load_B() {
    output_AX_ALG_data_V_1_load_B = (output_AX_ALG_data_V_1_sel_wr.read() & output_AX_ALG_data_V_1_state_cmp_full.read());
}

void axi_algorithm::thread_output_AX_ALG_data_V_1_sel() {
    output_AX_ALG_data_V_1_sel = output_AX_ALG_data_V_1_sel_rd.read();
}

void axi_algorithm::thread_output_AX_ALG_data_V_1_state_cmp_full() {
    output_AX_ALG_data_V_1_state_cmp_full =  (sc_logic) ((!output_AX_ALG_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(output_AX_ALG_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void axi_algorithm::thread_output_AX_ALG_data_V_1_vld_in() {
    output_AX_ALG_data_V_1_vld_in = grp_write_data_fu_89_output_AX_ALG_TVALID.read();
}

void axi_algorithm::thread_output_AX_ALG_data_V_1_vld_out() {
    output_AX_ALG_data_V_1_vld_out = output_AX_ALG_data_V_1_state.read()[0];
}

void axi_algorithm::thread_output_AX_ALG_dest_V_1_ack_in() {
    output_AX_ALG_dest_V_1_ack_in = output_AX_ALG_dest_V_1_state.read()[1];
}

void axi_algorithm::thread_output_AX_ALG_dest_V_1_ack_out() {
    output_AX_ALG_dest_V_1_ack_out = output_AX_ALG_TREADY.read();
}

void axi_algorithm::thread_output_AX_ALG_dest_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_dest_V_1_sel.read())) {
        output_AX_ALG_dest_V_1_data_out = output_AX_ALG_dest_V_1_payload_B.read();
    } else {
        output_AX_ALG_dest_V_1_data_out = output_AX_ALG_dest_V_1_payload_A.read();
    }
}

void axi_algorithm::thread_output_AX_ALG_dest_V_1_load_A() {
    output_AX_ALG_dest_V_1_load_A = (output_AX_ALG_dest_V_1_state_cmp_full.read() & ~output_AX_ALG_dest_V_1_sel_wr.read());
}

void axi_algorithm::thread_output_AX_ALG_dest_V_1_load_B() {
    output_AX_ALG_dest_V_1_load_B = (output_AX_ALG_dest_V_1_sel_wr.read() & output_AX_ALG_dest_V_1_state_cmp_full.read());
}

void axi_algorithm::thread_output_AX_ALG_dest_V_1_sel() {
    output_AX_ALG_dest_V_1_sel = output_AX_ALG_dest_V_1_sel_rd.read();
}

void axi_algorithm::thread_output_AX_ALG_dest_V_1_state_cmp_full() {
    output_AX_ALG_dest_V_1_state_cmp_full =  (sc_logic) ((!output_AX_ALG_dest_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(output_AX_ALG_dest_V_1_state.read() != ap_const_lv2_1))[0];
}

void axi_algorithm::thread_output_AX_ALG_dest_V_1_vld_in() {
    output_AX_ALG_dest_V_1_vld_in = grp_write_data_fu_89_output_AX_ALG_TVALID.read();
}

void axi_algorithm::thread_output_AX_ALG_dest_V_1_vld_out() {
    output_AX_ALG_dest_V_1_vld_out = output_AX_ALG_dest_V_1_state.read()[0];
}

void axi_algorithm::thread_output_AX_ALG_id_V_1_ack_in() {
    output_AX_ALG_id_V_1_ack_in = output_AX_ALG_id_V_1_state.read()[1];
}

void axi_algorithm::thread_output_AX_ALG_id_V_1_ack_out() {
    output_AX_ALG_id_V_1_ack_out = output_AX_ALG_TREADY.read();
}

void axi_algorithm::thread_output_AX_ALG_id_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_id_V_1_sel.read())) {
        output_AX_ALG_id_V_1_data_out = output_AX_ALG_id_V_1_payload_B.read();
    } else {
        output_AX_ALG_id_V_1_data_out = output_AX_ALG_id_V_1_payload_A.read();
    }
}

void axi_algorithm::thread_output_AX_ALG_id_V_1_load_A() {
    output_AX_ALG_id_V_1_load_A = (output_AX_ALG_id_V_1_state_cmp_full.read() & ~output_AX_ALG_id_V_1_sel_wr.read());
}

void axi_algorithm::thread_output_AX_ALG_id_V_1_load_B() {
    output_AX_ALG_id_V_1_load_B = (output_AX_ALG_id_V_1_sel_wr.read() & output_AX_ALG_id_V_1_state_cmp_full.read());
}

void axi_algorithm::thread_output_AX_ALG_id_V_1_sel() {
    output_AX_ALG_id_V_1_sel = output_AX_ALG_id_V_1_sel_rd.read();
}

void axi_algorithm::thread_output_AX_ALG_id_V_1_state_cmp_full() {
    output_AX_ALG_id_V_1_state_cmp_full =  (sc_logic) ((!output_AX_ALG_id_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(output_AX_ALG_id_V_1_state.read() != ap_const_lv2_1))[0];
}

void axi_algorithm::thread_output_AX_ALG_id_V_1_vld_in() {
    output_AX_ALG_id_V_1_vld_in = grp_write_data_fu_89_output_AX_ALG_TVALID.read();
}

void axi_algorithm::thread_output_AX_ALG_id_V_1_vld_out() {
    output_AX_ALG_id_V_1_vld_out = output_AX_ALG_id_V_1_state.read()[0];
}

void axi_algorithm::thread_output_AX_ALG_keep_V_1_ack_in() {
    output_AX_ALG_keep_V_1_ack_in = output_AX_ALG_keep_V_1_state.read()[1];
}

void axi_algorithm::thread_output_AX_ALG_keep_V_1_ack_out() {
    output_AX_ALG_keep_V_1_ack_out = output_AX_ALG_TREADY.read();
}

void axi_algorithm::thread_output_AX_ALG_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_keep_V_1_sel.read())) {
        output_AX_ALG_keep_V_1_data_out = output_AX_ALG_keep_V_1_payload_B.read();
    } else {
        output_AX_ALG_keep_V_1_data_out = output_AX_ALG_keep_V_1_payload_A.read();
    }
}

void axi_algorithm::thread_output_AX_ALG_keep_V_1_load_A() {
    output_AX_ALG_keep_V_1_load_A = (output_AX_ALG_keep_V_1_state_cmp_full.read() & ~output_AX_ALG_keep_V_1_sel_wr.read());
}

void axi_algorithm::thread_output_AX_ALG_keep_V_1_load_B() {
    output_AX_ALG_keep_V_1_load_B = (output_AX_ALG_keep_V_1_sel_wr.read() & output_AX_ALG_keep_V_1_state_cmp_full.read());
}

void axi_algorithm::thread_output_AX_ALG_keep_V_1_sel() {
    output_AX_ALG_keep_V_1_sel = output_AX_ALG_keep_V_1_sel_rd.read();
}

void axi_algorithm::thread_output_AX_ALG_keep_V_1_state_cmp_full() {
    output_AX_ALG_keep_V_1_state_cmp_full =  (sc_logic) ((!output_AX_ALG_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(output_AX_ALG_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void axi_algorithm::thread_output_AX_ALG_keep_V_1_vld_in() {
    output_AX_ALG_keep_V_1_vld_in = grp_write_data_fu_89_output_AX_ALG_TVALID.read();
}

void axi_algorithm::thread_output_AX_ALG_keep_V_1_vld_out() {
    output_AX_ALG_keep_V_1_vld_out = output_AX_ALG_keep_V_1_state.read()[0];
}

void axi_algorithm::thread_output_AX_ALG_last_V_1_ack_in() {
    output_AX_ALG_last_V_1_ack_in = output_AX_ALG_last_V_1_state.read()[1];
}

void axi_algorithm::thread_output_AX_ALG_last_V_1_ack_out() {
    output_AX_ALG_last_V_1_ack_out = output_AX_ALG_TREADY.read();
}

void axi_algorithm::thread_output_AX_ALG_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_last_V_1_sel.read())) {
        output_AX_ALG_last_V_1_data_out = output_AX_ALG_last_V_1_payload_B.read();
    } else {
        output_AX_ALG_last_V_1_data_out = output_AX_ALG_last_V_1_payload_A.read();
    }
}

void axi_algorithm::thread_output_AX_ALG_last_V_1_load_A() {
    output_AX_ALG_last_V_1_load_A = (output_AX_ALG_last_V_1_state_cmp_full.read() & ~output_AX_ALG_last_V_1_sel_wr.read());
}

void axi_algorithm::thread_output_AX_ALG_last_V_1_load_B() {
    output_AX_ALG_last_V_1_load_B = (output_AX_ALG_last_V_1_sel_wr.read() & output_AX_ALG_last_V_1_state_cmp_full.read());
}

void axi_algorithm::thread_output_AX_ALG_last_V_1_sel() {
    output_AX_ALG_last_V_1_sel = output_AX_ALG_last_V_1_sel_rd.read();
}

void axi_algorithm::thread_output_AX_ALG_last_V_1_state_cmp_full() {
    output_AX_ALG_last_V_1_state_cmp_full =  (sc_logic) ((!output_AX_ALG_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(output_AX_ALG_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void axi_algorithm::thread_output_AX_ALG_last_V_1_vld_in() {
    output_AX_ALG_last_V_1_vld_in = grp_write_data_fu_89_output_AX_ALG_TVALID.read();
}

void axi_algorithm::thread_output_AX_ALG_last_V_1_vld_out() {
    output_AX_ALG_last_V_1_vld_out = output_AX_ALG_last_V_1_state.read()[0];
}

void axi_algorithm::thread_output_AX_ALG_strb_V_1_ack_in() {
    output_AX_ALG_strb_V_1_ack_in = output_AX_ALG_strb_V_1_state.read()[1];
}

void axi_algorithm::thread_output_AX_ALG_strb_V_1_ack_out() {
    output_AX_ALG_strb_V_1_ack_out = output_AX_ALG_TREADY.read();
}

void axi_algorithm::thread_output_AX_ALG_strb_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_strb_V_1_sel.read())) {
        output_AX_ALG_strb_V_1_data_out = output_AX_ALG_strb_V_1_payload_B.read();
    } else {
        output_AX_ALG_strb_V_1_data_out = output_AX_ALG_strb_V_1_payload_A.read();
    }
}

void axi_algorithm::thread_output_AX_ALG_strb_V_1_load_A() {
    output_AX_ALG_strb_V_1_load_A = (output_AX_ALG_strb_V_1_state_cmp_full.read() & ~output_AX_ALG_strb_V_1_sel_wr.read());
}

void axi_algorithm::thread_output_AX_ALG_strb_V_1_load_B() {
    output_AX_ALG_strb_V_1_load_B = (output_AX_ALG_strb_V_1_sel_wr.read() & output_AX_ALG_strb_V_1_state_cmp_full.read());
}

void axi_algorithm::thread_output_AX_ALG_strb_V_1_sel() {
    output_AX_ALG_strb_V_1_sel = output_AX_ALG_strb_V_1_sel_rd.read();
}

void axi_algorithm::thread_output_AX_ALG_strb_V_1_state_cmp_full() {
    output_AX_ALG_strb_V_1_state_cmp_full =  (sc_logic) ((!output_AX_ALG_strb_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(output_AX_ALG_strb_V_1_state.read() != ap_const_lv2_1))[0];
}

void axi_algorithm::thread_output_AX_ALG_strb_V_1_vld_in() {
    output_AX_ALG_strb_V_1_vld_in = grp_write_data_fu_89_output_AX_ALG_TVALID.read();
}

void axi_algorithm::thread_output_AX_ALG_strb_V_1_vld_out() {
    output_AX_ALG_strb_V_1_vld_out = output_AX_ALG_strb_V_1_state.read()[0];
}

void axi_algorithm::thread_output_AX_ALG_user_V_1_ack_in() {
    output_AX_ALG_user_V_1_ack_in = output_AX_ALG_user_V_1_state.read()[1];
}

void axi_algorithm::thread_output_AX_ALG_user_V_1_ack_out() {
    output_AX_ALG_user_V_1_ack_out = output_AX_ALG_TREADY.read();
}

void axi_algorithm::thread_output_AX_ALG_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_AX_ALG_user_V_1_sel.read())) {
        output_AX_ALG_user_V_1_data_out = output_AX_ALG_user_V_1_payload_B.read();
    } else {
        output_AX_ALG_user_V_1_data_out = output_AX_ALG_user_V_1_payload_A.read();
    }
}

void axi_algorithm::thread_output_AX_ALG_user_V_1_load_A() {
    output_AX_ALG_user_V_1_load_A = (output_AX_ALG_user_V_1_state_cmp_full.read() & ~output_AX_ALG_user_V_1_sel_wr.read());
}

void axi_algorithm::thread_output_AX_ALG_user_V_1_load_B() {
    output_AX_ALG_user_V_1_load_B = (output_AX_ALG_user_V_1_sel_wr.read() & output_AX_ALG_user_V_1_state_cmp_full.read());
}

void axi_algorithm::thread_output_AX_ALG_user_V_1_sel() {
    output_AX_ALG_user_V_1_sel = output_AX_ALG_user_V_1_sel_rd.read();
}

void axi_algorithm::thread_output_AX_ALG_user_V_1_state_cmp_full() {
    output_AX_ALG_user_V_1_state_cmp_full =  (sc_logic) ((!output_AX_ALG_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(output_AX_ALG_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void axi_algorithm::thread_output_AX_ALG_user_V_1_vld_in() {
    output_AX_ALG_user_V_1_vld_in = grp_write_data_fu_89_output_AX_ALG_TVALID.read();
}

void axi_algorithm::thread_output_AX_ALG_user_V_1_vld_out() {
    output_AX_ALG_user_V_1_vld_out = output_AX_ALG_user_V_1_state.read()[0];
}

void axi_algorithm::thread_p_Val2_1_fu_127_p1() {
    p_Val2_1_fu_127_p1 = buf_Tj_in_0_V_read_data_fu_109_ap_return.read().range(24-1, 0);
}

void axi_algorithm::thread_tmp_s_fu_132_p2() {
    tmp_s_fu_132_p2 = (!full_fifo.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(full_fifo.read() == ap_const_lv32_0);
}

void axi_algorithm::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(buf_Tj_in_0_V_read_data_fu_109_input_AX_ALG_TDATA_blk_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(grp_sweep_algorithm_DECM_fu_76_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_132_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(grp_sweep_algorithm_DECM_fu_76_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_fu_132_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_write_data_fu_89_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_AX_ALG_dest_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void axi_algorithm::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TDATA\" :  \"" << input_AX_ALG_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TVALID\" :  \"" << input_AX_ALG_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"input_AX_ALG_TREADY\" :  \"" << input_AX_ALG_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TKEEP\" :  \"" << input_AX_ALG_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TSTRB\" :  \"" << input_AX_ALG_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TUSER\" :  \"" << input_AX_ALG_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TLAST\" :  \"" << input_AX_ALG_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TID\" :  \"" << input_AX_ALG_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TDEST\" :  \"" << input_AX_ALG_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TDATA\" :  \"" << output_AX_ALG_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TVALID\" :  \"" << output_AX_ALG_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"output_AX_ALG_TREADY\" :  \"" << output_AX_ALG_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TKEEP\" :  \"" << output_AX_ALG_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TSTRB\" :  \"" << output_AX_ALG_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TUSER\" :  \"" << output_AX_ALG_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TLAST\" :  \"" << output_AX_ALG_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TID\" :  \"" << output_AX_ALG_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TDEST\" :  \"" << output_AX_ALG_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"full_fifo\" :  \"" << full_fifo.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

