// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sweep_algorithm_DECM (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        currentGroupX_OUT_V_address0,
        currentGroupX_OUT_V_ce0,
        currentGroupX_OUT_V_we0,
        currentGroupX_OUT_V_d0,
        currentGroupX_OUT_V_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_pp0_stage0 = 13'd2;
parameter    ap_ST_fsm_state4 = 13'd4;
parameter    ap_ST_fsm_pp1_stage0 = 13'd8;
parameter    ap_ST_fsm_pp1_stage1 = 13'd16;
parameter    ap_ST_fsm_pp1_stage2 = 13'd32;
parameter    ap_ST_fsm_pp1_stage3 = 13'd64;
parameter    ap_ST_fsm_state12 = 13'd128;
parameter    ap_ST_fsm_state13 = 13'd256;
parameter    ap_ST_fsm_state14 = 13'd512;
parameter    ap_ST_fsm_state15 = 13'd1024;
parameter    ap_ST_fsm_state16 = 13'd2048;
parameter    ap_ST_fsm_state17 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] p_read;
output  [1:0] currentGroupX_OUT_V_address0;
output   currentGroupX_OUT_V_ce0;
output   currentGroupX_OUT_V_we0;
output  [31:0] currentGroupX_OUT_V_d0;
input  [31:0] currentGroupX_OUT_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] currentGroupX_OUT_V_address0;
reg currentGroupX_OUT_V_ce0;
reg currentGroupX_OUT_V_we0;
reg[31:0] currentGroupX_OUT_V_d0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] aux_array_V_address0;
reg    aux_array_V_ce0;
reg    aux_array_V_we0;
wire   [23:0] aux_array_V_q0;
reg   [11:0] aux_array_V_address1;
reg    aux_array_V_ce1;
reg    aux_array_V_we1;
reg   [23:0] aux_array_V_d1;
wire   [23:0] aux_array_V_q1;
reg   [9:0] sum_V_address0;
reg    sum_V_ce0;
reg    sum_V_we0;
reg   [41:0] sum_V_d0;
wire   [41:0] sum_V_q0;
reg   [31:0] vector_V_0;
reg   [31:0] derivada_V_0;
reg   [31:0] contador;
reg   [11:0] i_i_reg_216;
reg   [10:0] i_1_i_reg_228;
reg    ap_block_state1;
wire   [0:0] tmp_5_i_fu_272_p2;
reg   [0:0] tmp_5_i_reg_717;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_flag00011001;
wire   [11:0] i_fu_278_p2;
reg   [11:0] i_reg_721;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_7_i_fu_319_p2;
reg   [0:0] tmp_7_i_reg_768;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_flag00011001;
wire   [10:0] i_2_fu_325_p2;
reg   [10:0] i_2_reg_772;
reg    ap_enable_reg_pp1_iter0;
reg   [9:0] sum_V_addr_reg_783;
wire   [0:0] reset_assign_fu_351_p2;
reg   [0:0] reset_assign_reg_788;
reg   [0:0] ap_reg_pp1_iter1_reset_assign_reg_788;
wire   [15:0] p_Val2_2_i_fu_365_p2;
reg   [15:0] p_Val2_2_i_reg_795;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state6_pp1_stage1_iter0;
wire    ap_block_state10_pp1_stage1_iter1;
wire    ap_block_pp1_stage1_flag00011001;
wire   [15:0] p_Val2_6_i_fu_386_p2;
reg   [15:0] p_Val2_6_i_reg_805;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state7_pp1_stage2_iter0;
wire    ap_block_state11_pp1_stage2_iter1;
wire    ap_block_pp1_stage2_flag00011001;
wire  signed [41:0] grp_fu_695_p3;
reg  signed [41:0] p_Val2_i_reg_810;
wire   [2:0] tmp_1_fu_399_p1;
reg   [2:0] tmp_1_reg_815;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_state8_pp1_stage3_iter0;
wire    ap_block_pp1_stage3_flag00011001;
wire   [0:0] tmp_14_i_fu_415_p2;
reg   [0:0] tmp_14_i_reg_821;
wire   [31:0] p_Val2_i1_fu_457_p2;
reg   [31:0] p_Val2_i1_reg_825;
reg   [1:0] currentGroupX_OUT_V_s_reg_831;
wire   [31:0] cont32_fu_542_p2;
reg   [31:0] cont32_reg_836;
reg   [1:0] currentGroupX_OUT_V_1_reg_842;
wire   [31:0] tmp_8_i_fu_643_p2;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_9_i_fu_649_p2;
wire   [10:0] i_3_fu_661_p2;
wire    ap_CS_fsm_state13;
wire   [11:0] i_4_fu_678_p2;
wire    ap_CS_fsm_state15;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state4;
wire    ap_block_pp1_stage0_flag00011011;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage3_flag00011011;
wire    ap_block_pp1_stage2_flag00011011;
reg   [11:0] i_i_phi_fu_220_p4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [10:0] i_1_i_phi_fu_232_p4;
wire    ap_block_pp1_stage0_flag00000000;
reg   [10:0] i_2_i_reg_239;
wire   [0:0] tmp_15_i_fu_655_p2;
reg   [11:0] i_3_i_reg_250;
wire   [0:0] tmp_19_i_fu_672_p2;
wire    ap_CS_fsm_state14;
reg   [31:0] contador_new_i_reg_261;
wire    ap_CS_fsm_state16;
wire   [31:0] i_4_cast_i_fu_284_p1;
wire   [31:0] i_cast25_i_fu_289_p1;
wire   [31:0] tmp_cast_i_fu_346_p1;
wire   [31:0] i_1_cast24_i_fu_331_p1;
wire   [31:0] i_5_cast_i_fu_371_p1;
wire    ap_block_pp1_stage1_flag00000000;
wire    ap_block_pp1_stage3_flag00000000;
wire   [31:0] contNuevoSuma_1_i_fu_562_p3;
wire   [31:0] i_2_cast23_i_fu_667_p1;
wire   [31:0] i_3_cast22_i_fu_684_p1;
wire   [31:0] valorAuxVinout_0_V_fu_406_p4;
wire    ap_CS_fsm_state17;
reg   [31:0] contNuevoSuma_1_fu_98;
wire   [31:0] contNuevoSuma_fu_603_p2;
reg   [31:0] contNuevo_fu_102;
wire   [31:0] phitmp_i_fu_433_p3;
reg   [31:0] ind_i_fu_106;
wire   [31:0] p_ind_i_cast_fu_599_p1;
reg   [31:0] cont_i_fu_110;
wire   [31:0] p_i_fu_585_p3;
reg   [31:0] p_Val2_3_fu_114;
wire   [31:0] indPar_fu_548_p2;
wire  signed [41:0] grp_fu_703_p3;
reg   [31:0] p_Val2_6_fu_531_p4;
wire   [31:0] p_Val2_10_fu_634_p1;
wire    ap_block_pp1_stage2_flag00000000;
wire   [11:0] i_1_cast_i_fu_336_p1;
wire   [11:0] tmp_i_11_fu_340_p2;
wire   [15:0] tmp_2_fu_357_p1;
wire   [15:0] tmp_3_fu_361_p1;
wire   [15:0] tmp_4_fu_378_p1;
wire   [15:0] tmp_5_fu_382_p1;
wire   [0:0] tmp_18_i_fu_421_p2;
wire   [31:0] contNuevo_0_op_i_fu_427_p2;
wire   [31:0] p_Val2_5_fu_450_p3;
wire   [0:0] tmp_6_fu_484_p3;
wire   [0:0] not_reset_i_fu_492_p2;
wire   [0:0] tmp_1_i4_fu_497_p2;
wire   [0:0] tmp_3_i5_fu_502_p2;
wire   [0:0] tmp6_fu_514_p2;
wire   [0:0] tmp_fu_508_p2;
wire   [0:0] minimoX_0_fu_520_p2;
wire   [0:0] tmp_17_i_fu_575_p2;
wire   [2:0] ind16_cast_fu_580_p2;
wire   [2:0] p_ind_i_fu_592_p3;
wire   [30:0] p_Val2_7_fu_624_p4;
wire  signed [15:0] grp_fu_695_p0;
wire  signed [31:0] OP1_V_fu_375_p1;
wire  signed [15:0] grp_fu_695_p1;
wire  signed [15:0] grp_fu_703_p0;
wire  signed [31:0] OP1_V_1_fu_403_p1;
wire  signed [15:0] grp_fu_703_p1;
reg   [12:0] ap_NS_fsm;
wire    ap_block_pp1_stage1_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
#0 vector_V_0 = 32'd0;
#0 derivada_V_0 = 32'd0;
#0 contador = 32'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

sweep_algorithm_Dbkb #(
    .DataWidth( 24 ),
    .AddressRange( 2049 ),
    .AddressWidth( 12 ))
aux_array_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(aux_array_V_address0),
    .ce0(aux_array_V_ce0),
    .we0(aux_array_V_we0),
    .d0(p_read),
    .q0(aux_array_V_q0),
    .address1(aux_array_V_address1),
    .ce1(aux_array_V_ce1),
    .we1(aux_array_V_we1),
    .d1(aux_array_V_d1),
    .q1(aux_array_V_q1)
);

sweep_algorithm_Dcud #(
    .DataWidth( 42 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
sum_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sum_V_address0),
    .ce0(sum_V_ce0),
    .we0(sum_V_we0),
    .d0(sum_V_d0),
    .q0(sum_V_q0)
);

axi_algorithm_macdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
axi_algorithm_macdEe_U10(
    .din0(grp_fu_695_p0),
    .din1(grp_fu_695_p1),
    .din2(sum_V_q0),
    .dout(grp_fu_695_p3)
);

axi_algorithm_maceOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
axi_algorithm_maceOg_U11(
    .din0(grp_fu_703_p0),
    .din1(grp_fu_703_p1),
    .din2(p_Val2_i_reg_810),
    .dout(grp_fu_703_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state5) & (((1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_flag00011011 == 1'b0))))) begin
            ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state5 ^ 1'b1);
        end else if ((((1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_flag00011001 == 1'b0) & (tmp_14_i_reg_821 == 1'd1) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        contNuevoSuma_1_fu_98 <= contNuevoSuma_fu_603_p2;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == tmp_14_i_reg_821))) begin
        contNuevoSuma_1_fu_98 <= contNuevoSuma_1_i_fu_562_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        contNuevoSuma_1_fu_98 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'd0 == tmp_7_i_reg_768) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_flag00011001 == 1'b0) & (tmp_14_i_fu_415_p2 == 1'd1))) begin
        contNuevo_fu_102 <= 32'd1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'd0 == tmp_7_i_reg_768) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_flag00011001 == 1'b0) & (1'd0 == tmp_14_i_fu_415_p2))) begin
        contNuevo_fu_102 <= phitmp_i_fu_433_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        contNuevo_fu_102 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_flag00011001 == 1'b0) & (tmp_14_i_reg_821 == 1'd1) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        cont_i_fu_110 <= p_i_fu_585_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cont_i_fu_110 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        contador_new_i_reg_261 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == tmp_9_i_fu_649_p2))) begin
        contador_new_i_reg_261 <= tmp_8_i_fu_643_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_7_i_reg_768) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        i_1_i_reg_228 <= i_2_reg_772;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_i_reg_228 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_9_i_fu_649_p2))) begin
        i_2_i_reg_239 <= 11'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == tmp_15_i_fu_655_p2))) begin
        i_2_i_reg_239 <= i_3_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_3_i_reg_250 <= 12'd0;
    end else if (((1'b1 == ap_CS_fsm_state15) & (1'd0 == tmp_19_i_fu_672_p2))) begin
        i_3_i_reg_250 <= i_4_fu_678_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_5_i_reg_717 == 1'd0))) begin
        i_i_reg_216 <= i_reg_721;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        i_i_reg_216 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_flag00011001 == 1'b0) & (tmp_14_i_reg_821 == 1'd1) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
                ind_i_fu_106[2 : 0] <= p_ind_i_cast_fu_599_p1[2 : 0];
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
                ind_i_fu_106[0] <= 1'b0;
        ind_i_fu_106[1] <= 1'b0;
        ind_i_fu_106[2] <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (tmp_14_i_reg_821 == 1'd1) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        p_Val2_3_fu_114 <= indPar_fu_548_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_3_fu_114 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp1_iter1_reset_assign_reg_788 <= reset_assign_reg_788;
        tmp_7_i_reg_768 <= tmp_7_i_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (tmp_14_i_reg_821 == 1'd1))) begin
        cont32_reg_836 <= cont32_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        contador <= contador_new_i_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_flag00011001 == 1'b0) & (tmp_14_i_reg_821 == 1'd1))) begin
        currentGroupX_OUT_V_1_reg_842 <= contNuevoSuma_1_i_fu_562_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_7_i_reg_768) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_flag00011001 == 1'b0) & (tmp_14_i_fu_415_p2 == 1'd1))) begin
        currentGroupX_OUT_V_s_reg_831 <= ind_i_fu_106;
        p_Val2_i1_reg_825 <= p_Val2_i1_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (tmp_14_i_reg_821 == 1'd1) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        derivada_V_0 <= p_Val2_i1_reg_825;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        i_2_reg_772 <= i_2_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        i_reg_721 <= i_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_flag00011001 == 1'b0) & (1'd0 == tmp_7_i_reg_768))) begin
        p_Val2_2_i_reg_795 <= p_Val2_2_i_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_7_i_reg_768) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_flag00011001 == 1'b0))) begin
        p_Val2_6_i_reg_805 <= p_Val2_6_i_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'd0 == tmp_7_i_reg_768) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_flag00011001 == 1'b0))) begin
        p_Val2_i_reg_810 <= grp_fu_695_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_7_i_fu_319_p2))) begin
        reset_assign_reg_788 <= reset_assign_fu_351_p2;
        sum_V_addr_reg_783 <= i_1_cast24_i_fu_331_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_7_i_reg_768) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_flag00011001 == 1'b0))) begin
        tmp_14_i_reg_821 <= tmp_14_i_fu_415_p2;
        tmp_1_reg_815 <= tmp_1_fu_399_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp_5_i_reg_717 <= tmp_5_i_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'd0 == tmp_7_i_reg_768) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_flag00011001 == 1'b0) & (tmp_14_i_fu_415_p2 == 1'd1))) begin
        vector_V_0 <= {{grp_fu_703_p3[41:10]}};
    end
end

always @ (*) begin
    if ((tmp_5_i_fu_272_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_7_i_fu_319_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_flag00000000 == 1'b0))) begin
        aux_array_V_address0 = i_5_cast_i_fu_371_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        aux_array_V_address0 = tmp_cast_i_fu_346_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        aux_array_V_address0 = 12'd2048;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        aux_array_V_address0 = i_4_cast_i_fu_284_p1;
    end else begin
        aux_array_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        aux_array_V_address1 = i_3_cast22_i_fu_684_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_flag00000000 == 1'b0))) begin
        aux_array_V_address1 = 12'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        aux_array_V_address1 = 12'd1024;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        aux_array_V_address1 = i_cast25_i_fu_289_p1;
    end else begin
        aux_array_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0)) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_flag00011001 == 1'b0)))) begin
        aux_array_V_ce0 = 1'b1;
    end else begin
        aux_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0)) | (1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_flag00011001 == 1'b0)))) begin
        aux_array_V_ce1 = 1'b1;
    end else begin
        aux_array_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        aux_array_V_d1 = 24'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        aux_array_V_d1 = aux_array_V_q0;
    end else begin
        aux_array_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        aux_array_V_we0 = 1'b1;
    end else begin
        aux_array_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_5_i_reg_717 == 1'd0)) | ((1'b1 == ap_CS_fsm_state15) & (1'd0 == tmp_19_i_fu_672_p2)))) begin
        aux_array_V_we1 = 1'b1;
    end else begin
        aux_array_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage2_flag00000000 == 1'b0))) begin
        currentGroupX_OUT_V_address0 = currentGroupX_OUT_V_1_reg_842;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage1_flag00000000 == 1'b0))) begin
        currentGroupX_OUT_V_address0 = contNuevoSuma_1_i_fu_562_p3;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        currentGroupX_OUT_V_address0 = currentGroupX_OUT_V_s_reg_831;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_flag00000000 == 1'b0))) begin
        currentGroupX_OUT_V_address0 = ind_i_fu_106;
    end else begin
        currentGroupX_OUT_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1)))) begin
        currentGroupX_OUT_V_ce0 = 1'b1;
    end else begin
        currentGroupX_OUT_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp1_iter1)) begin
        if (((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_flag00000000 == 1'b0))) begin
            currentGroupX_OUT_V_d0 = p_Val2_10_fu_634_p1;
        end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
            currentGroupX_OUT_V_d0 = p_Val2_6_fu_531_p4;
        end else begin
            currentGroupX_OUT_V_d0 = 'bx;
        end
    end else begin
        currentGroupX_OUT_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (tmp_14_i_reg_821 == 1'd1) & (1'b1 == ap_enable_reg_pp1_iter1)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_flag00011001 == 1'b0) & (tmp_14_i_reg_821 == 1'd1) & (1'b1 == ap_enable_reg_pp1_iter1)))) begin
        currentGroupX_OUT_V_we0 = 1'b1;
    end else begin
        currentGroupX_OUT_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'd0 == tmp_7_i_reg_768) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        i_1_i_phi_fu_232_p4 = i_2_reg_772;
    end else begin
        i_1_i_phi_fu_232_p4 = i_1_i_reg_228;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_5_i_reg_717 == 1'd0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        i_i_phi_fu_220_p4 = i_reg_721;
    end else begin
        i_i_phi_fu_220_p4 = i_i_reg_216;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sum_V_address0 = i_2_cast23_i_fu_667_p1;
    end else if ((((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_flag00000000 == 1'b0)))) begin
        sum_V_address0 = sum_V_addr_reg_783;
    end else begin
        sum_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_flag00011001 == 1'b0)))) begin
        sum_V_ce0 = 1'b1;
    end else begin
        sum_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sum_V_d0 = 42'd0;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_flag00000000 == 1'b0))) begin
        sum_V_d0 = grp_fu_703_p3;
    end else begin
        sum_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (1'd0 == tmp_15_i_fu_655_p2)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'd0 == tmp_7_i_reg_768) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_flag00011001 == 1'b0)))) begin
        sum_V_we0 = 1'b1;
    end else begin
        sum_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_5_i_fu_272_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_5_i_fu_272_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (((ap_block_pp1_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (tmp_7_i_fu_319_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (tmp_7_i_fu_319_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((ap_block_pp1_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if (((ap_block_pp1_stage2_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((ap_block_pp1_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_9_i_fu_649_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == tmp_15_i_fu_655_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (1'd0 == tmp_19_i_fu_672_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_1_fu_403_p1 = $signed(p_Val2_6_i_reg_805);

assign OP1_V_fu_375_p1 = $signed(p_Val2_2_i_reg_795);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_flag00011011 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign cont32_fu_542_p2 = (cont_i_fu_110 + 32'd1);

assign contNuevoSuma_1_i_fu_562_p3 = ((ap_reg_pp1_iter1_reset_assign_reg_788[0:0] === 1'b1) ? 32'd0 : contNuevoSuma_1_fu_98);

assign contNuevoSuma_fu_603_p2 = (contNuevoSuma_1_i_fu_562_p3 + 32'd1);

assign contNuevo_0_op_i_fu_427_p2 = (contNuevo_fu_102 + 32'd1);

assign grp_fu_695_p0 = OP1_V_fu_375_p1;

assign grp_fu_695_p1 = OP1_V_fu_375_p1;

assign grp_fu_703_p0 = OP1_V_1_fu_403_p1;

assign grp_fu_703_p1 = OP1_V_1_fu_403_p1;

assign i_1_cast24_i_fu_331_p1 = i_1_i_phi_fu_232_p4;

assign i_1_cast_i_fu_336_p1 = i_1_i_phi_fu_232_p4;

assign i_2_cast23_i_fu_667_p1 = i_2_i_reg_239;

assign i_2_fu_325_p2 = (i_1_i_phi_fu_232_p4 + 11'd1);

assign i_3_cast22_i_fu_684_p1 = i_3_i_reg_250;

assign i_3_fu_661_p2 = (i_2_i_reg_239 + 11'd1);

assign i_4_cast_i_fu_284_p1 = i_fu_278_p2;

assign i_4_fu_678_p2 = (i_3_i_reg_250 + 12'd1);

assign i_5_cast_i_fu_371_p1 = i_2_reg_772;

assign i_cast25_i_fu_289_p1 = i_i_reg_216;

assign i_fu_278_p2 = (i_i_phi_fu_220_p4 + 12'd1);

assign ind16_cast_fu_580_p2 = (tmp_1_reg_815 + 3'd1);

assign indPar_fu_548_p2 = (p_Val2_3_fu_114 + 32'd1);

assign minimoX_0_fu_520_p2 = (tmp6_fu_514_p2 & tmp_fu_508_p2);

assign not_reset_i_fu_492_p2 = (reset_assign_reg_788 ^ 1'd1);

assign p_Val2_10_fu_634_p1 = p_Val2_7_fu_624_p4;

assign p_Val2_2_i_fu_365_p2 = (tmp_2_fu_357_p1 - tmp_3_fu_361_p1);

assign p_Val2_5_fu_450_p3 = ((reset_assign_reg_788[0:0] === 1'b1) ? 32'd0 : vector_V_0);

always @ (*) begin
    p_Val2_6_fu_531_p4 = currentGroupX_OUT_V_q0;
    p_Val2_6_fu_531_p4[cont_i_fu_110] = |(minimoX_0_fu_520_p2);
end

assign p_Val2_6_i_fu_386_p2 = (tmp_4_fu_378_p1 - tmp_5_fu_382_p1);

assign p_Val2_7_fu_624_p4 = {{currentGroupX_OUT_V_q0[31:1]}};

assign p_Val2_i1_fu_457_p2 = (valorAuxVinout_0_V_fu_406_p4 - p_Val2_5_fu_450_p3);

assign p_i_fu_585_p3 = ((tmp_17_i_fu_575_p2[0:0] === 1'b1) ? 32'd0 : cont32_reg_836);

assign p_ind_i_cast_fu_599_p1 = p_ind_i_fu_592_p3;

assign p_ind_i_fu_592_p3 = ((tmp_17_i_fu_575_p2[0:0] === 1'b1) ? ind16_cast_fu_580_p2 : tmp_1_reg_815);

assign phitmp_i_fu_433_p3 = ((tmp_18_i_fu_421_p2[0:0] === 1'b1) ? 32'd1 : contNuevo_0_op_i_fu_427_p2);

assign reset_assign_fu_351_p2 = ((i_1_i_phi_fu_232_p4 == 11'd0) ? 1'b1 : 1'b0);

assign tmp6_fu_514_p2 = (tmp_1_i4_fu_497_p2 & tmp_3_i5_fu_502_p2);

assign tmp_14_i_fu_415_p2 = ((contNuevo_fu_102 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_15_i_fu_655_p2 = ((i_2_i_reg_239 == 11'd1024) ? 1'b1 : 1'b0);

assign tmp_17_i_fu_575_p2 = ((cont32_reg_836 == 32'd32) ? 1'b1 : 1'b0);

assign tmp_18_i_fu_421_p2 = ((contNuevo_fu_102 == 32'd7) ? 1'b1 : 1'b0);

assign tmp_19_i_fu_672_p2 = ((i_3_i_reg_250 == 12'd2049) ? 1'b1 : 1'b0);

assign tmp_1_fu_399_p1 = ind_i_fu_106[2:0];

assign tmp_1_i4_fu_497_p2 = (($signed(p_Val2_i1_reg_825) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_2_fu_357_p1 = aux_array_V_q1[15:0];

assign tmp_3_fu_361_p1 = aux_array_V_q0[15:0];

assign tmp_3_i5_fu_502_p2 = (($signed(p_Val2_3_fu_114) > $signed(32'd2)) ? 1'b1 : 1'b0);

assign tmp_4_fu_378_p1 = aux_array_V_q1[15:0];

assign tmp_5_fu_382_p1 = aux_array_V_q0[15:0];

assign tmp_5_i_fu_272_p2 = ((i_i_phi_fu_220_p4 == 12'd2048) ? 1'b1 : 1'b0);

assign tmp_6_fu_484_p3 = derivada_V_0[32'd31];

assign tmp_7_i_fu_319_p2 = ((i_1_i_phi_fu_232_p4 == 11'd1024) ? 1'b1 : 1'b0);

assign tmp_8_i_fu_643_p2 = (contador + 32'd1);

assign tmp_9_i_fu_649_p2 = ((tmp_8_i_fu_643_p2 == 32'd2049) ? 1'b1 : 1'b0);

assign tmp_cast_i_fu_346_p1 = tmp_i_11_fu_340_p2;

assign tmp_fu_508_p2 = (tmp_6_fu_484_p3 & not_reset_i_fu_492_p2);

assign tmp_i_11_fu_340_p2 = (12'd1025 + i_1_cast_i_fu_336_p1);

assign valorAuxVinout_0_V_fu_406_p4 = {{grp_fu_703_p3[41:10]}};

always @ (posedge ap_clk) begin
    ind_i_fu_106[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //sweep_algorithm_DECM
