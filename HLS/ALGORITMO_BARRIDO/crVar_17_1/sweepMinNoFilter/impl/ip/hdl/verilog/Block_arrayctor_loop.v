// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_arrayctor_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        full_fifo_dout,
        full_fifo_empty_n,
        full_fifo_read,
        buf_DISTANCEX_out_V_address0,
        buf_DISTANCEX_out_V_ce0,
        buf_DISTANCEX_out_V_q0,
        output_AX_ALG_TDATA,
        output_AX_ALG_TVALID,
        output_AX_ALG_TREADY,
        output_AX_ALG_TKEEP,
        output_AX_ALG_TSTRB,
        output_AX_ALG_TUSER,
        output_AX_ALG_TLAST,
        output_AX_ALG_TID,
        output_AX_ALG_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] full_fifo_dout;
input   full_fifo_empty_n;
output   full_fifo_read;
output  [1:0] buf_DISTANCEX_out_V_address0;
output   buf_DISTANCEX_out_V_ce0;
input  [31:0] buf_DISTANCEX_out_V_q0;
output  [31:0] output_AX_ALG_TDATA;
output   output_AX_ALG_TVALID;
input   output_AX_ALG_TREADY;
output  [3:0] output_AX_ALG_TKEEP;
output  [3:0] output_AX_ALG_TSTRB;
output  [3:0] output_AX_ALG_TUSER;
output  [0:0] output_AX_ALG_TLAST;
output  [4:0] output_AX_ALG_TID;
output  [4:0] output_AX_ALG_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg full_fifo_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] output_AX_ALG_data_V_1_data_out;
wire    output_AX_ALG_data_V_1_vld_in;
wire    output_AX_ALG_data_V_1_vld_out;
wire    output_AX_ALG_data_V_1_ack_in;
wire    output_AX_ALG_data_V_1_ack_out;
reg   [31:0] output_AX_ALG_data_V_1_payload_A;
reg   [31:0] output_AX_ALG_data_V_1_payload_B;
reg    output_AX_ALG_data_V_1_sel_rd;
reg    output_AX_ALG_data_V_1_sel_wr;
wire    output_AX_ALG_data_V_1_sel;
wire    output_AX_ALG_data_V_1_load_A;
wire    output_AX_ALG_data_V_1_load_B;
reg   [1:0] output_AX_ALG_data_V_1_state;
wire    output_AX_ALG_data_V_1_state_cmp_full;
reg   [3:0] output_AX_ALG_keep_V_1_data_out;
wire    output_AX_ALG_keep_V_1_vld_in;
wire    output_AX_ALG_keep_V_1_vld_out;
wire    output_AX_ALG_keep_V_1_ack_in;
wire    output_AX_ALG_keep_V_1_ack_out;
reg   [3:0] output_AX_ALG_keep_V_1_payload_A;
reg   [3:0] output_AX_ALG_keep_V_1_payload_B;
reg    output_AX_ALG_keep_V_1_sel_rd;
reg    output_AX_ALG_keep_V_1_sel_wr;
wire    output_AX_ALG_keep_V_1_sel;
wire    output_AX_ALG_keep_V_1_load_A;
wire    output_AX_ALG_keep_V_1_load_B;
reg   [1:0] output_AX_ALG_keep_V_1_state;
wire    output_AX_ALG_keep_V_1_state_cmp_full;
reg   [3:0] output_AX_ALG_strb_V_1_data_out;
wire    output_AX_ALG_strb_V_1_vld_in;
wire    output_AX_ALG_strb_V_1_vld_out;
wire    output_AX_ALG_strb_V_1_ack_in;
wire    output_AX_ALG_strb_V_1_ack_out;
reg   [3:0] output_AX_ALG_strb_V_1_payload_A;
reg   [3:0] output_AX_ALG_strb_V_1_payload_B;
reg    output_AX_ALG_strb_V_1_sel_rd;
reg    output_AX_ALG_strb_V_1_sel_wr;
wire    output_AX_ALG_strb_V_1_sel;
wire    output_AX_ALG_strb_V_1_load_A;
wire    output_AX_ALG_strb_V_1_load_B;
reg   [1:0] output_AX_ALG_strb_V_1_state;
wire    output_AX_ALG_strb_V_1_state_cmp_full;
reg   [3:0] output_AX_ALG_user_V_1_data_out;
wire    output_AX_ALG_user_V_1_vld_in;
wire    output_AX_ALG_user_V_1_vld_out;
wire    output_AX_ALG_user_V_1_ack_in;
wire    output_AX_ALG_user_V_1_ack_out;
reg   [3:0] output_AX_ALG_user_V_1_payload_A;
reg   [3:0] output_AX_ALG_user_V_1_payload_B;
reg    output_AX_ALG_user_V_1_sel_rd;
reg    output_AX_ALG_user_V_1_sel_wr;
wire    output_AX_ALG_user_V_1_sel;
wire    output_AX_ALG_user_V_1_load_A;
wire    output_AX_ALG_user_V_1_load_B;
reg   [1:0] output_AX_ALG_user_V_1_state;
wire    output_AX_ALG_user_V_1_state_cmp_full;
reg   [0:0] output_AX_ALG_last_V_1_data_out;
wire    output_AX_ALG_last_V_1_vld_in;
wire    output_AX_ALG_last_V_1_vld_out;
wire    output_AX_ALG_last_V_1_ack_in;
wire    output_AX_ALG_last_V_1_ack_out;
reg   [0:0] output_AX_ALG_last_V_1_payload_A;
reg   [0:0] output_AX_ALG_last_V_1_payload_B;
reg    output_AX_ALG_last_V_1_sel_rd;
reg    output_AX_ALG_last_V_1_sel_wr;
wire    output_AX_ALG_last_V_1_sel;
wire    output_AX_ALG_last_V_1_load_A;
wire    output_AX_ALG_last_V_1_load_B;
reg   [1:0] output_AX_ALG_last_V_1_state;
wire    output_AX_ALG_last_V_1_state_cmp_full;
reg   [4:0] output_AX_ALG_id_V_1_data_out;
wire    output_AX_ALG_id_V_1_vld_in;
wire    output_AX_ALG_id_V_1_vld_out;
wire    output_AX_ALG_id_V_1_ack_in;
wire    output_AX_ALG_id_V_1_ack_out;
reg   [4:0] output_AX_ALG_id_V_1_payload_A;
reg   [4:0] output_AX_ALG_id_V_1_payload_B;
reg    output_AX_ALG_id_V_1_sel_rd;
reg    output_AX_ALG_id_V_1_sel_wr;
wire    output_AX_ALG_id_V_1_sel;
wire    output_AX_ALG_id_V_1_load_A;
wire    output_AX_ALG_id_V_1_load_B;
reg   [1:0] output_AX_ALG_id_V_1_state;
wire    output_AX_ALG_id_V_1_state_cmp_full;
reg   [4:0] output_AX_ALG_dest_V_1_data_out;
wire    output_AX_ALG_dest_V_1_vld_in;
wire    output_AX_ALG_dest_V_1_vld_out;
wire    output_AX_ALG_dest_V_1_ack_in;
wire    output_AX_ALG_dest_V_1_ack_out;
reg   [4:0] output_AX_ALG_dest_V_1_payload_A;
reg   [4:0] output_AX_ALG_dest_V_1_payload_B;
reg    output_AX_ALG_dest_V_1_sel_rd;
reg    output_AX_ALG_dest_V_1_sel_wr;
wire    output_AX_ALG_dest_V_1_sel;
wire    output_AX_ALG_dest_V_1_load_A;
wire    output_AX_ALG_dest_V_1_load_B;
reg   [1:0] output_AX_ALG_dest_V_1_state;
wire    output_AX_ALG_dest_V_1_state_cmp_full;
reg    full_fifo_blk_n;
wire    grp_write_data_fu_46_ap_start;
wire    grp_write_data_fu_46_ap_done;
wire    grp_write_data_fu_46_ap_idle;
wire    grp_write_data_fu_46_ap_ready;
wire   [1:0] grp_write_data_fu_46_buf_V_address0;
wire    grp_write_data_fu_46_buf_V_ce0;
wire   [31:0] grp_write_data_fu_46_output_AX_ALG_TDATA;
wire    grp_write_data_fu_46_output_AX_ALG_TVALID;
wire    grp_write_data_fu_46_output_AX_ALG_TREADY;
wire   [3:0] grp_write_data_fu_46_output_AX_ALG_TKEEP;
wire   [3:0] grp_write_data_fu_46_output_AX_ALG_TSTRB;
wire   [3:0] grp_write_data_fu_46_output_AX_ALG_TUSER;
wire   [0:0] grp_write_data_fu_46_output_AX_ALG_TLAST;
wire   [4:0] grp_write_data_fu_46_output_AX_ALG_TID;
wire   [4:0] grp_write_data_fu_46_output_AX_ALG_TDEST;
reg    ap_reg_grp_write_data_fu_46_ap_start;
reg    ap_block_state1_ignore_call0;
wire   [0:0] tmp_i_fu_66_p2;
wire    ap_CS_fsm_state2;
reg    ap_block_state1;
wire    ap_CS_fsm_state3;
reg    ap_block_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 output_AX_ALG_data_V_1_sel_rd = 1'b0;
#0 output_AX_ALG_data_V_1_sel_wr = 1'b0;
#0 output_AX_ALG_data_V_1_state = 2'd0;
#0 output_AX_ALG_keep_V_1_sel_rd = 1'b0;
#0 output_AX_ALG_keep_V_1_sel_wr = 1'b0;
#0 output_AX_ALG_keep_V_1_state = 2'd0;
#0 output_AX_ALG_strb_V_1_sel_rd = 1'b0;
#0 output_AX_ALG_strb_V_1_sel_wr = 1'b0;
#0 output_AX_ALG_strb_V_1_state = 2'd0;
#0 output_AX_ALG_user_V_1_sel_rd = 1'b0;
#0 output_AX_ALG_user_V_1_sel_wr = 1'b0;
#0 output_AX_ALG_user_V_1_state = 2'd0;
#0 output_AX_ALG_last_V_1_sel_rd = 1'b0;
#0 output_AX_ALG_last_V_1_sel_wr = 1'b0;
#0 output_AX_ALG_last_V_1_state = 2'd0;
#0 output_AX_ALG_id_V_1_sel_rd = 1'b0;
#0 output_AX_ALG_id_V_1_sel_wr = 1'b0;
#0 output_AX_ALG_id_V_1_state = 2'd0;
#0 output_AX_ALG_dest_V_1_sel_rd = 1'b0;
#0 output_AX_ALG_dest_V_1_sel_wr = 1'b0;
#0 output_AX_ALG_dest_V_1_state = 2'd0;
#0 ap_reg_grp_write_data_fu_46_ap_start = 1'b0;
end

write_data grp_write_data_fu_46(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_write_data_fu_46_ap_start),
    .ap_done(grp_write_data_fu_46_ap_done),
    .ap_idle(grp_write_data_fu_46_ap_idle),
    .ap_ready(grp_write_data_fu_46_ap_ready),
    .buf_V_address0(grp_write_data_fu_46_buf_V_address0),
    .buf_V_ce0(grp_write_data_fu_46_buf_V_ce0),
    .buf_V_q0(buf_DISTANCEX_out_V_q0),
    .output_AX_ALG_TDATA(grp_write_data_fu_46_output_AX_ALG_TDATA),
    .output_AX_ALG_TVALID(grp_write_data_fu_46_output_AX_ALG_TVALID),
    .output_AX_ALG_TREADY(grp_write_data_fu_46_output_AX_ALG_TREADY),
    .output_AX_ALG_TKEEP(grp_write_data_fu_46_output_AX_ALG_TKEEP),
    .output_AX_ALG_TSTRB(grp_write_data_fu_46_output_AX_ALG_TSTRB),
    .output_AX_ALG_TUSER(grp_write_data_fu_46_output_AX_ALG_TUSER),
    .output_AX_ALG_TLAST(grp_write_data_fu_46_output_AX_ALG_TLAST),
    .output_AX_ALG_TID(grp_write_data_fu_46_output_AX_ALG_TID),
    .output_AX_ALG_TDEST(grp_write_data_fu_46_output_AX_ALG_TDEST)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == output_AX_ALG_data_V_1_ack_in) | (1'b0 == output_AX_ALG_keep_V_1_ack_in) | (1'b0 == output_AX_ALG_strb_V_1_ack_in) | (1'b0 == output_AX_ALG_user_V_1_ack_in) | (1'b0 == output_AX_ALG_last_V_1_ack_in) | (1'b0 == output_AX_ALG_id_V_1_ack_in) | (1'b0 == output_AX_ALG_dest_V_1_ack_in)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_write_data_fu_46_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == full_fifo_empty_n)) & (1'd1 == tmp_i_fu_66_p2))) begin
            ap_reg_grp_write_data_fu_46_ap_start <= 1'b1;
        end else if ((1'b1 == grp_write_data_fu_46_ap_ready)) begin
            ap_reg_grp_write_data_fu_46_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_data_V_1_ack_out) & (1'b1 == output_AX_ALG_data_V_1_vld_out))) begin
            output_AX_ALG_data_V_1_sel_rd <= ~output_AX_ALG_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_data_V_1_vld_in) & (1'b1 == output_AX_ALG_data_V_1_ack_in))) begin
            output_AX_ALG_data_V_1_sel_wr <= ~output_AX_ALG_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_AX_ALG_data_V_1_vld_in) & (1'b1 == output_AX_ALG_data_V_1_ack_out) & (output_AX_ALG_data_V_1_state == 2'd3)) | ((1'b0 == output_AX_ALG_data_V_1_vld_in) & (output_AX_ALG_data_V_1_state == 2'd2)))) begin
            output_AX_ALG_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_AX_ALG_data_V_1_vld_in) & (1'b0 == output_AX_ALG_data_V_1_ack_out) & (output_AX_ALG_data_V_1_state == 2'd3)) | ((1'b0 == output_AX_ALG_data_V_1_ack_out) & (output_AX_ALG_data_V_1_state == 2'd1)))) begin
            output_AX_ALG_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_AX_ALG_data_V_1_vld_in) & (output_AX_ALG_data_V_1_state == 2'd2)) | ((1'b1 == output_AX_ALG_data_V_1_ack_out) & (output_AX_ALG_data_V_1_state == 2'd1)) | ((output_AX_ALG_data_V_1_state == 2'd3) & ~((1'b1 == output_AX_ALG_data_V_1_vld_in) & (1'b0 == output_AX_ALG_data_V_1_ack_out)) & ~((1'b0 == output_AX_ALG_data_V_1_vld_in) & (1'b1 == output_AX_ALG_data_V_1_ack_out))))) begin
            output_AX_ALG_data_V_1_state <= 2'd3;
        end else begin
            output_AX_ALG_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_dest_V_1_ack_out) & (1'b1 == output_AX_ALG_dest_V_1_vld_out))) begin
            output_AX_ALG_dest_V_1_sel_rd <= ~output_AX_ALG_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_dest_V_1_vld_in) & (1'b1 == output_AX_ALG_dest_V_1_ack_in))) begin
            output_AX_ALG_dest_V_1_sel_wr <= ~output_AX_ALG_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_dest_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_AX_ALG_dest_V_1_vld_in) & (1'b1 == output_AX_ALG_dest_V_1_ack_out) & (2'd3 == output_AX_ALG_dest_V_1_state)) | ((1'b0 == output_AX_ALG_dest_V_1_vld_in) & (2'd2 == output_AX_ALG_dest_V_1_state)))) begin
            output_AX_ALG_dest_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_AX_ALG_dest_V_1_vld_in) & (1'b0 == output_AX_ALG_dest_V_1_ack_out) & (2'd3 == output_AX_ALG_dest_V_1_state)) | ((1'b0 == output_AX_ALG_dest_V_1_ack_out) & (2'd1 == output_AX_ALG_dest_V_1_state)))) begin
            output_AX_ALG_dest_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_AX_ALG_dest_V_1_vld_in) & (2'd2 == output_AX_ALG_dest_V_1_state)) | ((1'b1 == output_AX_ALG_dest_V_1_ack_out) & (2'd1 == output_AX_ALG_dest_V_1_state)) | ((2'd3 == output_AX_ALG_dest_V_1_state) & ~((1'b1 == output_AX_ALG_dest_V_1_vld_in) & (1'b0 == output_AX_ALG_dest_V_1_ack_out)) & ~((1'b0 == output_AX_ALG_dest_V_1_vld_in) & (1'b1 == output_AX_ALG_dest_V_1_ack_out))))) begin
            output_AX_ALG_dest_V_1_state <= 2'd3;
        end else begin
            output_AX_ALG_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_id_V_1_ack_out) & (1'b1 == output_AX_ALG_id_V_1_vld_out))) begin
            output_AX_ALG_id_V_1_sel_rd <= ~output_AX_ALG_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_id_V_1_vld_in) & (1'b1 == output_AX_ALG_id_V_1_ack_in))) begin
            output_AX_ALG_id_V_1_sel_wr <= ~output_AX_ALG_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_id_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_AX_ALG_id_V_1_vld_in) & (1'b1 == output_AX_ALG_id_V_1_ack_out) & (2'd3 == output_AX_ALG_id_V_1_state)) | ((1'b0 == output_AX_ALG_id_V_1_vld_in) & (2'd2 == output_AX_ALG_id_V_1_state)))) begin
            output_AX_ALG_id_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_AX_ALG_id_V_1_vld_in) & (1'b0 == output_AX_ALG_id_V_1_ack_out) & (2'd3 == output_AX_ALG_id_V_1_state)) | ((1'b0 == output_AX_ALG_id_V_1_ack_out) & (2'd1 == output_AX_ALG_id_V_1_state)))) begin
            output_AX_ALG_id_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_AX_ALG_id_V_1_vld_in) & (2'd2 == output_AX_ALG_id_V_1_state)) | ((1'b1 == output_AX_ALG_id_V_1_ack_out) & (2'd1 == output_AX_ALG_id_V_1_state)) | ((2'd3 == output_AX_ALG_id_V_1_state) & ~((1'b1 == output_AX_ALG_id_V_1_vld_in) & (1'b0 == output_AX_ALG_id_V_1_ack_out)) & ~((1'b0 == output_AX_ALG_id_V_1_vld_in) & (1'b1 == output_AX_ALG_id_V_1_ack_out))))) begin
            output_AX_ALG_id_V_1_state <= 2'd3;
        end else begin
            output_AX_ALG_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_keep_V_1_ack_out) & (1'b1 == output_AX_ALG_keep_V_1_vld_out))) begin
            output_AX_ALG_keep_V_1_sel_rd <= ~output_AX_ALG_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_keep_V_1_vld_in) & (1'b1 == output_AX_ALG_keep_V_1_ack_in))) begin
            output_AX_ALG_keep_V_1_sel_wr <= ~output_AX_ALG_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_AX_ALG_keep_V_1_vld_in) & (1'b1 == output_AX_ALG_keep_V_1_ack_out) & (2'd3 == output_AX_ALG_keep_V_1_state)) | ((1'b0 == output_AX_ALG_keep_V_1_vld_in) & (2'd2 == output_AX_ALG_keep_V_1_state)))) begin
            output_AX_ALG_keep_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_AX_ALG_keep_V_1_vld_in) & (1'b0 == output_AX_ALG_keep_V_1_ack_out) & (2'd3 == output_AX_ALG_keep_V_1_state)) | ((1'b0 == output_AX_ALG_keep_V_1_ack_out) & (2'd1 == output_AX_ALG_keep_V_1_state)))) begin
            output_AX_ALG_keep_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_AX_ALG_keep_V_1_vld_in) & (2'd2 == output_AX_ALG_keep_V_1_state)) | ((1'b1 == output_AX_ALG_keep_V_1_ack_out) & (2'd1 == output_AX_ALG_keep_V_1_state)) | ((2'd3 == output_AX_ALG_keep_V_1_state) & ~((1'b1 == output_AX_ALG_keep_V_1_vld_in) & (1'b0 == output_AX_ALG_keep_V_1_ack_out)) & ~((1'b0 == output_AX_ALG_keep_V_1_vld_in) & (1'b1 == output_AX_ALG_keep_V_1_ack_out))))) begin
            output_AX_ALG_keep_V_1_state <= 2'd3;
        end else begin
            output_AX_ALG_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_last_V_1_ack_out) & (1'b1 == output_AX_ALG_last_V_1_vld_out))) begin
            output_AX_ALG_last_V_1_sel_rd <= ~output_AX_ALG_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_last_V_1_vld_in) & (1'b1 == output_AX_ALG_last_V_1_ack_in))) begin
            output_AX_ALG_last_V_1_sel_wr <= ~output_AX_ALG_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_AX_ALG_last_V_1_vld_in) & (1'b1 == output_AX_ALG_last_V_1_ack_out) & (2'd3 == output_AX_ALG_last_V_1_state)) | ((1'b0 == output_AX_ALG_last_V_1_vld_in) & (2'd2 == output_AX_ALG_last_V_1_state)))) begin
            output_AX_ALG_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_AX_ALG_last_V_1_vld_in) & (1'b0 == output_AX_ALG_last_V_1_ack_out) & (2'd3 == output_AX_ALG_last_V_1_state)) | ((1'b0 == output_AX_ALG_last_V_1_ack_out) & (2'd1 == output_AX_ALG_last_V_1_state)))) begin
            output_AX_ALG_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_AX_ALG_last_V_1_vld_in) & (2'd2 == output_AX_ALG_last_V_1_state)) | ((1'b1 == output_AX_ALG_last_V_1_ack_out) & (2'd1 == output_AX_ALG_last_V_1_state)) | ((2'd3 == output_AX_ALG_last_V_1_state) & ~((1'b1 == output_AX_ALG_last_V_1_vld_in) & (1'b0 == output_AX_ALG_last_V_1_ack_out)) & ~((1'b0 == output_AX_ALG_last_V_1_vld_in) & (1'b1 == output_AX_ALG_last_V_1_ack_out))))) begin
            output_AX_ALG_last_V_1_state <= 2'd3;
        end else begin
            output_AX_ALG_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_strb_V_1_ack_out) & (1'b1 == output_AX_ALG_strb_V_1_vld_out))) begin
            output_AX_ALG_strb_V_1_sel_rd <= ~output_AX_ALG_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_strb_V_1_vld_in) & (1'b1 == output_AX_ALG_strb_V_1_ack_in))) begin
            output_AX_ALG_strb_V_1_sel_wr <= ~output_AX_ALG_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_strb_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_AX_ALG_strb_V_1_vld_in) & (1'b1 == output_AX_ALG_strb_V_1_ack_out) & (2'd3 == output_AX_ALG_strb_V_1_state)) | ((1'b0 == output_AX_ALG_strb_V_1_vld_in) & (2'd2 == output_AX_ALG_strb_V_1_state)))) begin
            output_AX_ALG_strb_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_AX_ALG_strb_V_1_vld_in) & (1'b0 == output_AX_ALG_strb_V_1_ack_out) & (2'd3 == output_AX_ALG_strb_V_1_state)) | ((1'b0 == output_AX_ALG_strb_V_1_ack_out) & (2'd1 == output_AX_ALG_strb_V_1_state)))) begin
            output_AX_ALG_strb_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_AX_ALG_strb_V_1_vld_in) & (2'd2 == output_AX_ALG_strb_V_1_state)) | ((1'b1 == output_AX_ALG_strb_V_1_ack_out) & (2'd1 == output_AX_ALG_strb_V_1_state)) | ((2'd3 == output_AX_ALG_strb_V_1_state) & ~((1'b1 == output_AX_ALG_strb_V_1_vld_in) & (1'b0 == output_AX_ALG_strb_V_1_ack_out)) & ~((1'b0 == output_AX_ALG_strb_V_1_vld_in) & (1'b1 == output_AX_ALG_strb_V_1_ack_out))))) begin
            output_AX_ALG_strb_V_1_state <= 2'd3;
        end else begin
            output_AX_ALG_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_user_V_1_ack_out) & (1'b1 == output_AX_ALG_user_V_1_vld_out))) begin
            output_AX_ALG_user_V_1_sel_rd <= ~output_AX_ALG_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_user_V_1_vld_in) & (1'b1 == output_AX_ALG_user_V_1_ack_in))) begin
            output_AX_ALG_user_V_1_sel_wr <= ~output_AX_ALG_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_AX_ALG_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_AX_ALG_user_V_1_vld_in) & (1'b1 == output_AX_ALG_user_V_1_ack_out) & (2'd3 == output_AX_ALG_user_V_1_state)) | ((1'b0 == output_AX_ALG_user_V_1_vld_in) & (2'd2 == output_AX_ALG_user_V_1_state)))) begin
            output_AX_ALG_user_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_AX_ALG_user_V_1_vld_in) & (1'b0 == output_AX_ALG_user_V_1_ack_out) & (2'd3 == output_AX_ALG_user_V_1_state)) | ((1'b0 == output_AX_ALG_user_V_1_ack_out) & (2'd1 == output_AX_ALG_user_V_1_state)))) begin
            output_AX_ALG_user_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_AX_ALG_user_V_1_vld_in) & (2'd2 == output_AX_ALG_user_V_1_state)) | ((1'b1 == output_AX_ALG_user_V_1_ack_out) & (2'd1 == output_AX_ALG_user_V_1_state)) | ((2'd3 == output_AX_ALG_user_V_1_state) & ~((1'b1 == output_AX_ALG_user_V_1_vld_in) & (1'b0 == output_AX_ALG_user_V_1_ack_out)) & ~((1'b0 == output_AX_ALG_user_V_1_vld_in) & (1'b1 == output_AX_ALG_user_V_1_ack_out))))) begin
            output_AX_ALG_user_V_1_state <= 2'd3;
        end else begin
            output_AX_ALG_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_data_V_1_load_A)) begin
        output_AX_ALG_data_V_1_payload_A <= grp_write_data_fu_46_output_AX_ALG_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_data_V_1_load_B)) begin
        output_AX_ALG_data_V_1_payload_B <= grp_write_data_fu_46_output_AX_ALG_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_dest_V_1_load_A)) begin
        output_AX_ALG_dest_V_1_payload_A <= grp_write_data_fu_46_output_AX_ALG_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_dest_V_1_load_B)) begin
        output_AX_ALG_dest_V_1_payload_B <= grp_write_data_fu_46_output_AX_ALG_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_id_V_1_load_A)) begin
        output_AX_ALG_id_V_1_payload_A <= grp_write_data_fu_46_output_AX_ALG_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_id_V_1_load_B)) begin
        output_AX_ALG_id_V_1_payload_B <= grp_write_data_fu_46_output_AX_ALG_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_keep_V_1_load_A)) begin
        output_AX_ALG_keep_V_1_payload_A <= grp_write_data_fu_46_output_AX_ALG_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_keep_V_1_load_B)) begin
        output_AX_ALG_keep_V_1_payload_B <= grp_write_data_fu_46_output_AX_ALG_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_last_V_1_load_A)) begin
        output_AX_ALG_last_V_1_payload_A <= grp_write_data_fu_46_output_AX_ALG_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_last_V_1_load_B)) begin
        output_AX_ALG_last_V_1_payload_B <= grp_write_data_fu_46_output_AX_ALG_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_strb_V_1_load_A)) begin
        output_AX_ALG_strb_V_1_payload_A <= grp_write_data_fu_46_output_AX_ALG_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_strb_V_1_load_B)) begin
        output_AX_ALG_strb_V_1_payload_B <= grp_write_data_fu_46_output_AX_ALG_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_user_V_1_load_A)) begin
        output_AX_ALG_user_V_1_payload_A <= grp_write_data_fu_46_output_AX_ALG_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_user_V_1_load_B)) begin
        output_AX_ALG_user_V_1_payload_B <= grp_write_data_fu_46_output_AX_ALG_TUSER;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == output_AX_ALG_data_V_1_ack_in) | (1'b0 == output_AX_ALG_keep_V_1_ack_in) | (1'b0 == output_AX_ALG_strb_V_1_ack_in) | (1'b0 == output_AX_ALG_user_V_1_ack_in) | (1'b0 == output_AX_ALG_last_V_1_ack_in) | (1'b0 == output_AX_ALG_id_V_1_ack_in) | (1'b0 == output_AX_ALG_dest_V_1_ack_in)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == output_AX_ALG_data_V_1_ack_in) | (1'b0 == output_AX_ALG_keep_V_1_ack_in) | (1'b0 == output_AX_ALG_strb_V_1_ack_in) | (1'b0 == output_AX_ALG_user_V_1_ack_in) | (1'b0 == output_AX_ALG_last_V_1_ack_in) | (1'b0 == output_AX_ALG_id_V_1_ack_in) | (1'b0 == output_AX_ALG_dest_V_1_ack_in)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        full_fifo_blk_n = full_fifo_empty_n;
    end else begin
        full_fifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == full_fifo_empty_n)))) begin
        full_fifo_read = 1'b1;
    end else begin
        full_fifo_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == output_AX_ALG_data_V_1_sel)) begin
        output_AX_ALG_data_V_1_data_out = output_AX_ALG_data_V_1_payload_B;
    end else begin
        output_AX_ALG_data_V_1_data_out = output_AX_ALG_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == output_AX_ALG_dest_V_1_sel)) begin
        output_AX_ALG_dest_V_1_data_out = output_AX_ALG_dest_V_1_payload_B;
    end else begin
        output_AX_ALG_dest_V_1_data_out = output_AX_ALG_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == output_AX_ALG_id_V_1_sel)) begin
        output_AX_ALG_id_V_1_data_out = output_AX_ALG_id_V_1_payload_B;
    end else begin
        output_AX_ALG_id_V_1_data_out = output_AX_ALG_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == output_AX_ALG_keep_V_1_sel)) begin
        output_AX_ALG_keep_V_1_data_out = output_AX_ALG_keep_V_1_payload_B;
    end else begin
        output_AX_ALG_keep_V_1_data_out = output_AX_ALG_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == output_AX_ALG_last_V_1_sel)) begin
        output_AX_ALG_last_V_1_data_out = output_AX_ALG_last_V_1_payload_B;
    end else begin
        output_AX_ALG_last_V_1_data_out = output_AX_ALG_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == output_AX_ALG_strb_V_1_sel)) begin
        output_AX_ALG_strb_V_1_data_out = output_AX_ALG_strb_V_1_payload_B;
    end else begin
        output_AX_ALG_strb_V_1_data_out = output_AX_ALG_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == output_AX_ALG_user_V_1_sel)) begin
        output_AX_ALG_user_V_1_data_out = output_AX_ALG_user_V_1_payload_B;
    end else begin
        output_AX_ALG_user_V_1_data_out = output_AX_ALG_user_V_1_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == full_fifo_empty_n)) & (1'd0 == tmp_i_fu_66_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == full_fifo_empty_n)) & (1'd1 == tmp_i_fu_66_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_write_data_fu_46_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == output_AX_ALG_data_V_1_ack_in) | (1'b0 == output_AX_ALG_keep_V_1_ack_in) | (1'b0 == output_AX_ALG_strb_V_1_ack_in) | (1'b0 == output_AX_ALG_user_V_1_ack_in) | (1'b0 == output_AX_ALG_last_V_1_ack_in) | (1'b0 == output_AX_ALG_id_V_1_ack_in) | (1'b0 == output_AX_ALG_dest_V_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == full_fifo_empty_n));
end

always @ (*) begin
    ap_block_state1_ignore_call0 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == full_fifo_empty_n));
end

always @ (*) begin
    ap_block_state3 = ((1'b0 == output_AX_ALG_data_V_1_ack_in) | (1'b0 == output_AX_ALG_keep_V_1_ack_in) | (1'b0 == output_AX_ALG_strb_V_1_ack_in) | (1'b0 == output_AX_ALG_user_V_1_ack_in) | (1'b0 == output_AX_ALG_last_V_1_ack_in) | (1'b0 == output_AX_ALG_id_V_1_ack_in) | (1'b0 == output_AX_ALG_dest_V_1_ack_in));
end

assign buf_DISTANCEX_out_V_address0 = grp_write_data_fu_46_buf_V_address0;

assign buf_DISTANCEX_out_V_ce0 = grp_write_data_fu_46_buf_V_ce0;

assign grp_write_data_fu_46_ap_start = ap_reg_grp_write_data_fu_46_ap_start;

assign grp_write_data_fu_46_output_AX_ALG_TREADY = output_AX_ALG_dest_V_1_state[1'd1];

assign output_AX_ALG_TDATA = output_AX_ALG_data_V_1_data_out;

assign output_AX_ALG_TDEST = output_AX_ALG_dest_V_1_data_out;

assign output_AX_ALG_TID = output_AX_ALG_id_V_1_data_out;

assign output_AX_ALG_TKEEP = output_AX_ALG_keep_V_1_data_out;

assign output_AX_ALG_TLAST = output_AX_ALG_last_V_1_data_out;

assign output_AX_ALG_TSTRB = output_AX_ALG_strb_V_1_data_out;

assign output_AX_ALG_TUSER = output_AX_ALG_user_V_1_data_out;

assign output_AX_ALG_TVALID = output_AX_ALG_dest_V_1_state[1'd0];

assign output_AX_ALG_data_V_1_ack_in = output_AX_ALG_data_V_1_state[1'd1];

assign output_AX_ALG_data_V_1_ack_out = output_AX_ALG_TREADY;

assign output_AX_ALG_data_V_1_load_A = (output_AX_ALG_data_V_1_state_cmp_full & ~output_AX_ALG_data_V_1_sel_wr);

assign output_AX_ALG_data_V_1_load_B = (output_AX_ALG_data_V_1_sel_wr & output_AX_ALG_data_V_1_state_cmp_full);

assign output_AX_ALG_data_V_1_sel = output_AX_ALG_data_V_1_sel_rd;

assign output_AX_ALG_data_V_1_state_cmp_full = ((output_AX_ALG_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_AX_ALG_data_V_1_vld_in = grp_write_data_fu_46_output_AX_ALG_TVALID;

assign output_AX_ALG_data_V_1_vld_out = output_AX_ALG_data_V_1_state[1'd0];

assign output_AX_ALG_dest_V_1_ack_in = output_AX_ALG_dest_V_1_state[1'd1];

assign output_AX_ALG_dest_V_1_ack_out = output_AX_ALG_TREADY;

assign output_AX_ALG_dest_V_1_load_A = (output_AX_ALG_dest_V_1_state_cmp_full & ~output_AX_ALG_dest_V_1_sel_wr);

assign output_AX_ALG_dest_V_1_load_B = (output_AX_ALG_dest_V_1_sel_wr & output_AX_ALG_dest_V_1_state_cmp_full);

assign output_AX_ALG_dest_V_1_sel = output_AX_ALG_dest_V_1_sel_rd;

assign output_AX_ALG_dest_V_1_state_cmp_full = ((output_AX_ALG_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_AX_ALG_dest_V_1_vld_in = grp_write_data_fu_46_output_AX_ALG_TVALID;

assign output_AX_ALG_dest_V_1_vld_out = output_AX_ALG_dest_V_1_state[1'd0];

assign output_AX_ALG_id_V_1_ack_in = output_AX_ALG_id_V_1_state[1'd1];

assign output_AX_ALG_id_V_1_ack_out = output_AX_ALG_TREADY;

assign output_AX_ALG_id_V_1_load_A = (output_AX_ALG_id_V_1_state_cmp_full & ~output_AX_ALG_id_V_1_sel_wr);

assign output_AX_ALG_id_V_1_load_B = (output_AX_ALG_id_V_1_sel_wr & output_AX_ALG_id_V_1_state_cmp_full);

assign output_AX_ALG_id_V_1_sel = output_AX_ALG_id_V_1_sel_rd;

assign output_AX_ALG_id_V_1_state_cmp_full = ((output_AX_ALG_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_AX_ALG_id_V_1_vld_in = grp_write_data_fu_46_output_AX_ALG_TVALID;

assign output_AX_ALG_id_V_1_vld_out = output_AX_ALG_id_V_1_state[1'd0];

assign output_AX_ALG_keep_V_1_ack_in = output_AX_ALG_keep_V_1_state[1'd1];

assign output_AX_ALG_keep_V_1_ack_out = output_AX_ALG_TREADY;

assign output_AX_ALG_keep_V_1_load_A = (output_AX_ALG_keep_V_1_state_cmp_full & ~output_AX_ALG_keep_V_1_sel_wr);

assign output_AX_ALG_keep_V_1_load_B = (output_AX_ALG_keep_V_1_sel_wr & output_AX_ALG_keep_V_1_state_cmp_full);

assign output_AX_ALG_keep_V_1_sel = output_AX_ALG_keep_V_1_sel_rd;

assign output_AX_ALG_keep_V_1_state_cmp_full = ((output_AX_ALG_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_AX_ALG_keep_V_1_vld_in = grp_write_data_fu_46_output_AX_ALG_TVALID;

assign output_AX_ALG_keep_V_1_vld_out = output_AX_ALG_keep_V_1_state[1'd0];

assign output_AX_ALG_last_V_1_ack_in = output_AX_ALG_last_V_1_state[1'd1];

assign output_AX_ALG_last_V_1_ack_out = output_AX_ALG_TREADY;

assign output_AX_ALG_last_V_1_load_A = (output_AX_ALG_last_V_1_state_cmp_full & ~output_AX_ALG_last_V_1_sel_wr);

assign output_AX_ALG_last_V_1_load_B = (output_AX_ALG_last_V_1_sel_wr & output_AX_ALG_last_V_1_state_cmp_full);

assign output_AX_ALG_last_V_1_sel = output_AX_ALG_last_V_1_sel_rd;

assign output_AX_ALG_last_V_1_state_cmp_full = ((output_AX_ALG_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_AX_ALG_last_V_1_vld_in = grp_write_data_fu_46_output_AX_ALG_TVALID;

assign output_AX_ALG_last_V_1_vld_out = output_AX_ALG_last_V_1_state[1'd0];

assign output_AX_ALG_strb_V_1_ack_in = output_AX_ALG_strb_V_1_state[1'd1];

assign output_AX_ALG_strb_V_1_ack_out = output_AX_ALG_TREADY;

assign output_AX_ALG_strb_V_1_load_A = (output_AX_ALG_strb_V_1_state_cmp_full & ~output_AX_ALG_strb_V_1_sel_wr);

assign output_AX_ALG_strb_V_1_load_B = (output_AX_ALG_strb_V_1_sel_wr & output_AX_ALG_strb_V_1_state_cmp_full);

assign output_AX_ALG_strb_V_1_sel = output_AX_ALG_strb_V_1_sel_rd;

assign output_AX_ALG_strb_V_1_state_cmp_full = ((output_AX_ALG_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_AX_ALG_strb_V_1_vld_in = grp_write_data_fu_46_output_AX_ALG_TVALID;

assign output_AX_ALG_strb_V_1_vld_out = output_AX_ALG_strb_V_1_state[1'd0];

assign output_AX_ALG_user_V_1_ack_in = output_AX_ALG_user_V_1_state[1'd1];

assign output_AX_ALG_user_V_1_ack_out = output_AX_ALG_TREADY;

assign output_AX_ALG_user_V_1_load_A = (output_AX_ALG_user_V_1_state_cmp_full & ~output_AX_ALG_user_V_1_sel_wr);

assign output_AX_ALG_user_V_1_load_B = (output_AX_ALG_user_V_1_sel_wr & output_AX_ALG_user_V_1_state_cmp_full);

assign output_AX_ALG_user_V_1_sel = output_AX_ALG_user_V_1_sel_rd;

assign output_AX_ALG_user_V_1_state_cmp_full = ((output_AX_ALG_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_AX_ALG_user_V_1_vld_in = grp_write_data_fu_46_output_AX_ALG_TVALID;

assign output_AX_ALG_user_V_1_vld_out = output_AX_ALG_user_V_1_state[1'd0];

assign tmp_i_fu_66_p2 = ((full_fifo_dout == 32'd0) ? 1'b1 : 1'b0);

endmodule //Block_arrayctor_loop
