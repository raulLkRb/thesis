-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sweep_algorithm_DECM is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (23 downto 0);
    currentGroupX_OUT_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    currentGroupX_OUT_V_ce0 : OUT STD_LOGIC;
    currentGroupX_OUT_V_we0 : OUT STD_LOGIC;
    currentGroupX_OUT_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    currentGroupX_OUT_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sweep_algorithm_DECM is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv12_401 : STD_LOGIC_VECTOR (11 downto 0) := "010000000001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_801 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000001";
    constant ap_const_lv12_801 : STD_LOGIC_VECTOR (11 downto 0) := "100000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal aux_array_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal aux_array_V_ce0 : STD_LOGIC;
    signal aux_array_V_we0 : STD_LOGIC;
    signal aux_array_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal aux_array_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal aux_array_V_ce1 : STD_LOGIC;
    signal aux_array_V_we1 : STD_LOGIC;
    signal aux_array_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal aux_array_V_q1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_V_ce0 : STD_LOGIC;
    signal sum_V_we0 : STD_LOGIC;
    signal sum_V_d0 : STD_LOGIC_VECTOR (41 downto 0);
    signal sum_V_q0 : STD_LOGIC_VECTOR (41 downto 0);
    signal vector_V_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal derivada_V_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal contador : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_i_reg_216 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_i_reg_228 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_5_i_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal i_fu_278_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_721 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_7_i_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_reg_768 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal i_2_fu_325_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_2_reg_772 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal sum_V_addr_reg_783 : STD_LOGIC_VECTOR (9 downto 0);
    signal reset_assign_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reset_assign_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter1_reset_assign_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_i_fu_365_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_i_reg_795 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state6_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_flag00011001 : BOOLEAN;
    signal p_Val2_6_i_fu_386_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_i_reg_805 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state7_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_pp1_stage2_flag00011001 : BOOLEAN;
    signal grp_fu_695_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Val2_i_reg_810 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_1_fu_399_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_815 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_state8_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_pp1_stage3_flag00011001 : BOOLEAN;
    signal tmp_14_i_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_i_reg_821 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i1_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_i1_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal currentGroupX_OUT_V_s_reg_831 : STD_LOGIC_VECTOR (1 downto 0);
    signal cont32_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cont32_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal currentGroupX_OUT_V_1_reg_842 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_i_fu_643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_9_i_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_661_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_4_fu_678_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage3_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage2_flag00011011 : BOOLEAN;
    signal i_i_phi_fu_220_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal i_1_i_phi_fu_232_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal i_2_i_reg_239 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_i_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_i_reg_250 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_i_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal contador_new_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_4_cast_i_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast25_i_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_i_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_cast24_i_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_cast_i_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage1_flag00000000 : BOOLEAN;
    signal ap_block_pp1_stage3_flag00000000 : BOOLEAN;
    signal contNuevoSuma_1_i_fu_562_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_cast23_i_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_cast22_i_fu_684_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal valorAuxVinout_0_V_fu_406_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal contNuevoSuma_1_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal contNuevoSuma_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal contNuevo_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp_i_fu_433_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ind_i_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ind_i_cast_fu_599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cont_i_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_i_fu_585_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal indPar_fu_548_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_703_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Val2_6_fu_531_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_10_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage2_flag00000000 : BOOLEAN;
    signal i_1_cast_i_fu_336_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_11_fu_340_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_357_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_361_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_378_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_382_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_i_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal contNuevo_0_op_i_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_450_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_484_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_reset_i_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i4_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i5_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal minimoX_0_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_i_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ind16_cast_fu_580_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_ind_i_fu_592_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_7_fu_624_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_695_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal OP1_V_fu_375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_695_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_703_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal OP1_V_1_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_703_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp1_stage1_flag00011011 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component axi_algorithm_macdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (41 downto 0);
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component axi_algorithm_maceOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (41 downto 0);
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component sweep_algorithm_Dbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (23 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component sweep_algorithm_Dcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (41 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;



begin
    aux_array_V_U : component sweep_algorithm_Dbkb
    generic map (
        DataWidth => 24,
        AddressRange => 2049,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => aux_array_V_address0,
        ce0 => aux_array_V_ce0,
        we0 => aux_array_V_we0,
        d0 => p_read,
        q0 => aux_array_V_q0,
        address1 => aux_array_V_address1,
        ce1 => aux_array_V_ce1,
        we1 => aux_array_V_we1,
        d1 => aux_array_V_d1,
        q1 => aux_array_V_q1);

    sum_V_U : component sweep_algorithm_Dcud
    generic map (
        DataWidth => 42,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sum_V_address0,
        ce0 => sum_V_ce0,
        we0 => sum_V_we0,
        d0 => sum_V_d0,
        q0 => sum_V_q0);

    axi_algorithm_macdEe_U10 : component axi_algorithm_macdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        din0 => grp_fu_695_p0,
        din1 => grp_fu_695_p1,
        din2 => sum_V_q0,
        dout => grp_fu_695_p3);

    axi_algorithm_maceOg_U11 : component axi_algorithm_maceOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        din0 => grp_fu_703_p0,
        din1 => grp_fu_703_p1,
        din2 => p_Val2_i_reg_810,
        dout => grp_fu_703_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                elsif ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011011 = ap_const_boolean_0))))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state5 xor ap_const_logic_1);
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    contNuevoSuma_1_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (tmp_14_i_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                contNuevoSuma_1_fu_98 <= contNuevoSuma_fu_603_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = tmp_14_i_reg_821))) then 
                contNuevoSuma_1_fu_98 <= contNuevoSuma_1_i_fu_562_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                contNuevoSuma_1_fu_98 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    contNuevo_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = tmp_7_i_reg_768) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0) and (tmp_14_i_fu_415_p2 = ap_const_lv1_1))) then 
                contNuevo_fu_102 <= ap_const_lv32_1;
            elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = tmp_7_i_reg_768) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_14_i_fu_415_p2))) then 
                contNuevo_fu_102 <= phitmp_i_fu_433_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                contNuevo_fu_102 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    cont_i_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (tmp_14_i_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                cont_i_fu_110 <= p_i_fu_585_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                cont_i_fu_110 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    contador_new_i_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                contador_new_i_reg_261 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = tmp_9_i_fu_649_p2))) then 
                contador_new_i_reg_261 <= tmp_8_i_fu_643_p2;
            end if; 
        end if;
    end process;

    i_1_i_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_7_i_reg_768) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                i_1_i_reg_228 <= i_2_reg_772;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_1_i_reg_228 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_2_i_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_9_i_fu_649_p2))) then 
                i_2_i_reg_239 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_15_i_fu_655_p2))) then 
                i_2_i_reg_239 <= i_3_fu_661_p2;
            end if; 
        end if;
    end process;

    i_3_i_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_3_i_reg_250 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = tmp_19_i_fu_672_p2))) then 
                i_3_i_reg_250 <= i_4_fu_678_p2;
            end if; 
        end if;
    end process;

    i_i_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_5_i_reg_717 = ap_const_lv1_0))) then 
                i_i_reg_216 <= i_reg_721;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                i_i_reg_216 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    ind_i_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (tmp_14_i_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                                ind_i_fu_106(2 downto 0) <= p_ind_i_cast_fu_599_p1(2 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ind_i_fu_106(0) <= '0';
                ind_i_fu_106(1) <= '0';
                ind_i_fu_106(2) <= '0';
            end if; 
        end if;
    end process;

    p_Val2_3_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (tmp_14_i_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                p_Val2_3_fu_114 <= indPar_fu_548_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_Val2_3_fu_114 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_reset_assign_reg_788 <= reset_assign_reg_788;
                tmp_7_i_reg_768 <= tmp_7_i_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (tmp_14_i_reg_821 = ap_const_lv1_1))) then
                cont32_reg_836 <= cont32_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                contador <= contador_new_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (tmp_14_i_reg_821 = ap_const_lv1_1))) then
                currentGroupX_OUT_V_1_reg_842 <= contNuevoSuma_1_i_fu_562_p3(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_7_i_reg_768) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0) and (tmp_14_i_fu_415_p2 = ap_const_lv1_1))) then
                currentGroupX_OUT_V_s_reg_831 <= ind_i_fu_106(2 - 1 downto 0);
                p_Val2_i1_reg_825 <= p_Val2_i1_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (tmp_14_i_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then
                derivada_V_0 <= p_Val2_i1_reg_825;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then
                i_2_reg_772 <= i_2_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                i_reg_721 <= i_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_7_i_reg_768))) then
                p_Val2_2_i_reg_795 <= p_Val2_2_i_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_7_i_reg_768) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011001 = ap_const_boolean_0))) then
                p_Val2_6_i_reg_805 <= p_Val2_6_i_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = tmp_7_i_reg_768) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011001 = ap_const_boolean_0))) then
                p_Val2_i_reg_810 <= grp_fu_695_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_7_i_fu_319_p2))) then
                reset_assign_reg_788 <= reset_assign_fu_351_p2;
                sum_V_addr_reg_783 <= i_1_cast24_i_fu_331_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_7_i_reg_768) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0))) then
                tmp_14_i_reg_821 <= tmp_14_i_fu_415_p2;
                tmp_1_reg_815 <= tmp_1_fu_399_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                tmp_5_i_reg_717 <= tmp_5_i_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = tmp_7_i_reg_768) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0) and (tmp_14_i_fu_415_p2 = ap_const_lv1_1))) then
                vector_V_0 <= grp_fu_703_p3(41 downto 10);
            end if;
        end if;
    end process;
    ind_i_fu_106(31 downto 3) <= "00000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, tmp_5_i_fu_272_p2, ap_enable_reg_pp0_iter0, tmp_7_i_fu_319_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_CS_fsm_state12, tmp_9_i_fu_649_p2, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_block_pp0_stage0_flag00011011, ap_block_pp1_stage0_flag00011011, ap_enable_reg_pp1_iter1, ap_block_pp1_stage3_flag00011011, ap_block_pp1_stage2_flag00011011, tmp_15_i_fu_655_p2, tmp_19_i_fu_672_p2, ap_block_pp1_stage1_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (tmp_5_i_fu_272_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (tmp_5_i_fu_272_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (tmp_7_i_fu_319_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (tmp_7_i_fu_319_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_block_pp1_stage1_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if (((ap_block_pp1_stage2_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_block_pp1_stage3_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_9_i_fu_649_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_15_i_fu_655_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = tmp_19_i_fu_672_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
        OP1_V_1_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_6_i_reg_805),32));

        OP1_V_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_i_reg_795),32));

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(7);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state14 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(11);
    ap_CS_fsm_state17 <= ap_CS_fsm(12);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_5_i_fu_272_p2)
    begin
        if ((tmp_5_i_fu_272_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(tmp_7_i_fu_319_p2)
    begin
        if ((tmp_7_i_fu_319_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    aux_array_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state4, ap_block_pp0_stage0_flag00000000, ap_block_pp1_stage0_flag00000000, i_4_cast_i_fu_284_p1, tmp_cast_i_fu_346_p1, i_5_cast_i_fu_371_p1, ap_block_pp1_stage1_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00000000 = ap_const_boolean_0))) then 
            aux_array_V_address0 <= i_5_cast_i_fu_371_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            aux_array_V_address0 <= tmp_cast_i_fu_346_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            aux_array_V_address0 <= ap_const_lv12_800;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            aux_array_V_address0 <= i_4_cast_i_fu_284_p1(12 - 1 downto 0);
        else 
            aux_array_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    aux_array_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state15, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, ap_block_pp1_stage0_flag00000000, i_cast25_i_fu_289_p1, ap_block_pp1_stage1_flag00000000, i_3_cast22_i_fu_684_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            aux_array_V_address1 <= i_3_cast22_i_fu_684_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00000000 = ap_const_boolean_0))) then 
            aux_array_V_address1 <= ap_const_lv12_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            aux_array_V_address1 <= ap_const_lv12_400;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            aux_array_V_address1 <= i_cast25_i_fu_289_p1(12 - 1 downto 0);
        else 
            aux_array_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    aux_array_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_flag00011001, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0)))) then 
            aux_array_V_ce0 <= ap_const_logic_1;
        else 
            aux_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_array_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_flag00011001, ap_CS_fsm_state15, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0)))) then 
            aux_array_V_ce1 <= ap_const_logic_1;
        else 
            aux_array_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    aux_array_V_d1_assign_proc : process(aux_array_V_q0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state15, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            aux_array_V_d1 <= ap_const_lv24_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            aux_array_V_d1 <= aux_array_V_q0;
        else 
            aux_array_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    aux_array_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            aux_array_V_we0 <= ap_const_logic_1;
        else 
            aux_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_array_V_we1_assign_proc : process(tmp_5_i_reg_717, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_state15, ap_enable_reg_pp0_iter1, tmp_19_i_fu_672_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_5_i_reg_717 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = tmp_19_i_fu_672_p2)))) then 
            aux_array_V_we1 <= ap_const_logic_1;
        else 
            aux_array_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cont32_fu_542_p2 <= std_logic_vector(unsigned(cont_i_fu_110) + unsigned(ap_const_lv32_1));
    contNuevoSuma_1_i_fu_562_p3 <= 
        ap_const_lv32_0 when (ap_reg_pp1_iter1_reset_assign_reg_788(0) = '1') else 
        contNuevoSuma_1_fu_98;
    contNuevoSuma_fu_603_p2 <= std_logic_vector(unsigned(contNuevoSuma_1_i_fu_562_p3) + unsigned(ap_const_lv32_1));
    contNuevo_0_op_i_fu_427_p2 <= std_logic_vector(unsigned(contNuevo_fu_102) + unsigned(ap_const_lv32_1));

    currentGroupX_OUT_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage3, currentGroupX_OUT_V_s_reg_831, currentGroupX_OUT_V_1_reg_842, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000, ap_block_pp1_stage1_flag00000000, ap_block_pp1_stage3_flag00000000, contNuevoSuma_1_i_fu_562_p3, ind_i_fu_106, ap_block_pp1_stage2_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage2_flag00000000 = ap_const_boolean_0))) then 
            currentGroupX_OUT_V_address0 <= currentGroupX_OUT_V_1_reg_842;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage1_flag00000000 = ap_const_boolean_0))) then 
            currentGroupX_OUT_V_address0 <= contNuevoSuma_1_i_fu_562_p3(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            currentGroupX_OUT_V_address0 <= currentGroupX_OUT_V_s_reg_831;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00000000 = ap_const_boolean_0))) then 
            currentGroupX_OUT_V_address0 <= ind_i_fu_106(2 - 1 downto 0);
        else 
            currentGroupX_OUT_V_address0 <= "XX";
        end if; 
    end process;


    currentGroupX_OUT_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_flag00011001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_flag00011001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_flag00011001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)))) then 
            currentGroupX_OUT_V_ce0 <= ap_const_logic_1;
        else 
            currentGroupX_OUT_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    currentGroupX_OUT_V_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000, p_Val2_6_fu_531_p4, p_Val2_10_fu_634_p1, ap_block_pp1_stage2_flag00000000)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp1_iter1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00000000 = ap_const_boolean_0))) then 
                currentGroupX_OUT_V_d0 <= p_Val2_10_fu_634_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
                currentGroupX_OUT_V_d0 <= p_Val2_6_fu_531_p4;
            else 
                currentGroupX_OUT_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            currentGroupX_OUT_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    currentGroupX_OUT_V_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_flag00011001, tmp_14_i_reg_821, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (tmp_14_i_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00011001 = ap_const_boolean_0) and (tmp_14_i_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)))) then 
            currentGroupX_OUT_V_we0 <= ap_const_logic_1;
        else 
            currentGroupX_OUT_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_695_p0 <= OP1_V_fu_375_p1(16 - 1 downto 0);
    grp_fu_695_p1 <= OP1_V_fu_375_p1(16 - 1 downto 0);
    grp_fu_703_p0 <= OP1_V_1_fu_403_p1(16 - 1 downto 0);
    grp_fu_703_p1 <= OP1_V_1_fu_403_p1(16 - 1 downto 0);
    i_1_cast24_i_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_i_phi_fu_232_p4),32));
    i_1_cast_i_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_i_phi_fu_232_p4),12));

    i_1_i_phi_fu_232_p4_assign_proc : process(i_1_i_reg_228, tmp_7_i_reg_768, ap_CS_fsm_pp1_stage0, i_2_reg_772, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = tmp_7_i_reg_768) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_1_i_phi_fu_232_p4 <= i_2_reg_772;
        else 
            i_1_i_phi_fu_232_p4 <= i_1_i_reg_228;
        end if; 
    end process;

    i_2_cast23_i_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_i_reg_239),32));
    i_2_fu_325_p2 <= std_logic_vector(unsigned(i_1_i_phi_fu_232_p4) + unsigned(ap_const_lv11_1));
    i_3_cast22_i_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i_reg_250),32));
    i_3_fu_661_p2 <= std_logic_vector(unsigned(i_2_i_reg_239) + unsigned(ap_const_lv11_1));
    i_4_cast_i_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_278_p2),32));
    i_4_fu_678_p2 <= std_logic_vector(unsigned(i_3_i_reg_250) + unsigned(ap_const_lv12_1));
    i_5_cast_i_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_772),32));
    i_cast25_i_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_216),32));
    i_fu_278_p2 <= std_logic_vector(unsigned(i_i_phi_fu_220_p4) + unsigned(ap_const_lv12_1));

    i_i_phi_fu_220_p4_assign_proc : process(i_i_reg_216, tmp_5_i_reg_717, ap_CS_fsm_pp0_stage0, i_reg_721, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_5_i_reg_717 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_i_phi_fu_220_p4 <= i_reg_721;
        else 
            i_i_phi_fu_220_p4 <= i_i_reg_216;
        end if; 
    end process;

    ind16_cast_fu_580_p2 <= std_logic_vector(unsigned(tmp_1_reg_815) + unsigned(ap_const_lv3_1));
    indPar_fu_548_p2 <= std_logic_vector(unsigned(p_Val2_3_fu_114) + unsigned(ap_const_lv32_1));
    minimoX_0_fu_520_p2 <= (tmp6_fu_514_p2 and tmp_fu_508_p2);
    not_reset_i_fu_492_p2 <= (reset_assign_reg_788 xor ap_const_lv1_1);
    p_Val2_10_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_7_fu_624_p4),32));
    p_Val2_2_i_fu_365_p2 <= std_logic_vector(unsigned(tmp_2_fu_357_p1) - unsigned(tmp_3_fu_361_p1));
    p_Val2_5_fu_450_p3 <= 
        ap_const_lv32_0 when (reset_assign_reg_788(0) = '1') else 
        vector_V_0;
    
    p_Val2_6_fu_531_p4_proc : process(currentGroupX_OUT_V_q0, cont_i_fu_110, minimoX_0_fu_520_p2)
    begin
        p_Val2_6_fu_531_p4 <= currentGroupX_OUT_V_q0;
        if to_integer(unsigned(cont_i_fu_110)) >= currentGroupX_OUT_V_q0'low and to_integer(unsigned(cont_i_fu_110)) <= currentGroupX_OUT_V_q0'high then
            p_Val2_6_fu_531_p4(to_integer(unsigned(cont_i_fu_110))) <= minimoX_0_fu_520_p2(0);
        end if;
    end process;

    p_Val2_6_i_fu_386_p2 <= std_logic_vector(unsigned(tmp_4_fu_378_p1) - unsigned(tmp_5_fu_382_p1));
    p_Val2_7_fu_624_p4 <= currentGroupX_OUT_V_q0(31 downto 1);
    p_Val2_i1_fu_457_p2 <= std_logic_vector(unsigned(valorAuxVinout_0_V_fu_406_p4) - unsigned(p_Val2_5_fu_450_p3));
    p_i_fu_585_p3 <= 
        ap_const_lv32_0 when (tmp_17_i_fu_575_p2(0) = '1') else 
        cont32_reg_836;
    p_ind_i_cast_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_ind_i_fu_592_p3),32));
    p_ind_i_fu_592_p3 <= 
        ind16_cast_fu_580_p2 when (tmp_17_i_fu_575_p2(0) = '1') else 
        tmp_1_reg_815;
    phitmp_i_fu_433_p3 <= 
        ap_const_lv32_1 when (tmp_18_i_fu_421_p2(0) = '1') else 
        contNuevo_0_op_i_fu_427_p2;
    reset_assign_fu_351_p2 <= "1" when (i_1_i_phi_fu_232_p4 = ap_const_lv11_0) else "0";

    sum_V_address0_assign_proc : process(ap_enable_reg_pp1_iter0, sum_V_addr_reg_783, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage3, ap_CS_fsm_state13, ap_block_pp1_stage1_flag00000000, ap_block_pp1_stage3_flag00000000, i_2_cast23_i_fu_667_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sum_V_address0 <= i_2_cast23_i_fu_667_p1(10 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00000000 = ap_const_boolean_0)))) then 
            sum_V_address0 <= sum_V_addr_reg_783;
        else 
            sum_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sum_V_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_flag00011001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_flag00011001, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0)))) then 
            sum_V_ce0 <= ap_const_logic_1;
        else 
            sum_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_V_d0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_CS_fsm_state13, ap_block_pp1_stage3_flag00000000, grp_fu_703_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sum_V_d0 <= ap_const_lv42_0;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00000000 = ap_const_boolean_0))) then 
            sum_V_d0 <= grp_fu_703_p3;
        else 
            sum_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_V_we0_assign_proc : process(tmp_7_i_reg_768, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_flag00011001, ap_CS_fsm_state13, tmp_15_i_fu_655_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_15_i_fu_655_p2)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = tmp_7_i_reg_768) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_flag00011001 = ap_const_boolean_0)))) then 
            sum_V_we0 <= ap_const_logic_1;
        else 
            sum_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp6_fu_514_p2 <= (tmp_1_i4_fu_497_p2 and tmp_3_i5_fu_502_p2);
    tmp_14_i_fu_415_p2 <= "1" when (contNuevo_fu_102 = ap_const_lv32_0) else "0";
    tmp_15_i_fu_655_p2 <= "1" when (i_2_i_reg_239 = ap_const_lv11_400) else "0";
    tmp_17_i_fu_575_p2 <= "1" when (cont32_reg_836 = ap_const_lv32_20) else "0";
    tmp_18_i_fu_421_p2 <= "1" when (contNuevo_fu_102 = ap_const_lv32_7) else "0";
    tmp_19_i_fu_672_p2 <= "1" when (i_3_i_reg_250 = ap_const_lv12_801) else "0";
    tmp_1_fu_399_p1 <= ind_i_fu_106(3 - 1 downto 0);
    tmp_1_i4_fu_497_p2 <= "1" when (signed(p_Val2_i1_reg_825) > signed(ap_const_lv32_0)) else "0";
    tmp_2_fu_357_p1 <= aux_array_V_q1(16 - 1 downto 0);
    tmp_3_fu_361_p1 <= aux_array_V_q0(16 - 1 downto 0);
    tmp_3_i5_fu_502_p2 <= "1" when (signed(p_Val2_3_fu_114) > signed(ap_const_lv32_2)) else "0";
    tmp_4_fu_378_p1 <= aux_array_V_q1(16 - 1 downto 0);
    tmp_5_fu_382_p1 <= aux_array_V_q0(16 - 1 downto 0);
    tmp_5_i_fu_272_p2 <= "1" when (i_i_phi_fu_220_p4 = ap_const_lv12_800) else "0";
    tmp_6_fu_484_p3 <= derivada_V_0(31 downto 31);
    tmp_7_i_fu_319_p2 <= "1" when (i_1_i_phi_fu_232_p4 = ap_const_lv11_400) else "0";
    tmp_8_i_fu_643_p2 <= std_logic_vector(unsigned(contador) + unsigned(ap_const_lv32_1));
    tmp_9_i_fu_649_p2 <= "1" when (tmp_8_i_fu_643_p2 = ap_const_lv32_801) else "0";
    tmp_cast_i_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_11_fu_340_p2),32));
    tmp_fu_508_p2 <= (tmp_6_fu_484_p3 and not_reset_i_fu_492_p2);
    tmp_i_11_fu_340_p2 <= std_logic_vector(unsigned(ap_const_lv12_401) + unsigned(i_1_cast_i_fu_336_p1));
    valorAuxVinout_0_V_fu_406_p4 <= grp_fu_703_p3(41 downto 10);
end behav;
