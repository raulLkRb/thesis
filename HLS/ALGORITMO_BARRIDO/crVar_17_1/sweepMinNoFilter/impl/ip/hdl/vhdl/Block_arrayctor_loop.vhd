-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_arrayctor_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    full_fifo_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    full_fifo_empty_n : IN STD_LOGIC;
    full_fifo_read : OUT STD_LOGIC;
    buf_DISTANCEX_out_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_DISTANCEX_out_V_ce0 : OUT STD_LOGIC;
    buf_DISTANCEX_out_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_AX_ALG_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_AX_ALG_TVALID : OUT STD_LOGIC;
    output_AX_ALG_TREADY : IN STD_LOGIC;
    output_AX_ALG_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALG_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALG_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALG_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_AX_ALG_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_AX_ALG_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of Block_arrayctor_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output_AX_ALG_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal output_AX_ALG_data_V_1_vld_in : STD_LOGIC;
    signal output_AX_ALG_data_V_1_vld_out : STD_LOGIC;
    signal output_AX_ALG_data_V_1_ack_in : STD_LOGIC;
    signal output_AX_ALG_data_V_1_ack_out : STD_LOGIC;
    signal output_AX_ALG_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal output_AX_ALG_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal output_AX_ALG_data_V_1_sel_rd : STD_LOGIC := '0';
    signal output_AX_ALG_data_V_1_sel_wr : STD_LOGIC := '0';
    signal output_AX_ALG_data_V_1_sel : STD_LOGIC;
    signal output_AX_ALG_data_V_1_load_A : STD_LOGIC;
    signal output_AX_ALG_data_V_1_load_B : STD_LOGIC;
    signal output_AX_ALG_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_AX_ALG_data_V_1_state_cmp_full : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_keep_V_1_vld_in : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_vld_out : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_ack_in : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_ack_out : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal output_AX_ALG_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal output_AX_ALG_keep_V_1_sel : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_load_A : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_load_B : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_AX_ALG_keep_V_1_state_cmp_full : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_strb_V_1_vld_in : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_vld_out : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_ack_in : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_ack_out : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal output_AX_ALG_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal output_AX_ALG_strb_V_1_sel : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_load_A : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_load_B : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_AX_ALG_strb_V_1_state_cmp_full : STD_LOGIC;
    signal output_AX_ALG_user_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_user_V_1_vld_in : STD_LOGIC;
    signal output_AX_ALG_user_V_1_vld_out : STD_LOGIC;
    signal output_AX_ALG_user_V_1_ack_in : STD_LOGIC;
    signal output_AX_ALG_user_V_1_ack_out : STD_LOGIC;
    signal output_AX_ALG_user_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_user_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_user_V_1_sel_rd : STD_LOGIC := '0';
    signal output_AX_ALG_user_V_1_sel_wr : STD_LOGIC := '0';
    signal output_AX_ALG_user_V_1_sel : STD_LOGIC;
    signal output_AX_ALG_user_V_1_load_A : STD_LOGIC;
    signal output_AX_ALG_user_V_1_load_B : STD_LOGIC;
    signal output_AX_ALG_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_AX_ALG_user_V_1_state_cmp_full : STD_LOGIC;
    signal output_AX_ALG_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_AX_ALG_last_V_1_vld_in : STD_LOGIC;
    signal output_AX_ALG_last_V_1_vld_out : STD_LOGIC;
    signal output_AX_ALG_last_V_1_ack_in : STD_LOGIC;
    signal output_AX_ALG_last_V_1_ack_out : STD_LOGIC;
    signal output_AX_ALG_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_AX_ALG_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_AX_ALG_last_V_1_sel_rd : STD_LOGIC := '0';
    signal output_AX_ALG_last_V_1_sel_wr : STD_LOGIC := '0';
    signal output_AX_ALG_last_V_1_sel : STD_LOGIC;
    signal output_AX_ALG_last_V_1_load_A : STD_LOGIC;
    signal output_AX_ALG_last_V_1_load_B : STD_LOGIC;
    signal output_AX_ALG_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_AX_ALG_last_V_1_state_cmp_full : STD_LOGIC;
    signal output_AX_ALG_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal output_AX_ALG_id_V_1_vld_in : STD_LOGIC;
    signal output_AX_ALG_id_V_1_vld_out : STD_LOGIC;
    signal output_AX_ALG_id_V_1_ack_in : STD_LOGIC;
    signal output_AX_ALG_id_V_1_ack_out : STD_LOGIC;
    signal output_AX_ALG_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal output_AX_ALG_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal output_AX_ALG_id_V_1_sel_rd : STD_LOGIC := '0';
    signal output_AX_ALG_id_V_1_sel_wr : STD_LOGIC := '0';
    signal output_AX_ALG_id_V_1_sel : STD_LOGIC;
    signal output_AX_ALG_id_V_1_load_A : STD_LOGIC;
    signal output_AX_ALG_id_V_1_load_B : STD_LOGIC;
    signal output_AX_ALG_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_AX_ALG_id_V_1_state_cmp_full : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal output_AX_ALG_dest_V_1_vld_in : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_vld_out : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_ack_in : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_ack_out : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal output_AX_ALG_dest_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal output_AX_ALG_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal output_AX_ALG_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal output_AX_ALG_dest_V_1_sel : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_load_A : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_load_B : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_AX_ALG_dest_V_1_state_cmp_full : STD_LOGIC;
    signal full_fifo_blk_n : STD_LOGIC;
    signal grp_write_data_fu_46_ap_start : STD_LOGIC;
    signal grp_write_data_fu_46_ap_done : STD_LOGIC;
    signal grp_write_data_fu_46_ap_idle : STD_LOGIC;
    signal grp_write_data_fu_46_ap_ready : STD_LOGIC;
    signal grp_write_data_fu_46_buf_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_data_fu_46_buf_V_ce0 : STD_LOGIC;
    signal grp_write_data_fu_46_output_AX_ALG_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_data_fu_46_output_AX_ALG_TVALID : STD_LOGIC;
    signal grp_write_data_fu_46_output_AX_ALG_TREADY : STD_LOGIC;
    signal grp_write_data_fu_46_output_AX_ALG_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_data_fu_46_output_AX_ALG_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_data_fu_46_output_AX_ALG_TUSER : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_data_fu_46_output_AX_ALG_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_data_fu_46_output_AX_ALG_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_write_data_fu_46_output_AX_ALG_TDEST : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_grp_write_data_fu_46_ap_start : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call0 : BOOLEAN;
    signal tmp_i_fu_66_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component write_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_V_ce0 : OUT STD_LOGIC;
        buf_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_AX_ALG_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_AX_ALG_TVALID : OUT STD_LOGIC;
        output_AX_ALG_TREADY : IN STD_LOGIC;
        output_AX_ALG_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALG_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALG_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALG_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_AX_ALG_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_AX_ALG_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    grp_write_data_fu_46 : component write_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_write_data_fu_46_ap_start,
        ap_done => grp_write_data_fu_46_ap_done,
        ap_idle => grp_write_data_fu_46_ap_idle,
        ap_ready => grp_write_data_fu_46_ap_ready,
        buf_V_address0 => grp_write_data_fu_46_buf_V_address0,
        buf_V_ce0 => grp_write_data_fu_46_buf_V_ce0,
        buf_V_q0 => buf_DISTANCEX_out_V_q0,
        output_AX_ALG_TDATA => grp_write_data_fu_46_output_AX_ALG_TDATA,
        output_AX_ALG_TVALID => grp_write_data_fu_46_output_AX_ALG_TVALID,
        output_AX_ALG_TREADY => grp_write_data_fu_46_output_AX_ALG_TREADY,
        output_AX_ALG_TKEEP => grp_write_data_fu_46_output_AX_ALG_TKEEP,
        output_AX_ALG_TSTRB => grp_write_data_fu_46_output_AX_ALG_TSTRB,
        output_AX_ALG_TUSER => grp_write_data_fu_46_output_AX_ALG_TUSER,
        output_AX_ALG_TLAST => grp_write_data_fu_46_output_AX_ALG_TLAST,
        output_AX_ALG_TID => grp_write_data_fu_46_output_AX_ALG_TID,
        output_AX_ALG_TDEST => grp_write_data_fu_46_output_AX_ALG_TDEST);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and not(((ap_const_logic_0 = output_AX_ALG_data_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_keep_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_strb_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_user_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_last_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_id_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_dest_V_1_ack_in))))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_write_data_fu_46_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_write_data_fu_46_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = full_fifo_empty_n))) and (ap_const_lv1_1 = tmp_i_fu_66_p2))) then 
                    ap_reg_grp_write_data_fu_46_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_write_data_fu_46_ap_ready)) then 
                    ap_reg_grp_write_data_fu_46_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_data_V_1_ack_out) and (ap_const_logic_1 = output_AX_ALG_data_V_1_vld_out))) then 
                                        output_AX_ALG_data_V_1_sel_rd <= not(output_AX_ALG_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_data_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_data_V_1_ack_in))) then 
                                        output_AX_ALG_data_V_1_sel_wr <= not(output_AX_ALG_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_AX_ALG_data_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_data_V_1_ack_out) and (output_AX_ALG_data_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = output_AX_ALG_data_V_1_vld_in) and (output_AX_ALG_data_V_1_state = ap_const_lv2_2)))) then 
                    output_AX_ALG_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_AX_ALG_data_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_data_V_1_ack_out) and (output_AX_ALG_data_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = output_AX_ALG_data_V_1_ack_out) and (output_AX_ALG_data_V_1_state = ap_const_lv2_1)))) then 
                    output_AX_ALG_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_AX_ALG_data_V_1_vld_in) and (output_AX_ALG_data_V_1_state = ap_const_lv2_2)) or ((ap_const_logic_1 = output_AX_ALG_data_V_1_ack_out) and (output_AX_ALG_data_V_1_state = ap_const_lv2_1)) or ((output_AX_ALG_data_V_1_state = ap_const_lv2_3) and not(((ap_const_logic_1 = output_AX_ALG_data_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_data_V_1_ack_out))) and not(((ap_const_logic_0 = output_AX_ALG_data_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_data_V_1_ack_out)))))) then 
                    output_AX_ALG_data_V_1_state <= ap_const_lv2_3;
                else 
                    output_AX_ALG_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_dest_V_1_ack_out) and (ap_const_logic_1 = output_AX_ALG_dest_V_1_vld_out))) then 
                                        output_AX_ALG_dest_V_1_sel_rd <= not(output_AX_ALG_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_dest_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_dest_V_1_ack_in))) then 
                                        output_AX_ALG_dest_V_1_sel_wr <= not(output_AX_ALG_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_AX_ALG_dest_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_dest_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_dest_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_dest_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_dest_V_1_state)))) then 
                    output_AX_ALG_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_AX_ALG_dest_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_dest_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_dest_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_dest_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_dest_V_1_state)))) then 
                    output_AX_ALG_dest_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_AX_ALG_dest_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_dest_V_1_state)) or ((ap_const_logic_1 = output_AX_ALG_dest_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_dest_V_1_state)) or ((ap_const_lv2_3 = output_AX_ALG_dest_V_1_state) and not(((ap_const_logic_1 = output_AX_ALG_dest_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_dest_V_1_ack_out))) and not(((ap_const_logic_0 = output_AX_ALG_dest_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_dest_V_1_ack_out)))))) then 
                    output_AX_ALG_dest_V_1_state <= ap_const_lv2_3;
                else 
                    output_AX_ALG_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_id_V_1_ack_out) and (ap_const_logic_1 = output_AX_ALG_id_V_1_vld_out))) then 
                                        output_AX_ALG_id_V_1_sel_rd <= not(output_AX_ALG_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_id_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_id_V_1_ack_in))) then 
                                        output_AX_ALG_id_V_1_sel_wr <= not(output_AX_ALG_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_AX_ALG_id_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_id_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_id_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_id_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_id_V_1_state)))) then 
                    output_AX_ALG_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_AX_ALG_id_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_id_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_id_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_id_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_id_V_1_state)))) then 
                    output_AX_ALG_id_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_AX_ALG_id_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_id_V_1_state)) or ((ap_const_logic_1 = output_AX_ALG_id_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_id_V_1_state)) or ((ap_const_lv2_3 = output_AX_ALG_id_V_1_state) and not(((ap_const_logic_1 = output_AX_ALG_id_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_id_V_1_ack_out))) and not(((ap_const_logic_0 = output_AX_ALG_id_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_id_V_1_ack_out)))))) then 
                    output_AX_ALG_id_V_1_state <= ap_const_lv2_3;
                else 
                    output_AX_ALG_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_keep_V_1_ack_out) and (ap_const_logic_1 = output_AX_ALG_keep_V_1_vld_out))) then 
                                        output_AX_ALG_keep_V_1_sel_rd <= not(output_AX_ALG_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_keep_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_keep_V_1_ack_in))) then 
                                        output_AX_ALG_keep_V_1_sel_wr <= not(output_AX_ALG_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_AX_ALG_keep_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_keep_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_keep_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_keep_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_keep_V_1_state)))) then 
                    output_AX_ALG_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_AX_ALG_keep_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_keep_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_keep_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_keep_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_keep_V_1_state)))) then 
                    output_AX_ALG_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_AX_ALG_keep_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_keep_V_1_state)) or ((ap_const_logic_1 = output_AX_ALG_keep_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_keep_V_1_state)) or ((ap_const_lv2_3 = output_AX_ALG_keep_V_1_state) and not(((ap_const_logic_1 = output_AX_ALG_keep_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_keep_V_1_ack_out))) and not(((ap_const_logic_0 = output_AX_ALG_keep_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_keep_V_1_ack_out)))))) then 
                    output_AX_ALG_keep_V_1_state <= ap_const_lv2_3;
                else 
                    output_AX_ALG_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_last_V_1_ack_out) and (ap_const_logic_1 = output_AX_ALG_last_V_1_vld_out))) then 
                                        output_AX_ALG_last_V_1_sel_rd <= not(output_AX_ALG_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_last_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_last_V_1_ack_in))) then 
                                        output_AX_ALG_last_V_1_sel_wr <= not(output_AX_ALG_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_AX_ALG_last_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_last_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_last_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_last_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_last_V_1_state)))) then 
                    output_AX_ALG_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_AX_ALG_last_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_last_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_last_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_last_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_last_V_1_state)))) then 
                    output_AX_ALG_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_AX_ALG_last_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_last_V_1_state)) or ((ap_const_logic_1 = output_AX_ALG_last_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_last_V_1_state)) or ((ap_const_lv2_3 = output_AX_ALG_last_V_1_state) and not(((ap_const_logic_1 = output_AX_ALG_last_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_last_V_1_ack_out))) and not(((ap_const_logic_0 = output_AX_ALG_last_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_last_V_1_ack_out)))))) then 
                    output_AX_ALG_last_V_1_state <= ap_const_lv2_3;
                else 
                    output_AX_ALG_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_strb_V_1_ack_out) and (ap_const_logic_1 = output_AX_ALG_strb_V_1_vld_out))) then 
                                        output_AX_ALG_strb_V_1_sel_rd <= not(output_AX_ALG_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_strb_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_strb_V_1_ack_in))) then 
                                        output_AX_ALG_strb_V_1_sel_wr <= not(output_AX_ALG_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_AX_ALG_strb_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_strb_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_strb_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_strb_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_strb_V_1_state)))) then 
                    output_AX_ALG_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_AX_ALG_strb_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_strb_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_strb_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_strb_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_strb_V_1_state)))) then 
                    output_AX_ALG_strb_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_AX_ALG_strb_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_strb_V_1_state)) or ((ap_const_logic_1 = output_AX_ALG_strb_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_strb_V_1_state)) or ((ap_const_lv2_3 = output_AX_ALG_strb_V_1_state) and not(((ap_const_logic_1 = output_AX_ALG_strb_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_strb_V_1_ack_out))) and not(((ap_const_logic_0 = output_AX_ALG_strb_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_strb_V_1_ack_out)))))) then 
                    output_AX_ALG_strb_V_1_state <= ap_const_lv2_3;
                else 
                    output_AX_ALG_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_user_V_1_ack_out) and (ap_const_logic_1 = output_AX_ALG_user_V_1_vld_out))) then 
                                        output_AX_ALG_user_V_1_sel_rd <= not(output_AX_ALG_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_user_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_user_V_1_ack_in))) then 
                                        output_AX_ALG_user_V_1_sel_wr <= not(output_AX_ALG_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_AX_ALG_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_AX_ALG_user_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_user_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_user_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_user_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_user_V_1_state)))) then 
                    output_AX_ALG_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_AX_ALG_user_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_user_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_user_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_user_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_user_V_1_state)))) then 
                    output_AX_ALG_user_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_AX_ALG_user_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_user_V_1_state)) or ((ap_const_logic_1 = output_AX_ALG_user_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_user_V_1_state)) or ((ap_const_lv2_3 = output_AX_ALG_user_V_1_state) and not(((ap_const_logic_1 = output_AX_ALG_user_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_user_V_1_ack_out))) and not(((ap_const_logic_0 = output_AX_ALG_user_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_user_V_1_ack_out)))))) then 
                    output_AX_ALG_user_V_1_state <= ap_const_lv2_3;
                else 
                    output_AX_ALG_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_data_V_1_load_A)) then
                output_AX_ALG_data_V_1_payload_A <= grp_write_data_fu_46_output_AX_ALG_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_data_V_1_load_B)) then
                output_AX_ALG_data_V_1_payload_B <= grp_write_data_fu_46_output_AX_ALG_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_dest_V_1_load_A)) then
                output_AX_ALG_dest_V_1_payload_A <= grp_write_data_fu_46_output_AX_ALG_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_dest_V_1_load_B)) then
                output_AX_ALG_dest_V_1_payload_B <= grp_write_data_fu_46_output_AX_ALG_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_id_V_1_load_A)) then
                output_AX_ALG_id_V_1_payload_A <= grp_write_data_fu_46_output_AX_ALG_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_id_V_1_load_B)) then
                output_AX_ALG_id_V_1_payload_B <= grp_write_data_fu_46_output_AX_ALG_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_keep_V_1_load_A)) then
                output_AX_ALG_keep_V_1_payload_A <= grp_write_data_fu_46_output_AX_ALG_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_keep_V_1_load_B)) then
                output_AX_ALG_keep_V_1_payload_B <= grp_write_data_fu_46_output_AX_ALG_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_last_V_1_load_A)) then
                output_AX_ALG_last_V_1_payload_A <= grp_write_data_fu_46_output_AX_ALG_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_last_V_1_load_B)) then
                output_AX_ALG_last_V_1_payload_B <= grp_write_data_fu_46_output_AX_ALG_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_strb_V_1_load_A)) then
                output_AX_ALG_strb_V_1_payload_A <= grp_write_data_fu_46_output_AX_ALG_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_strb_V_1_load_B)) then
                output_AX_ALG_strb_V_1_payload_B <= grp_write_data_fu_46_output_AX_ALG_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_user_V_1_load_A)) then
                output_AX_ALG_user_V_1_payload_A <= grp_write_data_fu_46_output_AX_ALG_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_user_V_1_load_B)) then
                output_AX_ALG_user_V_1_payload_B <= grp_write_data_fu_46_output_AX_ALG_TUSER;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, full_fifo_empty_n, output_AX_ALG_data_V_1_ack_in, output_AX_ALG_keep_V_1_ack_in, output_AX_ALG_strb_V_1_ack_in, output_AX_ALG_user_V_1_ack_in, output_AX_ALG_last_V_1_ack_in, output_AX_ALG_id_V_1_ack_in, output_AX_ALG_dest_V_1_ack_in, grp_write_data_fu_46_ap_done, tmp_i_fu_66_p2, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = full_fifo_empty_n))) and (ap_const_lv1_0 = tmp_i_fu_66_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = full_fifo_empty_n))) and (ap_const_lv1_1 = tmp_i_fu_66_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_write_data_fu_46_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and not(((ap_const_logic_0 = output_AX_ALG_data_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_keep_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_strb_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_user_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_last_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_id_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_dest_V_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, full_fifo_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = full_fifo_empty_n));
    end process;


    ap_block_state1_ignore_call0_assign_proc : process(ap_start, ap_done_reg, full_fifo_empty_n)
    begin
                ap_block_state1_ignore_call0 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = full_fifo_empty_n));
    end process;


    ap_block_state3_assign_proc : process(output_AX_ALG_data_V_1_ack_in, output_AX_ALG_keep_V_1_ack_in, output_AX_ALG_strb_V_1_ack_in, output_AX_ALG_user_V_1_ack_in, output_AX_ALG_last_V_1_ack_in, output_AX_ALG_id_V_1_ack_in, output_AX_ALG_dest_V_1_ack_in)
    begin
                ap_block_state3 <= ((ap_const_logic_0 = output_AX_ALG_data_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_keep_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_strb_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_user_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_last_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_id_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_dest_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(ap_done_reg, output_AX_ALG_data_V_1_ack_in, output_AX_ALG_keep_V_1_ack_in, output_AX_ALG_strb_V_1_ack_in, output_AX_ALG_user_V_1_ack_in, output_AX_ALG_last_V_1_ack_in, output_AX_ALG_id_V_1_ack_in, output_AX_ALG_dest_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and not(((ap_const_logic_0 = output_AX_ALG_data_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_keep_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_strb_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_user_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_last_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_id_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_dest_V_1_ack_in))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(output_AX_ALG_data_V_1_ack_in, output_AX_ALG_keep_V_1_ack_in, output_AX_ALG_strb_V_1_ack_in, output_AX_ALG_user_V_1_ack_in, output_AX_ALG_last_V_1_ack_in, output_AX_ALG_id_V_1_ack_in, output_AX_ALG_dest_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and not(((ap_const_logic_0 = output_AX_ALG_data_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_keep_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_strb_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_user_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_last_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_id_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_dest_V_1_ack_in))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buf_DISTANCEX_out_V_address0 <= grp_write_data_fu_46_buf_V_address0;
    buf_DISTANCEX_out_V_ce0 <= grp_write_data_fu_46_buf_V_ce0;

    full_fifo_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, full_fifo_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            full_fifo_blk_n <= full_fifo_empty_n;
        else 
            full_fifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    full_fifo_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, full_fifo_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = full_fifo_empty_n))))) then 
            full_fifo_read <= ap_const_logic_1;
        else 
            full_fifo_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_write_data_fu_46_ap_start <= ap_reg_grp_write_data_fu_46_ap_start;
    grp_write_data_fu_46_output_AX_ALG_TREADY <= output_AX_ALG_dest_V_1_state(1);
    output_AX_ALG_TDATA <= output_AX_ALG_data_V_1_data_out;
    output_AX_ALG_TDEST <= output_AX_ALG_dest_V_1_data_out;
    output_AX_ALG_TID <= output_AX_ALG_id_V_1_data_out;
    output_AX_ALG_TKEEP <= output_AX_ALG_keep_V_1_data_out;
    output_AX_ALG_TLAST <= output_AX_ALG_last_V_1_data_out;
    output_AX_ALG_TSTRB <= output_AX_ALG_strb_V_1_data_out;
    output_AX_ALG_TUSER <= output_AX_ALG_user_V_1_data_out;
    output_AX_ALG_TVALID <= output_AX_ALG_dest_V_1_state(0);
    output_AX_ALG_data_V_1_ack_in <= output_AX_ALG_data_V_1_state(1);
    output_AX_ALG_data_V_1_ack_out <= output_AX_ALG_TREADY;

    output_AX_ALG_data_V_1_data_out_assign_proc : process(output_AX_ALG_data_V_1_payload_A, output_AX_ALG_data_V_1_payload_B, output_AX_ALG_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_AX_ALG_data_V_1_sel)) then 
            output_AX_ALG_data_V_1_data_out <= output_AX_ALG_data_V_1_payload_B;
        else 
            output_AX_ALG_data_V_1_data_out <= output_AX_ALG_data_V_1_payload_A;
        end if; 
    end process;

    output_AX_ALG_data_V_1_load_A <= (output_AX_ALG_data_V_1_state_cmp_full and not(output_AX_ALG_data_V_1_sel_wr));
    output_AX_ALG_data_V_1_load_B <= (output_AX_ALG_data_V_1_sel_wr and output_AX_ALG_data_V_1_state_cmp_full);
    output_AX_ALG_data_V_1_sel <= output_AX_ALG_data_V_1_sel_rd;
    output_AX_ALG_data_V_1_state_cmp_full <= '0' when (output_AX_ALG_data_V_1_state = ap_const_lv2_1) else '1';
    output_AX_ALG_data_V_1_vld_in <= grp_write_data_fu_46_output_AX_ALG_TVALID;
    output_AX_ALG_data_V_1_vld_out <= output_AX_ALG_data_V_1_state(0);
    output_AX_ALG_dest_V_1_ack_in <= output_AX_ALG_dest_V_1_state(1);
    output_AX_ALG_dest_V_1_ack_out <= output_AX_ALG_TREADY;

    output_AX_ALG_dest_V_1_data_out_assign_proc : process(output_AX_ALG_dest_V_1_payload_A, output_AX_ALG_dest_V_1_payload_B, output_AX_ALG_dest_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_AX_ALG_dest_V_1_sel)) then 
            output_AX_ALG_dest_V_1_data_out <= output_AX_ALG_dest_V_1_payload_B;
        else 
            output_AX_ALG_dest_V_1_data_out <= output_AX_ALG_dest_V_1_payload_A;
        end if; 
    end process;

    output_AX_ALG_dest_V_1_load_A <= (output_AX_ALG_dest_V_1_state_cmp_full and not(output_AX_ALG_dest_V_1_sel_wr));
    output_AX_ALG_dest_V_1_load_B <= (output_AX_ALG_dest_V_1_sel_wr and output_AX_ALG_dest_V_1_state_cmp_full);
    output_AX_ALG_dest_V_1_sel <= output_AX_ALG_dest_V_1_sel_rd;
    output_AX_ALG_dest_V_1_state_cmp_full <= '0' when (output_AX_ALG_dest_V_1_state = ap_const_lv2_1) else '1';
    output_AX_ALG_dest_V_1_vld_in <= grp_write_data_fu_46_output_AX_ALG_TVALID;
    output_AX_ALG_dest_V_1_vld_out <= output_AX_ALG_dest_V_1_state(0);
    output_AX_ALG_id_V_1_ack_in <= output_AX_ALG_id_V_1_state(1);
    output_AX_ALG_id_V_1_ack_out <= output_AX_ALG_TREADY;

    output_AX_ALG_id_V_1_data_out_assign_proc : process(output_AX_ALG_id_V_1_payload_A, output_AX_ALG_id_V_1_payload_B, output_AX_ALG_id_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_AX_ALG_id_V_1_sel)) then 
            output_AX_ALG_id_V_1_data_out <= output_AX_ALG_id_V_1_payload_B;
        else 
            output_AX_ALG_id_V_1_data_out <= output_AX_ALG_id_V_1_payload_A;
        end if; 
    end process;

    output_AX_ALG_id_V_1_load_A <= (output_AX_ALG_id_V_1_state_cmp_full and not(output_AX_ALG_id_V_1_sel_wr));
    output_AX_ALG_id_V_1_load_B <= (output_AX_ALG_id_V_1_sel_wr and output_AX_ALG_id_V_1_state_cmp_full);
    output_AX_ALG_id_V_1_sel <= output_AX_ALG_id_V_1_sel_rd;
    output_AX_ALG_id_V_1_state_cmp_full <= '0' when (output_AX_ALG_id_V_1_state = ap_const_lv2_1) else '1';
    output_AX_ALG_id_V_1_vld_in <= grp_write_data_fu_46_output_AX_ALG_TVALID;
    output_AX_ALG_id_V_1_vld_out <= output_AX_ALG_id_V_1_state(0);
    output_AX_ALG_keep_V_1_ack_in <= output_AX_ALG_keep_V_1_state(1);
    output_AX_ALG_keep_V_1_ack_out <= output_AX_ALG_TREADY;

    output_AX_ALG_keep_V_1_data_out_assign_proc : process(output_AX_ALG_keep_V_1_payload_A, output_AX_ALG_keep_V_1_payload_B, output_AX_ALG_keep_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_AX_ALG_keep_V_1_sel)) then 
            output_AX_ALG_keep_V_1_data_out <= output_AX_ALG_keep_V_1_payload_B;
        else 
            output_AX_ALG_keep_V_1_data_out <= output_AX_ALG_keep_V_1_payload_A;
        end if; 
    end process;

    output_AX_ALG_keep_V_1_load_A <= (output_AX_ALG_keep_V_1_state_cmp_full and not(output_AX_ALG_keep_V_1_sel_wr));
    output_AX_ALG_keep_V_1_load_B <= (output_AX_ALG_keep_V_1_sel_wr and output_AX_ALG_keep_V_1_state_cmp_full);
    output_AX_ALG_keep_V_1_sel <= output_AX_ALG_keep_V_1_sel_rd;
    output_AX_ALG_keep_V_1_state_cmp_full <= '0' when (output_AX_ALG_keep_V_1_state = ap_const_lv2_1) else '1';
    output_AX_ALG_keep_V_1_vld_in <= grp_write_data_fu_46_output_AX_ALG_TVALID;
    output_AX_ALG_keep_V_1_vld_out <= output_AX_ALG_keep_V_1_state(0);
    output_AX_ALG_last_V_1_ack_in <= output_AX_ALG_last_V_1_state(1);
    output_AX_ALG_last_V_1_ack_out <= output_AX_ALG_TREADY;

    output_AX_ALG_last_V_1_data_out_assign_proc : process(output_AX_ALG_last_V_1_payload_A, output_AX_ALG_last_V_1_payload_B, output_AX_ALG_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_AX_ALG_last_V_1_sel)) then 
            output_AX_ALG_last_V_1_data_out <= output_AX_ALG_last_V_1_payload_B;
        else 
            output_AX_ALG_last_V_1_data_out <= output_AX_ALG_last_V_1_payload_A;
        end if; 
    end process;

    output_AX_ALG_last_V_1_load_A <= (output_AX_ALG_last_V_1_state_cmp_full and not(output_AX_ALG_last_V_1_sel_wr));
    output_AX_ALG_last_V_1_load_B <= (output_AX_ALG_last_V_1_sel_wr and output_AX_ALG_last_V_1_state_cmp_full);
    output_AX_ALG_last_V_1_sel <= output_AX_ALG_last_V_1_sel_rd;
    output_AX_ALG_last_V_1_state_cmp_full <= '0' when (output_AX_ALG_last_V_1_state = ap_const_lv2_1) else '1';
    output_AX_ALG_last_V_1_vld_in <= grp_write_data_fu_46_output_AX_ALG_TVALID;
    output_AX_ALG_last_V_1_vld_out <= output_AX_ALG_last_V_1_state(0);
    output_AX_ALG_strb_V_1_ack_in <= output_AX_ALG_strb_V_1_state(1);
    output_AX_ALG_strb_V_1_ack_out <= output_AX_ALG_TREADY;

    output_AX_ALG_strb_V_1_data_out_assign_proc : process(output_AX_ALG_strb_V_1_payload_A, output_AX_ALG_strb_V_1_payload_B, output_AX_ALG_strb_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_AX_ALG_strb_V_1_sel)) then 
            output_AX_ALG_strb_V_1_data_out <= output_AX_ALG_strb_V_1_payload_B;
        else 
            output_AX_ALG_strb_V_1_data_out <= output_AX_ALG_strb_V_1_payload_A;
        end if; 
    end process;

    output_AX_ALG_strb_V_1_load_A <= (output_AX_ALG_strb_V_1_state_cmp_full and not(output_AX_ALG_strb_V_1_sel_wr));
    output_AX_ALG_strb_V_1_load_B <= (output_AX_ALG_strb_V_1_sel_wr and output_AX_ALG_strb_V_1_state_cmp_full);
    output_AX_ALG_strb_V_1_sel <= output_AX_ALG_strb_V_1_sel_rd;
    output_AX_ALG_strb_V_1_state_cmp_full <= '0' when (output_AX_ALG_strb_V_1_state = ap_const_lv2_1) else '1';
    output_AX_ALG_strb_V_1_vld_in <= grp_write_data_fu_46_output_AX_ALG_TVALID;
    output_AX_ALG_strb_V_1_vld_out <= output_AX_ALG_strb_V_1_state(0);
    output_AX_ALG_user_V_1_ack_in <= output_AX_ALG_user_V_1_state(1);
    output_AX_ALG_user_V_1_ack_out <= output_AX_ALG_TREADY;

    output_AX_ALG_user_V_1_data_out_assign_proc : process(output_AX_ALG_user_V_1_payload_A, output_AX_ALG_user_V_1_payload_B, output_AX_ALG_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_AX_ALG_user_V_1_sel)) then 
            output_AX_ALG_user_V_1_data_out <= output_AX_ALG_user_V_1_payload_B;
        else 
            output_AX_ALG_user_V_1_data_out <= output_AX_ALG_user_V_1_payload_A;
        end if; 
    end process;

    output_AX_ALG_user_V_1_load_A <= (output_AX_ALG_user_V_1_state_cmp_full and not(output_AX_ALG_user_V_1_sel_wr));
    output_AX_ALG_user_V_1_load_B <= (output_AX_ALG_user_V_1_sel_wr and output_AX_ALG_user_V_1_state_cmp_full);
    output_AX_ALG_user_V_1_sel <= output_AX_ALG_user_V_1_sel_rd;
    output_AX_ALG_user_V_1_state_cmp_full <= '0' when (output_AX_ALG_user_V_1_state = ap_const_lv2_1) else '1';
    output_AX_ALG_user_V_1_vld_in <= grp_write_data_fu_46_output_AX_ALG_TVALID;
    output_AX_ALG_user_V_1_vld_out <= output_AX_ALG_user_V_1_state(0);
    tmp_i_fu_66_p2 <= "1" when (full_fifo_dout = ap_const_lv32_0) else "0";
end behav;
