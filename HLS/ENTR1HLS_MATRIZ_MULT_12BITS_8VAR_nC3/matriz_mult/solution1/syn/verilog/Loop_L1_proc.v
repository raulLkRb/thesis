// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_L1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        X_OUT_0_address0,
        X_OUT_0_ce0,
        X_OUT_0_we0,
        X_OUT_0_d0,
        X_MAT_0_address0,
        X_MAT_0_ce0,
        X_MAT_0_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [1:0] X_OUT_0_address0;
output   X_OUT_0_ce0;
output   X_OUT_0_we0;
output  [31:0] X_OUT_0_d0;
output  [2:0] X_MAT_0_address0;
output   X_MAT_0_ce0;
input  [31:0] X_MAT_0_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_OUT_0_ce0;
reg X_OUT_0_we0;
reg X_MAT_0_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] coeff_address0;
reg    coeff_ce0;
wire   [31:0] coeff_q0;
wire   [31:0] ia_0_i_cast_fu_125_p1;
reg   [31:0] ia_0_i_cast_reg_183;
wire    ap_CS_fsm_state2;
wire   [5:0] tmp_2_cast_fu_137_p1;
reg   [5:0] tmp_2_cast_reg_188;
wire   [1:0] ia_fu_147_p2;
reg   [1:0] ia_reg_196;
wire   [31:0] ib_0_i_cast_fu_153_p1;
reg   [31:0] ib_0_i_cast_reg_201;
wire    ap_CS_fsm_state3;
wire   [3:0] ib_fu_177_p2;
reg   [3:0] ib_reg_214;
reg   [31:0] coeff_load_reg_219;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_120_p2;
reg   [31:0] tmp_8_reg_234;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_115_p2;
wire    ap_CS_fsm_state13;
reg   [1:0] ia_0_i_reg_80;
wire   [0:0] exitcond_i_fu_171_p2;
reg    ap_block_state1;
reg   [31:0] sum_0_i_reg_91;
wire   [0:0] exitcond2_i_fu_141_p2;
reg   [3:0] ib_0_i_reg_104;
wire   [31:0] tmp_3_cast_fu_166_p1;
wire    ap_CS_fsm_state9;
wire   [4:0] tmp_fu_129_p3;
wire   [5:0] ib_0_i_cast_cast_fu_157_p1;
wire   [5:0] tmp_3_fu_161_p2;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
end

Loop_L1_proc_coeff #(
    .DataWidth( 32 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
coeff_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(coeff_address0),
    .ce0(coeff_ce0),
    .q0(coeff_q0)
);

wrapped_mmult_hw_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
wrapped_mmult_hw_eOg_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_0_i_reg_91),
    .din1(tmp_8_reg_234),
    .ce(1'b1),
    .dout(grp_fu_115_p2)
);

wrapped_mmult_hw_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
wrapped_mmult_hw_fYi_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(coeff_load_reg_219),
    .din1(X_MAT_0_q0),
    .ce(1'b1),
    .dout(grp_fu_120_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_i_fu_141_p2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        ia_0_i_reg_80 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_i_fu_171_p2 == 1'd1))) begin
        ia_0_i_reg_80 <= ia_reg_196;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ib_0_i_reg_104 <= ib_reg_214;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_141_p2 == 1'd0))) begin
        ib_0_i_reg_104 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sum_0_i_reg_91 <= grp_fu_115_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_141_p2 == 1'd0))) begin
        sum_0_i_reg_91 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        coeff_load_reg_219 <= coeff_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ia_0_i_cast_reg_183[1 : 0] <= ia_0_i_cast_fu_125_p1[1 : 0];
        ia_reg_196 <= ia_fu_147_p2;
        tmp_2_cast_reg_188[4 : 3] <= tmp_2_cast_fu_137_p1[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ib_0_i_cast_reg_201[3 : 0] <= ib_0_i_cast_fu_153_p1[3 : 0];
        ib_reg_214 <= ib_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_8_reg_234 <= grp_fu_120_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        X_MAT_0_ce0 = 1'b1;
    end else begin
        X_MAT_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        X_OUT_0_ce0 = 1'b1;
    end else begin
        X_OUT_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_i_fu_171_p2 == 1'd1))) begin
        X_OUT_0_we0 = 1'b1;
    end else begin
        X_OUT_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_i_fu_141_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_i_fu_141_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        coeff_ce0 = 1'b1;
    end else begin
        coeff_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_i_fu_141_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_i_fu_171_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X_MAT_0_address0 = ib_0_i_cast_reg_201;

assign X_OUT_0_address0 = ia_0_i_cast_reg_183;

assign X_OUT_0_d0 = sum_0_i_reg_91;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign coeff_address0 = tmp_3_cast_fu_166_p1;

assign exitcond2_i_fu_141_p2 = ((ia_0_i_reg_80 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_i_fu_171_p2 = ((ib_0_i_reg_104 == 4'd8) ? 1'b1 : 1'b0);

assign ia_0_i_cast_fu_125_p1 = ia_0_i_reg_80;

assign ia_fu_147_p2 = (ia_0_i_reg_80 + 2'd1);

assign ib_0_i_cast_cast_fu_157_p1 = ib_0_i_reg_104;

assign ib_0_i_cast_fu_153_p1 = ib_0_i_reg_104;

assign ib_fu_177_p2 = (ib_0_i_reg_104 + 4'd1);

assign tmp_2_cast_fu_137_p1 = tmp_fu_129_p3;

assign tmp_3_cast_fu_166_p1 = tmp_3_fu_161_p2;

assign tmp_3_fu_161_p2 = (tmp_2_cast_reg_188 + ib_0_i_cast_cast_fu_157_p1);

assign tmp_fu_129_p3 = {{ia_0_i_reg_80}, {3'd0}};

always @ (posedge ap_clk) begin
    ia_0_i_cast_reg_183[31:2] <= 30'b000000000000000000000000000000;
    tmp_2_cast_reg_188[2:0] <= 3'b000;
    tmp_2_cast_reg_188[5] <= 1'b0;
    ib_0_i_cast_reg_201[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //Loop_L1_proc
