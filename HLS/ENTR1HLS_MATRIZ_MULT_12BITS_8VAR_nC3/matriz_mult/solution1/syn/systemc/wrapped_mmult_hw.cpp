// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "wrapped_mmult_hw.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic wrapped_mmult_hw::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> wrapped_mmult_hw::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> wrapped_mmult_hw::ap_const_lv4_0 = "0000";
const sc_lv<1> wrapped_mmult_hw::ap_const_lv1_0 = "0";
const sc_lv<5> wrapped_mmult_hw::ap_const_lv5_0 = "00000";
const sc_logic wrapped_mmult_hw::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> wrapped_mmult_hw::ap_const_lv3_0 = "000";
const sc_lv<3> wrapped_mmult_hw::ap_const_lv3_1 = "1";
const sc_lv<32> wrapped_mmult_hw::ap_const_lv32_1 = "1";

wrapped_mmult_hw::wrapped_mmult_hw(sc_module_name name) : sc_module(name), mVcdFile(0) {
    dato_V_U = new wrapped_mmult_hw_g8j("dato_V_U");
    dato_V_U->clk(ap_clk);
    dato_V_U->reset(ap_rst_n_inv);
    dato_V_U->i_address0(read_data_U0_buf_V_address0);
    dato_V_U->i_ce0(read_data_U0_buf_V_ce0);
    dato_V_U->i_we0(read_data_U0_buf_V_we0);
    dato_V_U->i_d0(read_data_U0_buf_V_d0);
    dato_V_U->i_q0(dato_V_i_q0);
    dato_V_U->t_address0(Block_preheader117_U0_dato_V_address0);
    dato_V_U->t_ce0(Block_preheader117_U0_dato_V_ce0);
    dato_V_U->t_we0(ap_var_for_const0);
    dato_V_U->t_d0(ap_var_for_const1);
    dato_V_U->t_q0(dato_V_t_q0);
    dato_V_U->i_ce(ap_var_for_const2);
    dato_V_U->t_ce(ap_var_for_const2);
    dato_V_U->i_full_n(dato_V_i_full_n);
    dato_V_U->i_write(read_data_U0_ap_done);
    dato_V_U->t_empty_n(dato_V_t_empty_n);
    dato_V_U->t_read(Block_preheader117_U0_ap_ready);
    X_MAT_0_U = new wrapped_mmult_hw_hbi("X_MAT_0_U");
    X_MAT_0_U->clk(ap_clk);
    X_MAT_0_U->reset(ap_rst_n_inv);
    X_MAT_0_U->i_address0(Block_preheader117_U0_X_MAT_0_address0);
    X_MAT_0_U->i_ce0(Block_preheader117_U0_X_MAT_0_ce0);
    X_MAT_0_U->i_we0(Block_preheader117_U0_X_MAT_0_we0);
    X_MAT_0_U->i_d0(Block_preheader117_U0_X_MAT_0_d0);
    X_MAT_0_U->i_q0(X_MAT_0_i_q0);
    X_MAT_0_U->i_address1(Block_preheader117_U0_X_MAT_0_address1);
    X_MAT_0_U->i_ce1(Block_preheader117_U0_X_MAT_0_ce1);
    X_MAT_0_U->i_we1(Block_preheader117_U0_X_MAT_0_we1);
    X_MAT_0_U->i_d1(Block_preheader117_U0_X_MAT_0_d1);
    X_MAT_0_U->t_address0(Loop_L1_proc_U0_X_MAT_0_address0);
    X_MAT_0_U->t_ce0(Loop_L1_proc_U0_X_MAT_0_ce0);
    X_MAT_0_U->t_we0(ap_var_for_const0);
    X_MAT_0_U->t_d0(ap_var_for_const1);
    X_MAT_0_U->t_q0(X_MAT_0_t_q0);
    X_MAT_0_U->t_address1(ap_var_for_const3);
    X_MAT_0_U->t_ce1(ap_var_for_const0);
    X_MAT_0_U->t_we1(ap_var_for_const0);
    X_MAT_0_U->t_d1(ap_var_for_const1);
    X_MAT_0_U->i_ce(ap_var_for_const2);
    X_MAT_0_U->t_ce(ap_var_for_const2);
    X_MAT_0_U->i_full_n(X_MAT_0_i_full_n);
    X_MAT_0_U->i_write(Block_preheader117_U0_ap_done);
    X_MAT_0_U->t_empty_n(X_MAT_0_t_empty_n);
    X_MAT_0_U->t_read(Loop_L1_proc_U0_ap_ready);
    X_OUT_0_U = new wrapped_mmult_hw_ibs("X_OUT_0_U");
    X_OUT_0_U->clk(ap_clk);
    X_OUT_0_U->reset(ap_rst_n_inv);
    X_OUT_0_U->i_address0(Loop_L1_proc_U0_X_OUT_0_address0);
    X_OUT_0_U->i_ce0(Loop_L1_proc_U0_X_OUT_0_ce0);
    X_OUT_0_U->i_we0(Loop_L1_proc_U0_X_OUT_0_we0);
    X_OUT_0_U->i_d0(Loop_L1_proc_U0_X_OUT_0_d0);
    X_OUT_0_U->i_q0(X_OUT_0_i_q0);
    X_OUT_0_U->t_address0(Loop_3_proc_U0_X_OUT_0_address0);
    X_OUT_0_U->t_ce0(Loop_3_proc_U0_X_OUT_0_ce0);
    X_OUT_0_U->t_we0(ap_var_for_const0);
    X_OUT_0_U->t_d0(ap_var_for_const1);
    X_OUT_0_U->t_q0(X_OUT_0_t_q0);
    X_OUT_0_U->i_ce(ap_var_for_const2);
    X_OUT_0_U->t_ce(ap_var_for_const2);
    X_OUT_0_U->i_full_n(X_OUT_0_i_full_n);
    X_OUT_0_U->i_write(Loop_L1_proc_U0_ap_done);
    X_OUT_0_U->t_empty_n(X_OUT_0_t_empty_n);
    X_OUT_0_U->t_read(Loop_3_proc_U0_ap_ready);
    read_data_U0 = new read_data("read_data_U0");
    read_data_U0->ap_clk(ap_clk);
    read_data_U0->ap_rst(ap_rst_n_inv);
    read_data_U0->ap_start(read_data_U0_ap_start);
    read_data_U0->ap_done(read_data_U0_ap_done);
    read_data_U0->ap_continue(read_data_U0_ap_continue);
    read_data_U0->ap_idle(read_data_U0_ap_idle);
    read_data_U0->ap_ready(read_data_U0_ap_ready);
    read_data_U0->in_stream_TDATA(in_stream_TDATA);
    read_data_U0->in_stream_TVALID(in_stream_TVALID);
    read_data_U0->in_stream_TREADY(read_data_U0_in_stream_TREADY);
    read_data_U0->in_stream_TKEEP(in_stream_TKEEP);
    read_data_U0->in_stream_TSTRB(in_stream_TSTRB);
    read_data_U0->in_stream_TUSER(in_stream_TUSER);
    read_data_U0->in_stream_TLAST(in_stream_TLAST);
    read_data_U0->in_stream_TID(in_stream_TID);
    read_data_U0->in_stream_TDEST(in_stream_TDEST);
    read_data_U0->buf_V_address0(read_data_U0_buf_V_address0);
    read_data_U0->buf_V_ce0(read_data_U0_buf_V_ce0);
    read_data_U0->buf_V_we0(read_data_U0_buf_V_we0);
    read_data_U0->buf_V_d0(read_data_U0_buf_V_d0);
    Block_preheader117_U0 = new Block_preheader117_s("Block_preheader117_U0");
    Block_preheader117_U0->ap_clk(ap_clk);
    Block_preheader117_U0->ap_rst(ap_rst_n_inv);
    Block_preheader117_U0->ap_start(Block_preheader117_U0_ap_start);
    Block_preheader117_U0->ap_done(Block_preheader117_U0_ap_done);
    Block_preheader117_U0->ap_continue(Block_preheader117_U0_ap_continue);
    Block_preheader117_U0->ap_idle(Block_preheader117_U0_ap_idle);
    Block_preheader117_U0->ap_ready(Block_preheader117_U0_ap_ready);
    Block_preheader117_U0->dato_V_address0(Block_preheader117_U0_dato_V_address0);
    Block_preheader117_U0->dato_V_ce0(Block_preheader117_U0_dato_V_ce0);
    Block_preheader117_U0->dato_V_q0(dato_V_t_q0);
    Block_preheader117_U0->X_MAT_0_address0(Block_preheader117_U0_X_MAT_0_address0);
    Block_preheader117_U0->X_MAT_0_ce0(Block_preheader117_U0_X_MAT_0_ce0);
    Block_preheader117_U0->X_MAT_0_we0(Block_preheader117_U0_X_MAT_0_we0);
    Block_preheader117_U0->X_MAT_0_d0(Block_preheader117_U0_X_MAT_0_d0);
    Block_preheader117_U0->X_MAT_0_q0(X_MAT_0_i_q0);
    Block_preheader117_U0->X_MAT_0_address1(Block_preheader117_U0_X_MAT_0_address1);
    Block_preheader117_U0->X_MAT_0_ce1(Block_preheader117_U0_X_MAT_0_ce1);
    Block_preheader117_U0->X_MAT_0_we1(Block_preheader117_U0_X_MAT_0_we1);
    Block_preheader117_U0->X_MAT_0_d1(Block_preheader117_U0_X_MAT_0_d1);
    Loop_L1_proc_U0 = new Loop_L1_proc("Loop_L1_proc_U0");
    Loop_L1_proc_U0->ap_clk(ap_clk);
    Loop_L1_proc_U0->ap_rst(ap_rst_n_inv);
    Loop_L1_proc_U0->ap_start(Loop_L1_proc_U0_ap_start);
    Loop_L1_proc_U0->ap_done(Loop_L1_proc_U0_ap_done);
    Loop_L1_proc_U0->ap_continue(Loop_L1_proc_U0_ap_continue);
    Loop_L1_proc_U0->ap_idle(Loop_L1_proc_U0_ap_idle);
    Loop_L1_proc_U0->ap_ready(Loop_L1_proc_U0_ap_ready);
    Loop_L1_proc_U0->X_OUT_0_address0(Loop_L1_proc_U0_X_OUT_0_address0);
    Loop_L1_proc_U0->X_OUT_0_ce0(Loop_L1_proc_U0_X_OUT_0_ce0);
    Loop_L1_proc_U0->X_OUT_0_we0(Loop_L1_proc_U0_X_OUT_0_we0);
    Loop_L1_proc_U0->X_OUT_0_d0(Loop_L1_proc_U0_X_OUT_0_d0);
    Loop_L1_proc_U0->X_MAT_0_address0(Loop_L1_proc_U0_X_MAT_0_address0);
    Loop_L1_proc_U0->X_MAT_0_ce0(Loop_L1_proc_U0_X_MAT_0_ce0);
    Loop_L1_proc_U0->X_MAT_0_q0(X_MAT_0_t_q0);
    Loop_3_proc_U0 = new Loop_3_proc("Loop_3_proc_U0");
    Loop_3_proc_U0->ap_clk(ap_clk);
    Loop_3_proc_U0->ap_rst(ap_rst_n_inv);
    Loop_3_proc_U0->ap_start(Loop_3_proc_U0_ap_start);
    Loop_3_proc_U0->ap_done(Loop_3_proc_U0_ap_done);
    Loop_3_proc_U0->ap_continue(Loop_3_proc_U0_ap_continue);
    Loop_3_proc_U0->ap_idle(Loop_3_proc_U0_ap_idle);
    Loop_3_proc_U0->ap_ready(Loop_3_proc_U0_ap_ready);
    Loop_3_proc_U0->X_OUT_0_address0(Loop_3_proc_U0_X_OUT_0_address0);
    Loop_3_proc_U0->X_OUT_0_ce0(Loop_3_proc_U0_X_OUT_0_ce0);
    Loop_3_proc_U0->X_OUT_0_q0(X_OUT_0_t_q0);
    Loop_3_proc_U0->out_stream_TDATA(Loop_3_proc_U0_out_stream_TDATA);
    Loop_3_proc_U0->out_stream_TVALID(Loop_3_proc_U0_out_stream_TVALID);
    Loop_3_proc_U0->out_stream_TREADY(out_stream_TREADY);
    Loop_3_proc_U0->out_stream_TKEEP(Loop_3_proc_U0_out_stream_TKEEP);
    Loop_3_proc_U0->out_stream_TSTRB(Loop_3_proc_U0_out_stream_TSTRB);
    Loop_3_proc_U0->out_stream_TUSER(Loop_3_proc_U0_out_stream_TUSER);
    Loop_3_proc_U0->out_stream_TLAST(Loop_3_proc_U0_out_stream_TLAST);
    Loop_3_proc_U0->out_stream_TID(Loop_3_proc_U0_out_stream_TID);
    Loop_3_proc_U0->out_stream_TDEST(Loop_3_proc_U0_out_stream_TDEST);

    SC_METHOD(thread_Block_preheader117_U0_X_MAT_0_full_n);
    sensitive << ( X_MAT_0_i_full_n );

    SC_METHOD(thread_Block_preheader117_U0_ap_continue);
    sensitive << ( X_MAT_0_i_full_n );

    SC_METHOD(thread_Block_preheader117_U0_ap_start);
    sensitive << ( dato_V_t_empty_n );

    SC_METHOD(thread_Block_preheader117_U0_start_full_n);

    SC_METHOD(thread_Block_preheader117_U0_start_write);

    SC_METHOD(thread_Loop_3_proc_U0_ap_continue);

    SC_METHOD(thread_Loop_3_proc_U0_ap_start);
    sensitive << ( X_OUT_0_t_empty_n );

    SC_METHOD(thread_Loop_3_proc_U0_start_full_n);

    SC_METHOD(thread_Loop_3_proc_U0_start_write);

    SC_METHOD(thread_Loop_L1_proc_U0_X_OUT_0_full_n);
    sensitive << ( X_OUT_0_i_full_n );

    SC_METHOD(thread_Loop_L1_proc_U0_ap_continue);
    sensitive << ( X_OUT_0_i_full_n );

    SC_METHOD(thread_Loop_L1_proc_U0_ap_start);
    sensitive << ( X_MAT_0_t_empty_n );

    SC_METHOD(thread_Loop_L1_proc_U0_start_full_n);

    SC_METHOD(thread_Loop_L1_proc_U0_start_write);

    SC_METHOD(thread_ap_channel_done_X_MAT_0);
    sensitive << ( Block_preheader117_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_X_OUT_0);
    sensitive << ( Loop_L1_proc_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_dato_V);
    sensitive << ( read_data_U0_ap_done );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_in_stream_TREADY);
    sensitive << ( read_data_U0_in_stream_TREADY );

    SC_METHOD(thread_out_stream_TDATA);
    sensitive << ( Loop_3_proc_U0_out_stream_TDATA );

    SC_METHOD(thread_out_stream_TDEST);
    sensitive << ( Loop_3_proc_U0_out_stream_TDEST );

    SC_METHOD(thread_out_stream_TID);
    sensitive << ( Loop_3_proc_U0_out_stream_TID );

    SC_METHOD(thread_out_stream_TKEEP);
    sensitive << ( Loop_3_proc_U0_out_stream_TKEEP );

    SC_METHOD(thread_out_stream_TLAST);
    sensitive << ( Loop_3_proc_U0_out_stream_TLAST );

    SC_METHOD(thread_out_stream_TSTRB);
    sensitive << ( Loop_3_proc_U0_out_stream_TSTRB );

    SC_METHOD(thread_out_stream_TUSER);
    sensitive << ( Loop_3_proc_U0_out_stream_TUSER );

    SC_METHOD(thread_out_stream_TVALID);
    sensitive << ( Loop_3_proc_U0_out_stream_TVALID );

    SC_METHOD(thread_read_data_U0_ap_continue);
    sensitive << ( dato_V_i_full_n );

    SC_METHOD(thread_read_data_U0_ap_start);

    SC_METHOD(thread_read_data_U0_buf_V_full_n);
    sensitive << ( dato_V_i_full_n );

    SC_METHOD(thread_read_data_U0_start_full_n);

    SC_METHOD(thread_read_data_U0_start_write);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const3);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "wrapped_mmult_hw_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in_stream_TDATA, "(port)in_stream_TDATA");
    sc_trace(mVcdFile, in_stream_TKEEP, "(port)in_stream_TKEEP");
    sc_trace(mVcdFile, in_stream_TSTRB, "(port)in_stream_TSTRB");
    sc_trace(mVcdFile, in_stream_TUSER, "(port)in_stream_TUSER");
    sc_trace(mVcdFile, in_stream_TLAST, "(port)in_stream_TLAST");
    sc_trace(mVcdFile, in_stream_TID, "(port)in_stream_TID");
    sc_trace(mVcdFile, in_stream_TDEST, "(port)in_stream_TDEST");
    sc_trace(mVcdFile, out_stream_TDATA, "(port)out_stream_TDATA");
    sc_trace(mVcdFile, out_stream_TKEEP, "(port)out_stream_TKEEP");
    sc_trace(mVcdFile, out_stream_TSTRB, "(port)out_stream_TSTRB");
    sc_trace(mVcdFile, out_stream_TUSER, "(port)out_stream_TUSER");
    sc_trace(mVcdFile, out_stream_TLAST, "(port)out_stream_TLAST");
    sc_trace(mVcdFile, out_stream_TID, "(port)out_stream_TID");
    sc_trace(mVcdFile, out_stream_TDEST, "(port)out_stream_TDEST");
    sc_trace(mVcdFile, in_stream_TVALID, "(port)in_stream_TVALID");
    sc_trace(mVcdFile, in_stream_TREADY, "(port)in_stream_TREADY");
    sc_trace(mVcdFile, out_stream_TVALID, "(port)out_stream_TVALID");
    sc_trace(mVcdFile, out_stream_TREADY, "(port)out_stream_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, dato_V_i_q0, "dato_V_i_q0");
    sc_trace(mVcdFile, dato_V_t_q0, "dato_V_t_q0");
    sc_trace(mVcdFile, X_MAT_0_i_q0, "X_MAT_0_i_q0");
    sc_trace(mVcdFile, X_MAT_0_t_q0, "X_MAT_0_t_q0");
    sc_trace(mVcdFile, X_OUT_0_i_q0, "X_OUT_0_i_q0");
    sc_trace(mVcdFile, X_OUT_0_t_q0, "X_OUT_0_t_q0");
    sc_trace(mVcdFile, read_data_U0_ap_start, "read_data_U0_ap_start");
    sc_trace(mVcdFile, read_data_U0_ap_done, "read_data_U0_ap_done");
    sc_trace(mVcdFile, read_data_U0_ap_continue, "read_data_U0_ap_continue");
    sc_trace(mVcdFile, read_data_U0_ap_idle, "read_data_U0_ap_idle");
    sc_trace(mVcdFile, read_data_U0_ap_ready, "read_data_U0_ap_ready");
    sc_trace(mVcdFile, read_data_U0_in_stream_TREADY, "read_data_U0_in_stream_TREADY");
    sc_trace(mVcdFile, read_data_U0_buf_V_address0, "read_data_U0_buf_V_address0");
    sc_trace(mVcdFile, read_data_U0_buf_V_ce0, "read_data_U0_buf_V_ce0");
    sc_trace(mVcdFile, read_data_U0_buf_V_we0, "read_data_U0_buf_V_we0");
    sc_trace(mVcdFile, read_data_U0_buf_V_d0, "read_data_U0_buf_V_d0");
    sc_trace(mVcdFile, ap_channel_done_dato_V, "ap_channel_done_dato_V");
    sc_trace(mVcdFile, read_data_U0_buf_V_full_n, "read_data_U0_buf_V_full_n");
    sc_trace(mVcdFile, Block_preheader117_U0_ap_start, "Block_preheader117_U0_ap_start");
    sc_trace(mVcdFile, Block_preheader117_U0_ap_done, "Block_preheader117_U0_ap_done");
    sc_trace(mVcdFile, Block_preheader117_U0_ap_continue, "Block_preheader117_U0_ap_continue");
    sc_trace(mVcdFile, Block_preheader117_U0_ap_idle, "Block_preheader117_U0_ap_idle");
    sc_trace(mVcdFile, Block_preheader117_U0_ap_ready, "Block_preheader117_U0_ap_ready");
    sc_trace(mVcdFile, Block_preheader117_U0_dato_V_address0, "Block_preheader117_U0_dato_V_address0");
    sc_trace(mVcdFile, Block_preheader117_U0_dato_V_ce0, "Block_preheader117_U0_dato_V_ce0");
    sc_trace(mVcdFile, Block_preheader117_U0_X_MAT_0_address0, "Block_preheader117_U0_X_MAT_0_address0");
    sc_trace(mVcdFile, Block_preheader117_U0_X_MAT_0_ce0, "Block_preheader117_U0_X_MAT_0_ce0");
    sc_trace(mVcdFile, Block_preheader117_U0_X_MAT_0_we0, "Block_preheader117_U0_X_MAT_0_we0");
    sc_trace(mVcdFile, Block_preheader117_U0_X_MAT_0_d0, "Block_preheader117_U0_X_MAT_0_d0");
    sc_trace(mVcdFile, Block_preheader117_U0_X_MAT_0_address1, "Block_preheader117_U0_X_MAT_0_address1");
    sc_trace(mVcdFile, Block_preheader117_U0_X_MAT_0_ce1, "Block_preheader117_U0_X_MAT_0_ce1");
    sc_trace(mVcdFile, Block_preheader117_U0_X_MAT_0_we1, "Block_preheader117_U0_X_MAT_0_we1");
    sc_trace(mVcdFile, Block_preheader117_U0_X_MAT_0_d1, "Block_preheader117_U0_X_MAT_0_d1");
    sc_trace(mVcdFile, ap_channel_done_X_MAT_0, "ap_channel_done_X_MAT_0");
    sc_trace(mVcdFile, Block_preheader117_U0_X_MAT_0_full_n, "Block_preheader117_U0_X_MAT_0_full_n");
    sc_trace(mVcdFile, Loop_L1_proc_U0_ap_start, "Loop_L1_proc_U0_ap_start");
    sc_trace(mVcdFile, Loop_L1_proc_U0_ap_done, "Loop_L1_proc_U0_ap_done");
    sc_trace(mVcdFile, Loop_L1_proc_U0_ap_continue, "Loop_L1_proc_U0_ap_continue");
    sc_trace(mVcdFile, Loop_L1_proc_U0_ap_idle, "Loop_L1_proc_U0_ap_idle");
    sc_trace(mVcdFile, Loop_L1_proc_U0_ap_ready, "Loop_L1_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loop_L1_proc_U0_X_OUT_0_address0, "Loop_L1_proc_U0_X_OUT_0_address0");
    sc_trace(mVcdFile, Loop_L1_proc_U0_X_OUT_0_ce0, "Loop_L1_proc_U0_X_OUT_0_ce0");
    sc_trace(mVcdFile, Loop_L1_proc_U0_X_OUT_0_we0, "Loop_L1_proc_U0_X_OUT_0_we0");
    sc_trace(mVcdFile, Loop_L1_proc_U0_X_OUT_0_d0, "Loop_L1_proc_U0_X_OUT_0_d0");
    sc_trace(mVcdFile, Loop_L1_proc_U0_X_MAT_0_address0, "Loop_L1_proc_U0_X_MAT_0_address0");
    sc_trace(mVcdFile, Loop_L1_proc_U0_X_MAT_0_ce0, "Loop_L1_proc_U0_X_MAT_0_ce0");
    sc_trace(mVcdFile, ap_channel_done_X_OUT_0, "ap_channel_done_X_OUT_0");
    sc_trace(mVcdFile, Loop_L1_proc_U0_X_OUT_0_full_n, "Loop_L1_proc_U0_X_OUT_0_full_n");
    sc_trace(mVcdFile, Loop_3_proc_U0_ap_start, "Loop_3_proc_U0_ap_start");
    sc_trace(mVcdFile, Loop_3_proc_U0_ap_done, "Loop_3_proc_U0_ap_done");
    sc_trace(mVcdFile, Loop_3_proc_U0_ap_continue, "Loop_3_proc_U0_ap_continue");
    sc_trace(mVcdFile, Loop_3_proc_U0_ap_idle, "Loop_3_proc_U0_ap_idle");
    sc_trace(mVcdFile, Loop_3_proc_U0_ap_ready, "Loop_3_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loop_3_proc_U0_X_OUT_0_address0, "Loop_3_proc_U0_X_OUT_0_address0");
    sc_trace(mVcdFile, Loop_3_proc_U0_X_OUT_0_ce0, "Loop_3_proc_U0_X_OUT_0_ce0");
    sc_trace(mVcdFile, Loop_3_proc_U0_out_stream_TDATA, "Loop_3_proc_U0_out_stream_TDATA");
    sc_trace(mVcdFile, Loop_3_proc_U0_out_stream_TVALID, "Loop_3_proc_U0_out_stream_TVALID");
    sc_trace(mVcdFile, Loop_3_proc_U0_out_stream_TKEEP, "Loop_3_proc_U0_out_stream_TKEEP");
    sc_trace(mVcdFile, Loop_3_proc_U0_out_stream_TSTRB, "Loop_3_proc_U0_out_stream_TSTRB");
    sc_trace(mVcdFile, Loop_3_proc_U0_out_stream_TUSER, "Loop_3_proc_U0_out_stream_TUSER");
    sc_trace(mVcdFile, Loop_3_proc_U0_out_stream_TLAST, "Loop_3_proc_U0_out_stream_TLAST");
    sc_trace(mVcdFile, Loop_3_proc_U0_out_stream_TID, "Loop_3_proc_U0_out_stream_TID");
    sc_trace(mVcdFile, Loop_3_proc_U0_out_stream_TDEST, "Loop_3_proc_U0_out_stream_TDEST");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, dato_V_i_full_n, "dato_V_i_full_n");
    sc_trace(mVcdFile, dato_V_t_empty_n, "dato_V_t_empty_n");
    sc_trace(mVcdFile, X_MAT_0_i_full_n, "X_MAT_0_i_full_n");
    sc_trace(mVcdFile, X_MAT_0_t_empty_n, "X_MAT_0_t_empty_n");
    sc_trace(mVcdFile, X_OUT_0_i_full_n, "X_OUT_0_i_full_n");
    sc_trace(mVcdFile, X_OUT_0_t_empty_n, "X_OUT_0_t_empty_n");
    sc_trace(mVcdFile, read_data_U0_start_full_n, "read_data_U0_start_full_n");
    sc_trace(mVcdFile, read_data_U0_start_write, "read_data_U0_start_write");
    sc_trace(mVcdFile, Block_preheader117_U0_start_full_n, "Block_preheader117_U0_start_full_n");
    sc_trace(mVcdFile, Block_preheader117_U0_start_write, "Block_preheader117_U0_start_write");
    sc_trace(mVcdFile, Loop_L1_proc_U0_start_full_n, "Loop_L1_proc_U0_start_full_n");
    sc_trace(mVcdFile, Loop_L1_proc_U0_start_write, "Loop_L1_proc_U0_start_write");
    sc_trace(mVcdFile, Loop_3_proc_U0_start_full_n, "Loop_3_proc_U0_start_full_n");
    sc_trace(mVcdFile, Loop_3_proc_U0_start_write, "Loop_3_proc_U0_start_write");
#endif

    }
    mHdltvinHandle.open("wrapped_mmult_hw.hdltvin.dat");
    mHdltvoutHandle.open("wrapped_mmult_hw.hdltvout.dat");
}

wrapped_mmult_hw::~wrapped_mmult_hw() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete dato_V_U;
    delete X_MAT_0_U;
    delete X_OUT_0_U;
    delete read_data_U0;
    delete Block_preheader117_U0;
    delete Loop_L1_proc_U0;
    delete Loop_3_proc_U0;
}

void wrapped_mmult_hw::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_logic_1;
}

void wrapped_mmult_hw::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void wrapped_mmult_hw::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_0;
}

void wrapped_mmult_hw::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void wrapped_mmult_hw::thread_Block_preheader117_U0_X_MAT_0_full_n() {
    Block_preheader117_U0_X_MAT_0_full_n = X_MAT_0_i_full_n.read();
}

void wrapped_mmult_hw::thread_Block_preheader117_U0_ap_continue() {
    Block_preheader117_U0_ap_continue = X_MAT_0_i_full_n.read();
}

void wrapped_mmult_hw::thread_Block_preheader117_U0_ap_start() {
    Block_preheader117_U0_ap_start = dato_V_t_empty_n.read();
}

void wrapped_mmult_hw::thread_Block_preheader117_U0_start_full_n() {
    Block_preheader117_U0_start_full_n = ap_const_logic_0;
}

void wrapped_mmult_hw::thread_Block_preheader117_U0_start_write() {
    Block_preheader117_U0_start_write = ap_const_logic_0;
}

void wrapped_mmult_hw::thread_Loop_3_proc_U0_ap_continue() {
    Loop_3_proc_U0_ap_continue = ap_const_logic_1;
}

void wrapped_mmult_hw::thread_Loop_3_proc_U0_ap_start() {
    Loop_3_proc_U0_ap_start = X_OUT_0_t_empty_n.read();
}

void wrapped_mmult_hw::thread_Loop_3_proc_U0_start_full_n() {
    Loop_3_proc_U0_start_full_n = ap_const_logic_0;
}

void wrapped_mmult_hw::thread_Loop_3_proc_U0_start_write() {
    Loop_3_proc_U0_start_write = ap_const_logic_0;
}

void wrapped_mmult_hw::thread_Loop_L1_proc_U0_X_OUT_0_full_n() {
    Loop_L1_proc_U0_X_OUT_0_full_n = X_OUT_0_i_full_n.read();
}

void wrapped_mmult_hw::thread_Loop_L1_proc_U0_ap_continue() {
    Loop_L1_proc_U0_ap_continue = X_OUT_0_i_full_n.read();
}

void wrapped_mmult_hw::thread_Loop_L1_proc_U0_ap_start() {
    Loop_L1_proc_U0_ap_start = X_MAT_0_t_empty_n.read();
}

void wrapped_mmult_hw::thread_Loop_L1_proc_U0_start_full_n() {
    Loop_L1_proc_U0_start_full_n = ap_const_logic_0;
}

void wrapped_mmult_hw::thread_Loop_L1_proc_U0_start_write() {
    Loop_L1_proc_U0_start_write = ap_const_logic_0;
}

void wrapped_mmult_hw::thread_ap_channel_done_X_MAT_0() {
    ap_channel_done_X_MAT_0 = Block_preheader117_U0_ap_done.read();
}

void wrapped_mmult_hw::thread_ap_channel_done_X_OUT_0() {
    ap_channel_done_X_OUT_0 = Loop_L1_proc_U0_ap_done.read();
}

void wrapped_mmult_hw::thread_ap_channel_done_dato_V() {
    ap_channel_done_dato_V = read_data_U0_ap_done.read();
}

void wrapped_mmult_hw::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void wrapped_mmult_hw::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void wrapped_mmult_hw::thread_in_stream_TREADY() {
    in_stream_TREADY = read_data_U0_in_stream_TREADY.read();
}

void wrapped_mmult_hw::thread_out_stream_TDATA() {
    out_stream_TDATA = Loop_3_proc_U0_out_stream_TDATA.read();
}

void wrapped_mmult_hw::thread_out_stream_TDEST() {
    out_stream_TDEST = Loop_3_proc_U0_out_stream_TDEST.read();
}

void wrapped_mmult_hw::thread_out_stream_TID() {
    out_stream_TID = Loop_3_proc_U0_out_stream_TID.read();
}

void wrapped_mmult_hw::thread_out_stream_TKEEP() {
    out_stream_TKEEP = Loop_3_proc_U0_out_stream_TKEEP.read();
}

void wrapped_mmult_hw::thread_out_stream_TLAST() {
    out_stream_TLAST = Loop_3_proc_U0_out_stream_TLAST.read();
}

void wrapped_mmult_hw::thread_out_stream_TSTRB() {
    out_stream_TSTRB = Loop_3_proc_U0_out_stream_TSTRB.read();
}

void wrapped_mmult_hw::thread_out_stream_TUSER() {
    out_stream_TUSER = Loop_3_proc_U0_out_stream_TUSER.read();
}

void wrapped_mmult_hw::thread_out_stream_TVALID() {
    out_stream_TVALID = Loop_3_proc_U0_out_stream_TVALID.read();
}

void wrapped_mmult_hw::thread_read_data_U0_ap_continue() {
    read_data_U0_ap_continue = dato_V_i_full_n.read();
}

void wrapped_mmult_hw::thread_read_data_U0_ap_start() {
    read_data_U0_ap_start = ap_const_logic_1;
}

void wrapped_mmult_hw::thread_read_data_U0_buf_V_full_n() {
    read_data_U0_buf_V_full_n = dato_V_i_full_n.read();
}

void wrapped_mmult_hw::thread_read_data_U0_start_full_n() {
    read_data_U0_start_full_n = ap_const_logic_0;
}

void wrapped_mmult_hw::thread_read_data_U0_start_write() {
    read_data_U0_start_write = ap_const_logic_0;
}

void wrapped_mmult_hw::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TDATA\" :  \"" << in_stream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TKEEP\" :  \"" << in_stream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TSTRB\" :  \"" << in_stream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TUSER\" :  \"" << in_stream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TLAST\" :  \"" << in_stream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TID\" :  \"" << in_stream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TDEST\" :  \"" << in_stream_TDEST.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"out_stream_TDATA\" :  \"" << out_stream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TKEEP\" :  \"" << out_stream_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TSTRB\" :  \"" << out_stream_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TUSER\" :  \"" << out_stream_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TLAST\" :  \"" << out_stream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TID\" :  \"" << out_stream_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TDEST\" :  \"" << out_stream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TVALID\" :  \"" << in_stream_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_stream_TREADY\" :  \"" << in_stream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TVALID\" :  \"" << out_stream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_stream_TREADY\" :  \"" << out_stream_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

