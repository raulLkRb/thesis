// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_L1_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_L1_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_L1_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> Loop_L1_proc::ap_ST_fsm_state1 = "1";
const sc_lv<13> Loop_L1_proc::ap_ST_fsm_state2 = "10";
const sc_lv<13> Loop_L1_proc::ap_ST_fsm_state3 = "100";
const sc_lv<13> Loop_L1_proc::ap_ST_fsm_state4 = "1000";
const sc_lv<13> Loop_L1_proc::ap_ST_fsm_state5 = "10000";
const sc_lv<13> Loop_L1_proc::ap_ST_fsm_state6 = "100000";
const sc_lv<13> Loop_L1_proc::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> Loop_L1_proc::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> Loop_L1_proc::ap_ST_fsm_state9 = "100000000";
const sc_lv<13> Loop_L1_proc::ap_ST_fsm_state10 = "1000000000";
const sc_lv<13> Loop_L1_proc::ap_ST_fsm_state11 = "10000000000";
const sc_lv<13> Loop_L1_proc::ap_ST_fsm_state12 = "100000000000";
const sc_lv<13> Loop_L1_proc::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<32> Loop_L1_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Loop_L1_proc::ap_const_lv32_1 = "1";
const sc_lv<32> Loop_L1_proc::ap_const_lv32_2 = "10";
const sc_lv<32> Loop_L1_proc::ap_const_lv32_3 = "11";
const sc_lv<32> Loop_L1_proc::ap_const_lv32_4 = "100";
const sc_lv<32> Loop_L1_proc::ap_const_lv32_7 = "111";
const sc_lv<32> Loop_L1_proc::ap_const_lv32_C = "1100";
const sc_lv<1> Loop_L1_proc::ap_const_lv1_1 = "1";
const sc_lv<2> Loop_L1_proc::ap_const_lv2_0 = "00";
const sc_lv<1> Loop_L1_proc::ap_const_lv1_0 = "0";
const sc_lv<4> Loop_L1_proc::ap_const_lv4_0 = "0000";
const sc_lv<32> Loop_L1_proc::ap_const_lv32_8 = "1000";
const sc_lv<3> Loop_L1_proc::ap_const_lv3_0 = "000";
const sc_lv<2> Loop_L1_proc::ap_const_lv2_3 = "11";
const sc_lv<2> Loop_L1_proc::ap_const_lv2_1 = "1";
const sc_lv<4> Loop_L1_proc::ap_const_lv4_8 = "1000";
const sc_lv<4> Loop_L1_proc::ap_const_lv4_1 = "1";
const bool Loop_L1_proc::ap_const_boolean_1 = true;

Loop_L1_proc::Loop_L1_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    coeff_U = new Loop_L1_proc_coeff("coeff_U");
    coeff_U->clk(ap_clk);
    coeff_U->reset(ap_rst);
    coeff_U->address0(coeff_address0);
    coeff_U->ce0(coeff_ce0);
    coeff_U->q0(coeff_q0);
    wrapped_mmult_hw_eOg_U14 = new wrapped_mmult_hw_eOg<1,5,32,32,32>("wrapped_mmult_hw_eOg_U14");
    wrapped_mmult_hw_eOg_U14->clk(ap_clk);
    wrapped_mmult_hw_eOg_U14->reset(ap_rst);
    wrapped_mmult_hw_eOg_U14->din0(sum_0_i_reg_91);
    wrapped_mmult_hw_eOg_U14->din1(tmp_8_reg_234);
    wrapped_mmult_hw_eOg_U14->ce(ap_var_for_const0);
    wrapped_mmult_hw_eOg_U14->dout(grp_fu_115_p2);
    wrapped_mmult_hw_fYi_U15 = new wrapped_mmult_hw_fYi<1,4,32,32,32>("wrapped_mmult_hw_fYi_U15");
    wrapped_mmult_hw_fYi_U15->clk(ap_clk);
    wrapped_mmult_hw_fYi_U15->reset(ap_rst);
    wrapped_mmult_hw_fYi_U15->din0(coeff_load_reg_219);
    wrapped_mmult_hw_fYi_U15->din1(X_MAT_0_q0);
    wrapped_mmult_hw_fYi_U15->ce(ap_var_for_const0);
    wrapped_mmult_hw_fYi_U15->dout(grp_fu_120_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_X_MAT_0_address0);
    sensitive << ( ib_0_i_cast_reg_201 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_X_MAT_0_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_X_OUT_0_address0);
    sensitive << ( ia_0_i_cast_reg_183 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_X_OUT_0_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_X_OUT_0_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( sum_0_i_reg_91 );

    SC_METHOD(thread_X_OUT_0_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_i_fu_171_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_i_fu_141_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_i_fu_141_p2 );

    SC_METHOD(thread_coeff_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_3_cast_fu_166_p1 );

    SC_METHOD(thread_coeff_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_exitcond2_i_fu_141_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ia_0_i_reg_80 );

    SC_METHOD(thread_exitcond_i_fu_171_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ib_0_i_reg_104 );

    SC_METHOD(thread_ia_0_i_cast_fu_125_p1);
    sensitive << ( ia_0_i_reg_80 );

    SC_METHOD(thread_ia_fu_147_p2);
    sensitive << ( ia_0_i_reg_80 );

    SC_METHOD(thread_ib_0_i_cast_cast_fu_157_p1);
    sensitive << ( ib_0_i_reg_104 );

    SC_METHOD(thread_ib_0_i_cast_fu_153_p1);
    sensitive << ( ib_0_i_reg_104 );

    SC_METHOD(thread_ib_fu_177_p2);
    sensitive << ( ib_0_i_reg_104 );

    SC_METHOD(thread_tmp_2_cast_fu_137_p1);
    sensitive << ( tmp_fu_129_p3 );

    SC_METHOD(thread_tmp_3_cast_fu_166_p1);
    sensitive << ( tmp_3_fu_161_p2 );

    SC_METHOD(thread_tmp_3_fu_161_p2);
    sensitive << ( tmp_2_cast_reg_188 );
    sensitive << ( ib_0_i_cast_cast_fu_157_p1 );

    SC_METHOD(thread_tmp_fu_129_p3);
    sensitive << ( ia_0_i_reg_80 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_i_fu_171_p2 );
    sensitive << ( exitcond2_i_fu_141_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_L1_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, X_OUT_0_address0, "(port)X_OUT_0_address0");
    sc_trace(mVcdFile, X_OUT_0_ce0, "(port)X_OUT_0_ce0");
    sc_trace(mVcdFile, X_OUT_0_we0, "(port)X_OUT_0_we0");
    sc_trace(mVcdFile, X_OUT_0_d0, "(port)X_OUT_0_d0");
    sc_trace(mVcdFile, X_MAT_0_address0, "(port)X_MAT_0_address0");
    sc_trace(mVcdFile, X_MAT_0_ce0, "(port)X_MAT_0_ce0");
    sc_trace(mVcdFile, X_MAT_0_q0, "(port)X_MAT_0_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, coeff_address0, "coeff_address0");
    sc_trace(mVcdFile, coeff_ce0, "coeff_ce0");
    sc_trace(mVcdFile, coeff_q0, "coeff_q0");
    sc_trace(mVcdFile, ia_0_i_cast_fu_125_p1, "ia_0_i_cast_fu_125_p1");
    sc_trace(mVcdFile, ia_0_i_cast_reg_183, "ia_0_i_cast_reg_183");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_2_cast_fu_137_p1, "tmp_2_cast_fu_137_p1");
    sc_trace(mVcdFile, tmp_2_cast_reg_188, "tmp_2_cast_reg_188");
    sc_trace(mVcdFile, ia_fu_147_p2, "ia_fu_147_p2");
    sc_trace(mVcdFile, ia_reg_196, "ia_reg_196");
    sc_trace(mVcdFile, ib_0_i_cast_fu_153_p1, "ib_0_i_cast_fu_153_p1");
    sc_trace(mVcdFile, ib_0_i_cast_reg_201, "ib_0_i_cast_reg_201");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ib_fu_177_p2, "ib_fu_177_p2");
    sc_trace(mVcdFile, ib_reg_214, "ib_reg_214");
    sc_trace(mVcdFile, coeff_load_reg_219, "coeff_load_reg_219");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_fu_120_p2, "grp_fu_120_p2");
    sc_trace(mVcdFile, tmp_8_reg_234, "tmp_8_reg_234");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_115_p2, "grp_fu_115_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ia_0_i_reg_80, "ia_0_i_reg_80");
    sc_trace(mVcdFile, exitcond_i_fu_171_p2, "exitcond_i_fu_171_p2");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, sum_0_i_reg_91, "sum_0_i_reg_91");
    sc_trace(mVcdFile, exitcond2_i_fu_141_p2, "exitcond2_i_fu_141_p2");
    sc_trace(mVcdFile, ib_0_i_reg_104, "ib_0_i_reg_104");
    sc_trace(mVcdFile, tmp_3_cast_fu_166_p1, "tmp_3_cast_fu_166_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_fu_129_p3, "tmp_fu_129_p3");
    sc_trace(mVcdFile, ib_0_i_cast_cast_fu_157_p1, "ib_0_i_cast_cast_fu_157_p1");
    sc_trace(mVcdFile, tmp_3_fu_161_p2, "tmp_3_fu_161_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Loop_L1_proc::~Loop_L1_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete coeff_U;
    delete wrapped_mmult_hw_eOg_U14;
    delete wrapped_mmult_hw_fYi_U15;
}

void Loop_L1_proc::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Loop_L1_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_i_fu_141_p2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ia_0_i_reg_80 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(exitcond_i_fu_171_p2.read(), ap_const_lv1_1))) {
        ia_0_i_reg_80 = ia_reg_196.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ib_0_i_reg_104 = ib_reg_214.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond2_i_fu_141_p2.read(), ap_const_lv1_0))) {
        ib_0_i_reg_104 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        sum_0_i_reg_91 = grp_fu_115_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond2_i_fu_141_p2.read(), ap_const_lv1_0))) {
        sum_0_i_reg_91 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        coeff_load_reg_219 = coeff_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ia_0_i_cast_reg_183 = ia_0_i_cast_fu_125_p1.read();
        ia_reg_196 = ia_fu_147_p2.read();
        tmp_2_cast_reg_188 = tmp_2_cast_fu_137_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ib_0_i_cast_reg_201 = ib_0_i_cast_fu_153_p1.read();
        ib_reg_214 = ib_fu_177_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_8_reg_234 = grp_fu_120_p2.read();
    }
}

void Loop_L1_proc::thread_X_MAT_0_address0() {
    X_MAT_0_address0 =  (sc_lv<3>) (ib_0_i_cast_reg_201.read());
}

void Loop_L1_proc::thread_X_MAT_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        X_MAT_0_ce0 = ap_const_logic_1;
    } else {
        X_MAT_0_ce0 = ap_const_logic_0;
    }
}

void Loop_L1_proc::thread_X_OUT_0_address0() {
    X_OUT_0_address0 =  (sc_lv<2>) (ia_0_i_cast_reg_183.read());
}

void Loop_L1_proc::thread_X_OUT_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        X_OUT_0_ce0 = ap_const_logic_1;
    } else {
        X_OUT_0_ce0 = ap_const_logic_0;
    }
}

void Loop_L1_proc::thread_X_OUT_0_d0() {
    X_OUT_0_d0 = sum_0_i_reg_91.read();
}

void Loop_L1_proc::thread_X_OUT_0_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_i_fu_171_p2.read(), ap_const_lv1_1))) {
        X_OUT_0_we0 = ap_const_logic_1;
    } else {
        X_OUT_0_we0 = ap_const_logic_0;
    }
}

void Loop_L1_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_L1_proc::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Loop_L1_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_L1_proc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Loop_L1_proc::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Loop_L1_proc::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Loop_L1_proc::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Loop_L1_proc::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Loop_L1_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_L1_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_i_fu_141_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_L1_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_L1_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_i_fu_141_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_L1_proc::thread_coeff_address0() {
    coeff_address0 =  (sc_lv<5>) (tmp_3_cast_fu_166_p1.read());
}

void Loop_L1_proc::thread_coeff_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        coeff_ce0 = ap_const_logic_1;
    } else {
        coeff_ce0 = ap_const_logic_0;
    }
}

void Loop_L1_proc::thread_exitcond2_i_fu_141_p2() {
    exitcond2_i_fu_141_p2 = (!ia_0_i_reg_80.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(ia_0_i_reg_80.read() == ap_const_lv2_3);
}

void Loop_L1_proc::thread_exitcond_i_fu_171_p2() {
    exitcond_i_fu_171_p2 = (!ib_0_i_reg_104.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(ib_0_i_reg_104.read() == ap_const_lv4_8);
}

void Loop_L1_proc::thread_ia_0_i_cast_fu_125_p1() {
    ia_0_i_cast_fu_125_p1 = esl_zext<32,2>(ia_0_i_reg_80.read());
}

void Loop_L1_proc::thread_ia_fu_147_p2() {
    ia_fu_147_p2 = (!ia_0_i_reg_80.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(ia_0_i_reg_80.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Loop_L1_proc::thread_ib_0_i_cast_cast_fu_157_p1() {
    ib_0_i_cast_cast_fu_157_p1 = esl_zext<6,4>(ib_0_i_reg_104.read());
}

void Loop_L1_proc::thread_ib_0_i_cast_fu_153_p1() {
    ib_0_i_cast_fu_153_p1 = esl_zext<32,4>(ib_0_i_reg_104.read());
}

void Loop_L1_proc::thread_ib_fu_177_p2() {
    ib_fu_177_p2 = (!ib_0_i_reg_104.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(ib_0_i_reg_104.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void Loop_L1_proc::thread_tmp_2_cast_fu_137_p1() {
    tmp_2_cast_fu_137_p1 = esl_zext<6,5>(tmp_fu_129_p3.read());
}

void Loop_L1_proc::thread_tmp_3_cast_fu_166_p1() {
    tmp_3_cast_fu_166_p1 = esl_zext<32,6>(tmp_3_fu_161_p2.read());
}

void Loop_L1_proc::thread_tmp_3_fu_161_p2() {
    tmp_3_fu_161_p2 = (!tmp_2_cast_reg_188.read().is_01() || !ib_0_i_cast_cast_fu_157_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_2_cast_reg_188.read()) + sc_biguint<6>(ib_0_i_cast_cast_fu_157_p1.read()));
}

void Loop_L1_proc::thread_tmp_fu_129_p3() {
    tmp_fu_129_p3 = esl_concat<2,3>(ia_0_i_reg_80.read(), ap_const_lv3_0);
}

void Loop_L1_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_i_fu_141_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_i_fu_171_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXX";
            break;
    }
}

}

