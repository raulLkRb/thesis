// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_3_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_3_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_3_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Loop_3_proc::ap_ST_fsm_state1 = "1";
const sc_lv<4> Loop_3_proc::ap_ST_fsm_state2 = "10";
const sc_lv<4> Loop_3_proc::ap_ST_fsm_state3 = "100";
const sc_lv<4> Loop_3_proc::ap_ST_fsm_state4 = "1000";
const sc_lv<32> Loop_3_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Loop_3_proc::ap_const_lv1_0 = "0";
const sc_lv<1> Loop_3_proc::ap_const_lv1_1 = "1";
const sc_lv<2> Loop_3_proc::ap_const_lv2_0 = "00";
const sc_lv<2> Loop_3_proc::ap_const_lv2_2 = "10";
const sc_lv<2> Loop_3_proc::ap_const_lv2_3 = "11";
const sc_lv<2> Loop_3_proc::ap_const_lv2_1 = "1";
const sc_lv<32> Loop_3_proc::ap_const_lv32_2 = "10";
const sc_lv<32> Loop_3_proc::ap_const_lv32_3 = "11";
const sc_lv<32> Loop_3_proc::ap_const_lv32_1 = "1";
const sc_lv<3> Loop_3_proc::ap_const_lv3_1 = "1";
const sc_lv<3> Loop_3_proc::ap_const_lv3_0 = "000";
const sc_lv<5> Loop_3_proc::ap_const_lv5_0 = "00000";
const sc_lv<4> Loop_3_proc::ap_const_lv4_0 = "0000";
const sc_lv<4> Loop_3_proc::ap_const_lv4_F = "1111";
const sc_lv<3> Loop_3_proc::ap_const_lv3_4 = "100";
const sc_lv<3> Loop_3_proc::ap_const_lv3_2 = "10";
const bool Loop_3_proc::ap_const_boolean_1 = true;

Loop_3_proc::Loop_3_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_X_OUT_0_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( k_1_cast3_fu_120_p1 );

    SC_METHOD(thread_X_OUT_0_ce0);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_114_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_114_p2 );

    SC_METHOD(thread_exitcond4_fu_114_p2);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( indvars_iv_reg_90 );

    SC_METHOD(thread_indvars_iv_next_fu_131_p2);
    sensitive << ( indvars_iv_reg_90 );

    SC_METHOD(thread_k_1_cast3_fu_120_p1);
    sensitive << ( k_1_reg_102 );

    SC_METHOD(thread_last_assign_fu_125_p2);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_114_p2 );
    sensitive << ( k_1_reg_102 );

    SC_METHOD(thread_out_stream_TDATA);
    sensitive << ( out_stream_data_V_1_data_out );

    SC_METHOD(thread_out_stream_TDATA_blk_n);
    sensitive << ( out_stream_data_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_out_stream_TDEST);
    sensitive << ( out_stream_dest_V_1_data_out );

    SC_METHOD(thread_out_stream_TID);
    sensitive << ( out_stream_id_V_1_data_out );

    SC_METHOD(thread_out_stream_TKEEP);
    sensitive << ( out_stream_keep_V_1_data_out );

    SC_METHOD(thread_out_stream_TLAST);
    sensitive << ( out_stream_last_V_1_data_out );

    SC_METHOD(thread_out_stream_TSTRB);
    sensitive << ( out_stream_strb_V_1_data_out );

    SC_METHOD(thread_out_stream_TUSER);
    sensitive << ( out_stream_user_V_1_data_out );

    SC_METHOD(thread_out_stream_TVALID);
    sensitive << ( out_stream_dest_V_1_state );

    SC_METHOD(thread_out_stream_data_V_1_ack_in);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_out_stream_data_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_data_V_1_data_out);
    sensitive << ( out_stream_data_V_1_payload_A );
    sensitive << ( out_stream_data_V_1_payload_B );
    sensitive << ( out_stream_data_V_1_sel );

    SC_METHOD(thread_out_stream_data_V_1_load_A);
    sensitive << ( out_stream_data_V_1_sel_wr );
    sensitive << ( out_stream_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_data_V_1_load_B);
    sensitive << ( out_stream_data_V_1_sel_wr );
    sensitive << ( out_stream_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_data_V_1_sel);
    sensitive << ( out_stream_data_V_1_sel_rd );

    SC_METHOD(thread_out_stream_data_V_1_state_cmp_full);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_out_stream_data_V_1_vld_in);
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_stream_data_V_1_vld_out);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_out_stream_dest_V_1_ack_in);
    sensitive << ( out_stream_dest_V_1_state );

    SC_METHOD(thread_out_stream_dest_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_dest_V_1_data_out);
    sensitive << ( out_stream_dest_V_1_sel );

    SC_METHOD(thread_out_stream_dest_V_1_sel);
    sensitive << ( out_stream_dest_V_1_sel_rd );

    SC_METHOD(thread_out_stream_dest_V_1_vld_in);
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_stream_dest_V_1_vld_out);
    sensitive << ( out_stream_dest_V_1_state );

    SC_METHOD(thread_out_stream_id_V_1_ack_in);
    sensitive << ( out_stream_id_V_1_state );

    SC_METHOD(thread_out_stream_id_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_id_V_1_data_out);
    sensitive << ( out_stream_id_V_1_sel );

    SC_METHOD(thread_out_stream_id_V_1_sel);
    sensitive << ( out_stream_id_V_1_sel_rd );

    SC_METHOD(thread_out_stream_id_V_1_vld_in);
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_stream_id_V_1_vld_out);
    sensitive << ( out_stream_id_V_1_state );

    SC_METHOD(thread_out_stream_keep_V_1_ack_in);
    sensitive << ( out_stream_keep_V_1_state );

    SC_METHOD(thread_out_stream_keep_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_keep_V_1_data_out);
    sensitive << ( out_stream_keep_V_1_sel );

    SC_METHOD(thread_out_stream_keep_V_1_sel);
    sensitive << ( out_stream_keep_V_1_sel_rd );

    SC_METHOD(thread_out_stream_keep_V_1_vld_in);
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_stream_keep_V_1_vld_out);
    sensitive << ( out_stream_keep_V_1_state );

    SC_METHOD(thread_out_stream_last_V_1_ack_in);
    sensitive << ( out_stream_last_V_1_state );

    SC_METHOD(thread_out_stream_last_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_last_V_1_data_out);
    sensitive << ( out_stream_last_V_1_payload_A );
    sensitive << ( out_stream_last_V_1_payload_B );
    sensitive << ( out_stream_last_V_1_sel );

    SC_METHOD(thread_out_stream_last_V_1_load_A);
    sensitive << ( out_stream_last_V_1_sel_wr );
    sensitive << ( out_stream_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_last_V_1_load_B);
    sensitive << ( out_stream_last_V_1_sel_wr );
    sensitive << ( out_stream_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_last_V_1_sel);
    sensitive << ( out_stream_last_V_1_sel_rd );

    SC_METHOD(thread_out_stream_last_V_1_state_cmp_full);
    sensitive << ( out_stream_last_V_1_state );

    SC_METHOD(thread_out_stream_last_V_1_vld_in);
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_stream_last_V_1_vld_out);
    sensitive << ( out_stream_last_V_1_state );

    SC_METHOD(thread_out_stream_strb_V_1_ack_in);
    sensitive << ( out_stream_strb_V_1_state );

    SC_METHOD(thread_out_stream_strb_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_strb_V_1_data_out);
    sensitive << ( out_stream_strb_V_1_sel );

    SC_METHOD(thread_out_stream_strb_V_1_sel);
    sensitive << ( out_stream_strb_V_1_sel_rd );

    SC_METHOD(thread_out_stream_strb_V_1_vld_in);
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_stream_strb_V_1_vld_out);
    sensitive << ( out_stream_strb_V_1_state );

    SC_METHOD(thread_out_stream_user_V_1_ack_in);
    sensitive << ( out_stream_user_V_1_state );

    SC_METHOD(thread_out_stream_user_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_user_V_1_data_out);
    sensitive << ( out_stream_user_V_1_sel );

    SC_METHOD(thread_out_stream_user_V_1_sel);
    sensitive << ( out_stream_user_V_1_sel_rd );

    SC_METHOD(thread_out_stream_user_V_1_vld_in);
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_stream_user_V_1_vld_out);
    sensitive << ( out_stream_user_V_1_state );

    SC_METHOD(thread_val_assign_fu_137_p1);
    sensitive << ( X_OUT_0_q0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_114_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    out_stream_data_V_1_sel_rd = SC_LOGIC_0;
    out_stream_data_V_1_sel_wr = SC_LOGIC_0;
    out_stream_data_V_1_state = "00";
    out_stream_keep_V_1_sel_rd = SC_LOGIC_0;
    out_stream_keep_V_1_state = "00";
    out_stream_strb_V_1_sel_rd = SC_LOGIC_0;
    out_stream_strb_V_1_state = "00";
    out_stream_user_V_1_sel_rd = SC_LOGIC_0;
    out_stream_user_V_1_state = "00";
    out_stream_last_V_1_sel_rd = SC_LOGIC_0;
    out_stream_last_V_1_sel_wr = SC_LOGIC_0;
    out_stream_last_V_1_state = "00";
    out_stream_id_V_1_sel_rd = SC_LOGIC_0;
    out_stream_id_V_1_state = "00";
    out_stream_dest_V_1_sel_rd = SC_LOGIC_0;
    out_stream_dest_V_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_3_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, X_OUT_0_address0, "(port)X_OUT_0_address0");
    sc_trace(mVcdFile, X_OUT_0_ce0, "(port)X_OUT_0_ce0");
    sc_trace(mVcdFile, X_OUT_0_q0, "(port)X_OUT_0_q0");
    sc_trace(mVcdFile, out_stream_TDATA, "(port)out_stream_TDATA");
    sc_trace(mVcdFile, out_stream_TVALID, "(port)out_stream_TVALID");
    sc_trace(mVcdFile, out_stream_TREADY, "(port)out_stream_TREADY");
    sc_trace(mVcdFile, out_stream_TKEEP, "(port)out_stream_TKEEP");
    sc_trace(mVcdFile, out_stream_TSTRB, "(port)out_stream_TSTRB");
    sc_trace(mVcdFile, out_stream_TUSER, "(port)out_stream_TUSER");
    sc_trace(mVcdFile, out_stream_TLAST, "(port)out_stream_TLAST");
    sc_trace(mVcdFile, out_stream_TID, "(port)out_stream_TID");
    sc_trace(mVcdFile, out_stream_TDEST, "(port)out_stream_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_stream_data_V_1_data_out, "out_stream_data_V_1_data_out");
    sc_trace(mVcdFile, out_stream_data_V_1_vld_in, "out_stream_data_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_data_V_1_vld_out, "out_stream_data_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_data_V_1_ack_in, "out_stream_data_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_data_V_1_ack_out, "out_stream_data_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_data_V_1_payload_A, "out_stream_data_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_data_V_1_payload_B, "out_stream_data_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_data_V_1_sel_rd, "out_stream_data_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_data_V_1_sel_wr, "out_stream_data_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_data_V_1_sel, "out_stream_data_V_1_sel");
    sc_trace(mVcdFile, out_stream_data_V_1_load_A, "out_stream_data_V_1_load_A");
    sc_trace(mVcdFile, out_stream_data_V_1_load_B, "out_stream_data_V_1_load_B");
    sc_trace(mVcdFile, out_stream_data_V_1_state, "out_stream_data_V_1_state");
    sc_trace(mVcdFile, out_stream_data_V_1_state_cmp_full, "out_stream_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_keep_V_1_data_out, "out_stream_keep_V_1_data_out");
    sc_trace(mVcdFile, out_stream_keep_V_1_vld_in, "out_stream_keep_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_keep_V_1_vld_out, "out_stream_keep_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_keep_V_1_ack_in, "out_stream_keep_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_keep_V_1_ack_out, "out_stream_keep_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_keep_V_1_sel_rd, "out_stream_keep_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_keep_V_1_sel, "out_stream_keep_V_1_sel");
    sc_trace(mVcdFile, out_stream_keep_V_1_state, "out_stream_keep_V_1_state");
    sc_trace(mVcdFile, out_stream_strb_V_1_data_out, "out_stream_strb_V_1_data_out");
    sc_trace(mVcdFile, out_stream_strb_V_1_vld_in, "out_stream_strb_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_strb_V_1_vld_out, "out_stream_strb_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_strb_V_1_ack_in, "out_stream_strb_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_strb_V_1_ack_out, "out_stream_strb_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_strb_V_1_sel_rd, "out_stream_strb_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_strb_V_1_sel, "out_stream_strb_V_1_sel");
    sc_trace(mVcdFile, out_stream_strb_V_1_state, "out_stream_strb_V_1_state");
    sc_trace(mVcdFile, out_stream_user_V_1_data_out, "out_stream_user_V_1_data_out");
    sc_trace(mVcdFile, out_stream_user_V_1_vld_in, "out_stream_user_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_user_V_1_vld_out, "out_stream_user_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_user_V_1_ack_in, "out_stream_user_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_user_V_1_ack_out, "out_stream_user_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_user_V_1_sel_rd, "out_stream_user_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_user_V_1_sel, "out_stream_user_V_1_sel");
    sc_trace(mVcdFile, out_stream_user_V_1_state, "out_stream_user_V_1_state");
    sc_trace(mVcdFile, out_stream_last_V_1_data_out, "out_stream_last_V_1_data_out");
    sc_trace(mVcdFile, out_stream_last_V_1_vld_in, "out_stream_last_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_last_V_1_vld_out, "out_stream_last_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_last_V_1_ack_in, "out_stream_last_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_last_V_1_ack_out, "out_stream_last_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_last_V_1_payload_A, "out_stream_last_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_last_V_1_payload_B, "out_stream_last_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_last_V_1_sel_rd, "out_stream_last_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_last_V_1_sel_wr, "out_stream_last_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_last_V_1_sel, "out_stream_last_V_1_sel");
    sc_trace(mVcdFile, out_stream_last_V_1_load_A, "out_stream_last_V_1_load_A");
    sc_trace(mVcdFile, out_stream_last_V_1_load_B, "out_stream_last_V_1_load_B");
    sc_trace(mVcdFile, out_stream_last_V_1_state, "out_stream_last_V_1_state");
    sc_trace(mVcdFile, out_stream_last_V_1_state_cmp_full, "out_stream_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_id_V_1_data_out, "out_stream_id_V_1_data_out");
    sc_trace(mVcdFile, out_stream_id_V_1_vld_in, "out_stream_id_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_id_V_1_vld_out, "out_stream_id_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_id_V_1_ack_in, "out_stream_id_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_id_V_1_ack_out, "out_stream_id_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_id_V_1_sel_rd, "out_stream_id_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_id_V_1_sel, "out_stream_id_V_1_sel");
    sc_trace(mVcdFile, out_stream_id_V_1_state, "out_stream_id_V_1_state");
    sc_trace(mVcdFile, out_stream_dest_V_1_data_out, "out_stream_dest_V_1_data_out");
    sc_trace(mVcdFile, out_stream_dest_V_1_vld_in, "out_stream_dest_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_dest_V_1_vld_out, "out_stream_dest_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_dest_V_1_ack_in, "out_stream_dest_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_dest_V_1_ack_out, "out_stream_dest_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_dest_V_1_sel_rd, "out_stream_dest_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_dest_V_1_sel, "out_stream_dest_V_1_sel");
    sc_trace(mVcdFile, out_stream_dest_V_1_state, "out_stream_dest_V_1_state");
    sc_trace(mVcdFile, out_stream_TDATA_blk_n, "out_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, exitcond4_fu_114_p2, "exitcond4_fu_114_p2");
    sc_trace(mVcdFile, last_assign_fu_125_p2, "last_assign_fu_125_p2");
    sc_trace(mVcdFile, last_assign_reg_150, "last_assign_reg_150");
    sc_trace(mVcdFile, indvars_iv_next_fu_131_p2, "indvars_iv_next_fu_131_p2");
    sc_trace(mVcdFile, indvars_iv_next_reg_155, "indvars_iv_next_reg_155");
    sc_trace(mVcdFile, val_assign_fu_137_p1, "val_assign_fu_137_p1");
    sc_trace(mVcdFile, indvars_iv_reg_90, "indvars_iv_reg_90");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, k_1_reg_102, "k_1_reg_102");
    sc_trace(mVcdFile, k_1_cast3_fu_120_p1, "k_1_cast3_fu_120_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Loop_3_proc::~Loop_3_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Loop_3_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_in.read())) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, exitcond4_fu_114_p2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        indvars_iv_reg_90 = ap_const_lv3_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1))) {
        indvars_iv_reg_90 = indvars_iv_next_reg_155.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        k_1_reg_102 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1))) {
        k_1_reg_102 = indvars_iv_reg_90.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_out.read()))) {
            out_stream_data_V_1_sel_rd =  (sc_logic) (~out_stream_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_in.read()))) {
            out_stream_data_V_1_sel_wr =  (sc_logic) (~out_stream_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_2)))) {
            out_stream_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_1)))) {
            out_stream_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()))))) {
            out_stream_data_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_out.read()))) {
            out_stream_dest_V_1_sel_rd =  (sc_logic) (~out_stream_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_dest_V_1_state.read())))) {
            out_stream_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_dest_V_1_state.read())))) {
            out_stream_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()))))) {
            out_stream_dest_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_out.read()))) {
            out_stream_id_V_1_sel_rd =  (sc_logic) (~out_stream_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_id_V_1_state.read())))) {
            out_stream_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_id_V_1_state.read())))) {
            out_stream_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()))))) {
            out_stream_id_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_out.read()))) {
            out_stream_keep_V_1_sel_rd =  (sc_logic) (~out_stream_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_keep_V_1_state.read())))) {
            out_stream_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_keep_V_1_state.read())))) {
            out_stream_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()))))) {
            out_stream_keep_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_out.read()))) {
            out_stream_last_V_1_sel_rd =  (sc_logic) (~out_stream_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_in.read()))) {
            out_stream_last_V_1_sel_wr =  (sc_logic) (~out_stream_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_last_V_1_state.read())))) {
            out_stream_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_last_V_1_state.read())))) {
            out_stream_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()))))) {
            out_stream_last_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_out.read()))) {
            out_stream_strb_V_1_sel_rd =  (sc_logic) (~out_stream_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_strb_V_1_state.read())))) {
            out_stream_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_strb_V_1_state.read())))) {
            out_stream_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()))))) {
            out_stream_strb_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_out.read()))) {
            out_stream_user_V_1_sel_rd =  (sc_logic) (~out_stream_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_user_V_1_state.read())))) {
            out_stream_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_user_V_1_state.read())))) {
            out_stream_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()))))) {
            out_stream_user_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_114_p2.read()))) {
        indvars_iv_next_reg_155 = indvars_iv_next_fu_131_p2.read();
        last_assign_reg_150 = last_assign_fu_125_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_load_A.read())) {
        out_stream_data_V_1_payload_A = val_assign_fu_137_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_load_B.read())) {
        out_stream_data_V_1_payload_B = val_assign_fu_137_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_load_A.read())) {
        out_stream_last_V_1_payload_A = last_assign_reg_150.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_load_B.read())) {
        out_stream_last_V_1_payload_B = last_assign_reg_150.read();
    }
}

void Loop_3_proc::thread_X_OUT_0_address0() {
    X_OUT_0_address0 =  (sc_lv<2>) (k_1_cast3_fu_120_p1.read());
}

void Loop_3_proc::thread_X_OUT_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_in.read())))) {
        X_OUT_0_ce0 = ap_const_logic_1;
    } else {
        X_OUT_0_ce0 = ap_const_logic_0;
    }
}

void Loop_3_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_3_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_3_proc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Loop_3_proc::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Loop_3_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_3_proc::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_in.read()));
}

void Loop_3_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond4_fu_114_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_3_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_3_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond4_fu_114_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_3_proc::thread_exitcond4_fu_114_p2() {
    exitcond4_fu_114_p2 = (!indvars_iv_reg_90.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(indvars_iv_reg_90.read() == ap_const_lv3_4);
}

void Loop_3_proc::thread_indvars_iv_next_fu_131_p2() {
    indvars_iv_next_fu_131_p2 = (!indvars_iv_reg_90.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(indvars_iv_reg_90.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void Loop_3_proc::thread_k_1_cast3_fu_120_p1() {
    k_1_cast3_fu_120_p1 = esl_zext<32,3>(k_1_reg_102.read());
}

void Loop_3_proc::thread_last_assign_fu_125_p2() {
    last_assign_fu_125_p2 = (!k_1_reg_102.read().is_01() || !ap_const_lv3_2.is_01())? sc_lv<1>(): sc_lv<1>(k_1_reg_102.read() == ap_const_lv3_2);
}

void Loop_3_proc::thread_out_stream_TDATA() {
    out_stream_TDATA = out_stream_data_V_1_data_out.read();
}

void Loop_3_proc::thread_out_stream_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        out_stream_TDATA_blk_n = out_stream_data_V_1_state.read()[1];
    } else {
        out_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void Loop_3_proc::thread_out_stream_TDEST() {
    out_stream_TDEST = out_stream_dest_V_1_data_out.read();
}

void Loop_3_proc::thread_out_stream_TID() {
    out_stream_TID = out_stream_id_V_1_data_out.read();
}

void Loop_3_proc::thread_out_stream_TKEEP() {
    out_stream_TKEEP = out_stream_keep_V_1_data_out.read();
}

void Loop_3_proc::thread_out_stream_TLAST() {
    out_stream_TLAST = out_stream_last_V_1_data_out.read();
}

void Loop_3_proc::thread_out_stream_TSTRB() {
    out_stream_TSTRB = out_stream_strb_V_1_data_out.read();
}

void Loop_3_proc::thread_out_stream_TUSER() {
    out_stream_TUSER = out_stream_user_V_1_data_out.read();
}

void Loop_3_proc::thread_out_stream_TVALID() {
    out_stream_TVALID = out_stream_dest_V_1_state.read()[0];
}

void Loop_3_proc::thread_out_stream_data_V_1_ack_in() {
    out_stream_data_V_1_ack_in = out_stream_data_V_1_state.read()[1];
}

void Loop_3_proc::thread_out_stream_data_V_1_ack_out() {
    out_stream_data_V_1_ack_out = out_stream_TREADY.read();
}

void Loop_3_proc::thread_out_stream_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_sel.read())) {
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_B.read();
    } else {
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_A.read();
    }
}

void Loop_3_proc::thread_out_stream_data_V_1_load_A() {
    out_stream_data_V_1_load_A = (out_stream_data_V_1_state_cmp_full.read() & ~out_stream_data_V_1_sel_wr.read());
}

void Loop_3_proc::thread_out_stream_data_V_1_load_B() {
    out_stream_data_V_1_load_B = (out_stream_data_V_1_sel_wr.read() & out_stream_data_V_1_state_cmp_full.read());
}

void Loop_3_proc::thread_out_stream_data_V_1_sel() {
    out_stream_data_V_1_sel = out_stream_data_V_1_sel_rd.read();
}

void Loop_3_proc::thread_out_stream_data_V_1_state_cmp_full() {
    out_stream_data_V_1_state_cmp_full =  (sc_logic) ((!out_stream_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void Loop_3_proc::thread_out_stream_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1))) {
        out_stream_data_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_data_V_1_vld_in = ap_const_logic_0;
    }
}

void Loop_3_proc::thread_out_stream_data_V_1_vld_out() {
    out_stream_data_V_1_vld_out = out_stream_data_V_1_state.read()[0];
}

void Loop_3_proc::thread_out_stream_dest_V_1_ack_in() {
    out_stream_dest_V_1_ack_in = out_stream_dest_V_1_state.read()[1];
}

void Loop_3_proc::thread_out_stream_dest_V_1_ack_out() {
    out_stream_dest_V_1_ack_out = out_stream_TREADY.read();
}

void Loop_3_proc::thread_out_stream_dest_V_1_data_out() {
    out_stream_dest_V_1_data_out = ap_const_lv5_0;
}

void Loop_3_proc::thread_out_stream_dest_V_1_sel() {
    out_stream_dest_V_1_sel = out_stream_dest_V_1_sel_rd.read();
}

void Loop_3_proc::thread_out_stream_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1))) {
        out_stream_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void Loop_3_proc::thread_out_stream_dest_V_1_vld_out() {
    out_stream_dest_V_1_vld_out = out_stream_dest_V_1_state.read()[0];
}

void Loop_3_proc::thread_out_stream_id_V_1_ack_in() {
    out_stream_id_V_1_ack_in = out_stream_id_V_1_state.read()[1];
}

void Loop_3_proc::thread_out_stream_id_V_1_ack_out() {
    out_stream_id_V_1_ack_out = out_stream_TREADY.read();
}

void Loop_3_proc::thread_out_stream_id_V_1_data_out() {
    out_stream_id_V_1_data_out = ap_const_lv5_0;
}

void Loop_3_proc::thread_out_stream_id_V_1_sel() {
    out_stream_id_V_1_sel = out_stream_id_V_1_sel_rd.read();
}

void Loop_3_proc::thread_out_stream_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1))) {
        out_stream_id_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_id_V_1_vld_in = ap_const_logic_0;
    }
}

void Loop_3_proc::thread_out_stream_id_V_1_vld_out() {
    out_stream_id_V_1_vld_out = out_stream_id_V_1_state.read()[0];
}

void Loop_3_proc::thread_out_stream_keep_V_1_ack_in() {
    out_stream_keep_V_1_ack_in = out_stream_keep_V_1_state.read()[1];
}

void Loop_3_proc::thread_out_stream_keep_V_1_ack_out() {
    out_stream_keep_V_1_ack_out = out_stream_TREADY.read();
}

void Loop_3_proc::thread_out_stream_keep_V_1_data_out() {
    out_stream_keep_V_1_data_out = ap_const_lv4_F;
}

void Loop_3_proc::thread_out_stream_keep_V_1_sel() {
    out_stream_keep_V_1_sel = out_stream_keep_V_1_sel_rd.read();
}

void Loop_3_proc::thread_out_stream_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1))) {
        out_stream_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void Loop_3_proc::thread_out_stream_keep_V_1_vld_out() {
    out_stream_keep_V_1_vld_out = out_stream_keep_V_1_state.read()[0];
}

void Loop_3_proc::thread_out_stream_last_V_1_ack_in() {
    out_stream_last_V_1_ack_in = out_stream_last_V_1_state.read()[1];
}

void Loop_3_proc::thread_out_stream_last_V_1_ack_out() {
    out_stream_last_V_1_ack_out = out_stream_TREADY.read();
}

void Loop_3_proc::thread_out_stream_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_sel.read())) {
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_B.read();
    } else {
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_A.read();
    }
}

void Loop_3_proc::thread_out_stream_last_V_1_load_A() {
    out_stream_last_V_1_load_A = (out_stream_last_V_1_state_cmp_full.read() & ~out_stream_last_V_1_sel_wr.read());
}

void Loop_3_proc::thread_out_stream_last_V_1_load_B() {
    out_stream_last_V_1_load_B = (out_stream_last_V_1_sel_wr.read() & out_stream_last_V_1_state_cmp_full.read());
}

void Loop_3_proc::thread_out_stream_last_V_1_sel() {
    out_stream_last_V_1_sel = out_stream_last_V_1_sel_rd.read();
}

void Loop_3_proc::thread_out_stream_last_V_1_state_cmp_full() {
    out_stream_last_V_1_state_cmp_full =  (sc_logic) ((!out_stream_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void Loop_3_proc::thread_out_stream_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1))) {
        out_stream_last_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_last_V_1_vld_in = ap_const_logic_0;
    }
}

void Loop_3_proc::thread_out_stream_last_V_1_vld_out() {
    out_stream_last_V_1_vld_out = out_stream_last_V_1_state.read()[0];
}

void Loop_3_proc::thread_out_stream_strb_V_1_ack_in() {
    out_stream_strb_V_1_ack_in = out_stream_strb_V_1_state.read()[1];
}

void Loop_3_proc::thread_out_stream_strb_V_1_ack_out() {
    out_stream_strb_V_1_ack_out = out_stream_TREADY.read();
}

void Loop_3_proc::thread_out_stream_strb_V_1_data_out() {
    out_stream_strb_V_1_data_out = ap_const_lv4_F;
}

void Loop_3_proc::thread_out_stream_strb_V_1_sel() {
    out_stream_strb_V_1_sel = out_stream_strb_V_1_sel_rd.read();
}

void Loop_3_proc::thread_out_stream_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1))) {
        out_stream_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void Loop_3_proc::thread_out_stream_strb_V_1_vld_out() {
    out_stream_strb_V_1_vld_out = out_stream_strb_V_1_state.read()[0];
}

void Loop_3_proc::thread_out_stream_user_V_1_ack_in() {
    out_stream_user_V_1_ack_in = out_stream_user_V_1_state.read()[1];
}

void Loop_3_proc::thread_out_stream_user_V_1_ack_out() {
    out_stream_user_V_1_ack_out = out_stream_TREADY.read();
}

void Loop_3_proc::thread_out_stream_user_V_1_data_out() {
    out_stream_user_V_1_data_out = ap_const_lv4_0;
}

void Loop_3_proc::thread_out_stream_user_V_1_sel() {
    out_stream_user_V_1_sel = out_stream_user_V_1_sel_rd.read();
}

void Loop_3_proc::thread_out_stream_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1))) {
        out_stream_user_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_user_V_1_vld_in = ap_const_logic_0;
    }
}

void Loop_3_proc::thread_out_stream_user_V_1_vld_out() {
    out_stream_user_V_1_vld_out = out_stream_user_V_1_state.read()[0];
}

void Loop_3_proc::thread_val_assign_fu_137_p1() {
    val_assign_fu_137_p1 = X_OUT_0_q0.read();
}

void Loop_3_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond4_fu_114_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_114_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

