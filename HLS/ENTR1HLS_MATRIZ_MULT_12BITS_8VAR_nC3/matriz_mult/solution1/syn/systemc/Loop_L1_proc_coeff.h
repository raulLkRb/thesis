// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __Loop_L1_proc_coeff_H__
#define __Loop_L1_proc_coeff_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct Loop_L1_proc_coeff_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 24;
  static const unsigned AddressWidth = 5;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(Loop_L1_proc_coeff_ram) {
        ram[0] = "0b00111011101101110111101100000000";
        ram[1] = "0b00111011110111010001001100000101";
        ram[2] = "0b00111100100110101011000111110110";
        ram[3] = "0b00111100101000010111100101010010";
        ram[4] = "0b00111101111111111111100010010100";
        ram[5] = "0b00111110100001000000111101000100";
        ram[6] = "0b00111110110111111101111111101000";
        ram[7] = "0b00111111010110100001101000011010";
        ram[8] = "0b00111110011110110111010011111111";
        ram[9] = "0b00111110011000100101110111001010";
        ram[10] = "0b00111111001100001000110000010110";
        ram[11] = "0b00111111000111011001000010111100";
        ram[12] = "0b10111101011001010111110100000101";
        ram[13] = "0b00111011110101101101001110001110";
        ram[14] = "0b10111110001011111011100110100111";
        ram[15] = "0b00111101011110111001001000000110";
        ram[16] = "0b00111101000001001110100010100010";
        ram[17] = "0b00111100001100100010001101010111";
        ram[18] = "0b00111110001010100111101001011011";
        ram[19] = "0b00111101101011110111110110111010";
        ram[20] = "0b00111110001010001111001001011111";
        ram[21] = "0b10111110100111110011110111011001";
        ram[22] = "0b00111111010101101111100000010101";
        ram[23] = "0b10111110101110111110011000101000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(Loop_L1_proc_coeff) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 24;
static const unsigned AddressWidth = 5;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


Loop_L1_proc_coeff_ram* meminst;


SC_CTOR(Loop_L1_proc_coeff) {
meminst = new Loop_L1_proc_coeff_ram("Loop_L1_proc_coeff_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~Loop_L1_proc_coeff() {
    delete meminst;
}


};//endmodule
#endif
