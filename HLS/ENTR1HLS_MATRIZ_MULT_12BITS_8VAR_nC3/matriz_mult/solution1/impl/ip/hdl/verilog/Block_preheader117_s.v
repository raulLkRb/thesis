// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_preheader117_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        dato_V_address0,
        dato_V_ce0,
        dato_V_q0,
        X_MAT_0_address0,
        X_MAT_0_ce0,
        X_MAT_0_we0,
        X_MAT_0_d0,
        X_MAT_0_q0,
        X_MAT_0_address1,
        X_MAT_0_ce1,
        X_MAT_0_we1,
        X_MAT_0_d1
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [1:0] dato_V_address0;
output   dato_V_ce0;
input  [31:0] dato_V_q0;
output  [2:0] X_MAT_0_address0;
output   X_MAT_0_ce0;
output   X_MAT_0_we0;
output  [31:0] X_MAT_0_d0;
input  [31:0] X_MAT_0_q0;
output  [2:0] X_MAT_0_address1;
output   X_MAT_0_ce1;
output   X_MAT_0_we1;
output  [31:0] X_MAT_0_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] dato_V_address0;
reg dato_V_ce0;
reg[2:0] X_MAT_0_address0;
reg X_MAT_0_ce0;
reg X_MAT_0_we0;
reg[2:0] X_MAT_0_address1;
reg X_MAT_0_ce1;
reg X_MAT_0_we1;
reg[31:0] X_MAT_0_d1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] vectorMedia1_address0;
reg    vectorMedia1_ce0;
wire   [31:0] vectorMedia1_q0;
reg    ap_block_state1;
wire   [31:0] temp_V_cast_fu_214_p1;
wire    ap_CS_fsm_state2;
wire   [31:0] temp_V_1_cast_fu_219_p1;
wire   [31:0] temp_V_2_cast_fu_228_p1;
wire    ap_CS_fsm_state3;
wire   [31:0] temp_V_3_cast_fu_233_p1;
wire   [31:0] temp_V_4_cast_fu_242_p1;
wire    ap_CS_fsm_state4;
wire   [31:0] temp_V_5_cast_fu_247_p1;
wire   [31:0] temp_V_6_cast_fu_256_p1;
wire    ap_CS_fsm_state5;
wire   [31:0] temp_V_7_cast_fu_261_p1;
wire   [3:0] i_1_fu_278_p2;
reg   [3:0] i_1_reg_347;
wire    ap_CS_fsm_state11;
wire   [0:0] exitcond2_fu_272_p2;
reg   [2:0] X_MAT_0_addr_8_reg_357;
reg   [31:0] X_MAT_0_load_reg_363;
wire    ap_CS_fsm_state12;
reg   [31:0] vectorMedia1_load_reg_368;
wire   [31:0] grp_fu_188_p2;
reg   [31:0] tmp_reg_373;
wire    ap_CS_fsm_state17;
reg   [3:0] i_reg_177;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [31:0] i_cast_fu_266_p1;
wire   [31:0] grp_fu_192_p1;
wire   [31:0] grp_fu_196_p1;
wire    ap_CS_fsm_state13;
reg   [31:0] grp_fu_192_p0;
reg   [31:0] grp_fu_196_p0;
wire   [11:0] tmp_1_fu_210_p1;
wire   [11:0] grp_fu_200_p4;
wire   [11:0] tmp_2_fu_224_p1;
wire   [11:0] tmp_3_fu_238_p1;
wire   [11:0] tmp_4_fu_252_p1;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 18'd1;
end

Block_preheader11bkb #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
vectorMedia1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(vectorMedia1_address0),
    .ce0(vectorMedia1_ce0),
    .q0(vectorMedia1_q0)
);

wrapped_mmult_hw_cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
wrapped_mmult_hw_cud_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(X_MAT_0_load_reg_363),
    .din1(vectorMedia1_load_reg_368),
    .ce(1'b1),
    .dout(grp_fu_188_p2)
);

wrapped_mmult_hw_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
wrapped_mmult_hw_dEe_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_192_p0),
    .ce(1'b1),
    .dout(grp_fu_192_p1)
);

wrapped_mmult_hw_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
wrapped_mmult_hw_dEe_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_196_p0),
    .ce(1'b1),
    .dout(grp_fu_196_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond2_fu_272_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_reg_177 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i_reg_177 <= i_1_reg_347;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond2_fu_272_p2 == 1'd0))) begin
        X_MAT_0_addr_8_reg_357 <= i_cast_fu_266_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        X_MAT_0_load_reg_363 <= X_MAT_0_q0;
        vectorMedia1_load_reg_368 <= vectorMedia1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_1_reg_347 <= i_1_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_reg_373 <= grp_fu_188_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        X_MAT_0_address0 = i_cast_fu_266_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        X_MAT_0_address0 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        X_MAT_0_address0 = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        X_MAT_0_address0 = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        X_MAT_0_address0 = 32'd0;
    end else begin
        X_MAT_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        X_MAT_0_address1 = X_MAT_0_addr_8_reg_357;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        X_MAT_0_address1 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        X_MAT_0_address1 = 32'd5;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        X_MAT_0_address1 = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        X_MAT_0_address1 = 32'd1;
    end else begin
        X_MAT_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        X_MAT_0_ce0 = 1'b1;
    end else begin
        X_MAT_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        X_MAT_0_ce1 = 1'b1;
    end else begin
        X_MAT_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        X_MAT_0_d1 = tmp_reg_373;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        X_MAT_0_d1 = grp_fu_196_p1;
    end else begin
        X_MAT_0_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        X_MAT_0_we0 = 1'b1;
    end else begin
        X_MAT_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        X_MAT_0_we1 = 1'b1;
    end else begin
        X_MAT_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond2_fu_272_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond2_fu_272_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dato_V_address0 = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dato_V_address0 = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dato_V_address0 = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        dato_V_address0 = 32'd0;
    end else begin
        dato_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1))) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        dato_V_ce0 = 1'b1;
    end else begin
        dato_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_192_p0 = temp_V_6_cast_fu_256_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_192_p0 = temp_V_4_cast_fu_242_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_192_p0 = temp_V_2_cast_fu_228_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_192_p0 = temp_V_cast_fu_214_p1;
    end else begin
        grp_fu_192_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_196_p0 = temp_V_7_cast_fu_261_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_196_p0 = temp_V_5_cast_fu_247_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_196_p0 = temp_V_3_cast_fu_233_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_196_p0 = temp_V_1_cast_fu_219_p1;
    end else begin
        grp_fu_196_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        vectorMedia1_ce0 = 1'b1;
    end else begin
        vectorMedia1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond2_fu_272_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X_MAT_0_d0 = grp_fu_192_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign exitcond2_fu_272_p2 = ((i_reg_177 == 4'd8) ? 1'b1 : 1'b0);

assign grp_fu_200_p4 = {{dato_V_q0[23:12]}};

assign i_1_fu_278_p2 = (i_reg_177 + 4'd1);

assign i_cast_fu_266_p1 = i_reg_177;

assign temp_V_1_cast_fu_219_p1 = grp_fu_200_p4;

assign temp_V_2_cast_fu_228_p1 = tmp_2_fu_224_p1;

assign temp_V_3_cast_fu_233_p1 = grp_fu_200_p4;

assign temp_V_4_cast_fu_242_p1 = tmp_3_fu_238_p1;

assign temp_V_5_cast_fu_247_p1 = grp_fu_200_p4;

assign temp_V_6_cast_fu_256_p1 = tmp_4_fu_252_p1;

assign temp_V_7_cast_fu_261_p1 = grp_fu_200_p4;

assign temp_V_cast_fu_214_p1 = tmp_1_fu_210_p1;

assign tmp_1_fu_210_p1 = dato_V_q0[11:0];

assign tmp_2_fu_224_p1 = dato_V_q0[11:0];

assign tmp_3_fu_238_p1 = dato_V_q0[11:0];

assign tmp_4_fu_252_p1 = dato_V_q0[11:0];

assign vectorMedia1_address0 = i_cast_fu_266_p1;

endmodule //Block_preheader117_s
