// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_3_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        X_OUT_0_address0,
        X_OUT_0_ce0,
        X_OUT_0_q0,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        out_stream_TKEEP,
        out_stream_TSTRB,
        out_stream_TUSER,
        out_stream_TLAST,
        out_stream_TID,
        out_stream_TDEST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [1:0] X_OUT_0_address0;
output   X_OUT_0_ce0;
input  [31:0] X_OUT_0_q0;
output  [31:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
output  [3:0] out_stream_TKEEP;
output  [3:0] out_stream_TSTRB;
output  [3:0] out_stream_TUSER;
output  [0:0] out_stream_TLAST;
output  [4:0] out_stream_TID;
output  [4:0] out_stream_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_OUT_0_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] out_stream_data_V_1_data_out;
reg    out_stream_data_V_1_vld_in;
wire    out_stream_data_V_1_vld_out;
wire    out_stream_data_V_1_ack_in;
wire    out_stream_data_V_1_ack_out;
reg   [31:0] out_stream_data_V_1_payload_A;
reg   [31:0] out_stream_data_V_1_payload_B;
reg    out_stream_data_V_1_sel_rd;
reg    out_stream_data_V_1_sel_wr;
wire    out_stream_data_V_1_sel;
wire    out_stream_data_V_1_load_A;
wire    out_stream_data_V_1_load_B;
reg   [1:0] out_stream_data_V_1_state;
wire    out_stream_data_V_1_state_cmp_full;
wire   [3:0] out_stream_keep_V_1_data_out;
reg    out_stream_keep_V_1_vld_in;
wire    out_stream_keep_V_1_vld_out;
wire    out_stream_keep_V_1_ack_in;
wire    out_stream_keep_V_1_ack_out;
reg    out_stream_keep_V_1_sel_rd;
wire    out_stream_keep_V_1_sel;
reg   [1:0] out_stream_keep_V_1_state;
wire   [3:0] out_stream_strb_V_1_data_out;
reg    out_stream_strb_V_1_vld_in;
wire    out_stream_strb_V_1_vld_out;
wire    out_stream_strb_V_1_ack_in;
wire    out_stream_strb_V_1_ack_out;
reg    out_stream_strb_V_1_sel_rd;
wire    out_stream_strb_V_1_sel;
reg   [1:0] out_stream_strb_V_1_state;
wire   [3:0] out_stream_user_V_1_data_out;
reg    out_stream_user_V_1_vld_in;
wire    out_stream_user_V_1_vld_out;
wire    out_stream_user_V_1_ack_in;
wire    out_stream_user_V_1_ack_out;
reg    out_stream_user_V_1_sel_rd;
wire    out_stream_user_V_1_sel;
reg   [1:0] out_stream_user_V_1_state;
reg   [0:0] out_stream_last_V_1_data_out;
reg    out_stream_last_V_1_vld_in;
wire    out_stream_last_V_1_vld_out;
wire    out_stream_last_V_1_ack_in;
wire    out_stream_last_V_1_ack_out;
reg   [0:0] out_stream_last_V_1_payload_A;
reg   [0:0] out_stream_last_V_1_payload_B;
reg    out_stream_last_V_1_sel_rd;
reg    out_stream_last_V_1_sel_wr;
wire    out_stream_last_V_1_sel;
wire    out_stream_last_V_1_load_A;
wire    out_stream_last_V_1_load_B;
reg   [1:0] out_stream_last_V_1_state;
wire    out_stream_last_V_1_state_cmp_full;
wire   [4:0] out_stream_id_V_1_data_out;
reg    out_stream_id_V_1_vld_in;
wire    out_stream_id_V_1_vld_out;
wire    out_stream_id_V_1_ack_in;
wire    out_stream_id_V_1_ack_out;
reg    out_stream_id_V_1_sel_rd;
wire    out_stream_id_V_1_sel;
reg   [1:0] out_stream_id_V_1_state;
wire   [4:0] out_stream_dest_V_1_data_out;
reg    out_stream_dest_V_1_vld_in;
wire    out_stream_dest_V_1_vld_out;
wire    out_stream_dest_V_1_ack_in;
wire    out_stream_dest_V_1_ack_out;
reg    out_stream_dest_V_1_sel_rd;
wire    out_stream_dest_V_1_sel;
reg   [1:0] out_stream_dest_V_1_state;
reg    out_stream_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state2;
reg    ap_block_state2;
wire   [0:0] exitcond4_fu_114_p2;
wire   [0:0] last_assign_fu_125_p2;
reg   [0:0] last_assign_reg_150;
wire   [2:0] indvars_iv_next_fu_131_p2;
reg   [2:0] indvars_iv_next_reg_155;
wire   [31:0] val_assign_fu_137_p1;
reg   [2:0] indvars_iv_reg_90;
reg    ap_block_state1;
reg   [2:0] k_1_reg_102;
wire   [31:0] k_1_cast3_fu_120_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 out_stream_data_V_1_sel_rd = 1'b0;
#0 out_stream_data_V_1_sel_wr = 1'b0;
#0 out_stream_data_V_1_state = 2'd0;
#0 out_stream_keep_V_1_sel_rd = 1'b0;
#0 out_stream_keep_V_1_state = 2'd0;
#0 out_stream_strb_V_1_sel_rd = 1'b0;
#0 out_stream_strb_V_1_state = 2'd0;
#0 out_stream_user_V_1_sel_rd = 1'b0;
#0 out_stream_user_V_1_state = 2'd0;
#0 out_stream_last_V_1_sel_rd = 1'b0;
#0 out_stream_last_V_1_sel_wr = 1'b0;
#0 out_stream_last_V_1_state = 2'd0;
#0 out_stream_id_V_1_sel_rd = 1'b0;
#0 out_stream_id_V_1_state = 2'd0;
#0 out_stream_dest_V_1_sel_rd = 1'b0;
#0 out_stream_dest_V_1_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in)) & (1'd1 == exitcond4_fu_114_p2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_data_V_1_ack_out) & (1'b1 == out_stream_data_V_1_vld_out))) begin
            out_stream_data_V_1_sel_rd <= ~out_stream_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_data_V_1_vld_in) & (1'b1 == out_stream_data_V_1_ack_in))) begin
            out_stream_data_V_1_sel_wr <= ~out_stream_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_stream_data_V_1_vld_in) & (1'b1 == out_stream_data_V_1_ack_out) & (out_stream_data_V_1_state == 2'd3)) | ((1'b0 == out_stream_data_V_1_vld_in) & (out_stream_data_V_1_state == 2'd2)))) begin
            out_stream_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_stream_data_V_1_vld_in) & (1'b0 == out_stream_data_V_1_ack_out) & (out_stream_data_V_1_state == 2'd3)) | ((1'b0 == out_stream_data_V_1_ack_out) & (out_stream_data_V_1_state == 2'd1)))) begin
            out_stream_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_stream_data_V_1_vld_in) & (out_stream_data_V_1_state == 2'd2)) | ((1'b1 == out_stream_data_V_1_ack_out) & (out_stream_data_V_1_state == 2'd1)) | ((out_stream_data_V_1_state == 2'd3) & ~((1'b1 == out_stream_data_V_1_vld_in) & (1'b0 == out_stream_data_V_1_ack_out)) & ~((1'b0 == out_stream_data_V_1_vld_in) & (1'b1 == out_stream_data_V_1_ack_out))))) begin
            out_stream_data_V_1_state <= 2'd3;
        end else begin
            out_stream_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_dest_V_1_ack_out) & (1'b1 == out_stream_dest_V_1_vld_out))) begin
            out_stream_dest_V_1_sel_rd <= ~out_stream_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_dest_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_stream_dest_V_1_vld_in) & (1'b1 == out_stream_dest_V_1_ack_out) & (2'd3 == out_stream_dest_V_1_state)) | ((1'b0 == out_stream_dest_V_1_vld_in) & (2'd2 == out_stream_dest_V_1_state)))) begin
            out_stream_dest_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_stream_dest_V_1_vld_in) & (1'b0 == out_stream_dest_V_1_ack_out) & (2'd3 == out_stream_dest_V_1_state)) | ((1'b0 == out_stream_dest_V_1_ack_out) & (2'd1 == out_stream_dest_V_1_state)))) begin
            out_stream_dest_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_stream_dest_V_1_vld_in) & (2'd2 == out_stream_dest_V_1_state)) | ((1'b1 == out_stream_dest_V_1_ack_out) & (2'd1 == out_stream_dest_V_1_state)) | ((2'd3 == out_stream_dest_V_1_state) & ~((1'b1 == out_stream_dest_V_1_vld_in) & (1'b0 == out_stream_dest_V_1_ack_out)) & ~((1'b0 == out_stream_dest_V_1_vld_in) & (1'b1 == out_stream_dest_V_1_ack_out))))) begin
            out_stream_dest_V_1_state <= 2'd3;
        end else begin
            out_stream_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_id_V_1_ack_out) & (1'b1 == out_stream_id_V_1_vld_out))) begin
            out_stream_id_V_1_sel_rd <= ~out_stream_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_id_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_stream_id_V_1_vld_in) & (1'b1 == out_stream_id_V_1_ack_out) & (2'd3 == out_stream_id_V_1_state)) | ((1'b0 == out_stream_id_V_1_vld_in) & (2'd2 == out_stream_id_V_1_state)))) begin
            out_stream_id_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_stream_id_V_1_vld_in) & (1'b0 == out_stream_id_V_1_ack_out) & (2'd3 == out_stream_id_V_1_state)) | ((1'b0 == out_stream_id_V_1_ack_out) & (2'd1 == out_stream_id_V_1_state)))) begin
            out_stream_id_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_stream_id_V_1_vld_in) & (2'd2 == out_stream_id_V_1_state)) | ((1'b1 == out_stream_id_V_1_ack_out) & (2'd1 == out_stream_id_V_1_state)) | ((2'd3 == out_stream_id_V_1_state) & ~((1'b1 == out_stream_id_V_1_vld_in) & (1'b0 == out_stream_id_V_1_ack_out)) & ~((1'b0 == out_stream_id_V_1_vld_in) & (1'b1 == out_stream_id_V_1_ack_out))))) begin
            out_stream_id_V_1_state <= 2'd3;
        end else begin
            out_stream_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_keep_V_1_ack_out) & (1'b1 == out_stream_keep_V_1_vld_out))) begin
            out_stream_keep_V_1_sel_rd <= ~out_stream_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_stream_keep_V_1_vld_in) & (1'b1 == out_stream_keep_V_1_ack_out) & (2'd3 == out_stream_keep_V_1_state)) | ((1'b0 == out_stream_keep_V_1_vld_in) & (2'd2 == out_stream_keep_V_1_state)))) begin
            out_stream_keep_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_stream_keep_V_1_vld_in) & (1'b0 == out_stream_keep_V_1_ack_out) & (2'd3 == out_stream_keep_V_1_state)) | ((1'b0 == out_stream_keep_V_1_ack_out) & (2'd1 == out_stream_keep_V_1_state)))) begin
            out_stream_keep_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_stream_keep_V_1_vld_in) & (2'd2 == out_stream_keep_V_1_state)) | ((1'b1 == out_stream_keep_V_1_ack_out) & (2'd1 == out_stream_keep_V_1_state)) | ((2'd3 == out_stream_keep_V_1_state) & ~((1'b1 == out_stream_keep_V_1_vld_in) & (1'b0 == out_stream_keep_V_1_ack_out)) & ~((1'b0 == out_stream_keep_V_1_vld_in) & (1'b1 == out_stream_keep_V_1_ack_out))))) begin
            out_stream_keep_V_1_state <= 2'd3;
        end else begin
            out_stream_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_last_V_1_ack_out) & (1'b1 == out_stream_last_V_1_vld_out))) begin
            out_stream_last_V_1_sel_rd <= ~out_stream_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_last_V_1_vld_in) & (1'b1 == out_stream_last_V_1_ack_in))) begin
            out_stream_last_V_1_sel_wr <= ~out_stream_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_stream_last_V_1_vld_in) & (1'b1 == out_stream_last_V_1_ack_out) & (2'd3 == out_stream_last_V_1_state)) | ((1'b0 == out_stream_last_V_1_vld_in) & (2'd2 == out_stream_last_V_1_state)))) begin
            out_stream_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_stream_last_V_1_vld_in) & (1'b0 == out_stream_last_V_1_ack_out) & (2'd3 == out_stream_last_V_1_state)) | ((1'b0 == out_stream_last_V_1_ack_out) & (2'd1 == out_stream_last_V_1_state)))) begin
            out_stream_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_stream_last_V_1_vld_in) & (2'd2 == out_stream_last_V_1_state)) | ((1'b1 == out_stream_last_V_1_ack_out) & (2'd1 == out_stream_last_V_1_state)) | ((2'd3 == out_stream_last_V_1_state) & ~((1'b1 == out_stream_last_V_1_vld_in) & (1'b0 == out_stream_last_V_1_ack_out)) & ~((1'b0 == out_stream_last_V_1_vld_in) & (1'b1 == out_stream_last_V_1_ack_out))))) begin
            out_stream_last_V_1_state <= 2'd3;
        end else begin
            out_stream_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_strb_V_1_ack_out) & (1'b1 == out_stream_strb_V_1_vld_out))) begin
            out_stream_strb_V_1_sel_rd <= ~out_stream_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_strb_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_stream_strb_V_1_vld_in) & (1'b1 == out_stream_strb_V_1_ack_out) & (2'd3 == out_stream_strb_V_1_state)) | ((1'b0 == out_stream_strb_V_1_vld_in) & (2'd2 == out_stream_strb_V_1_state)))) begin
            out_stream_strb_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_stream_strb_V_1_vld_in) & (1'b0 == out_stream_strb_V_1_ack_out) & (2'd3 == out_stream_strb_V_1_state)) | ((1'b0 == out_stream_strb_V_1_ack_out) & (2'd1 == out_stream_strb_V_1_state)))) begin
            out_stream_strb_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_stream_strb_V_1_vld_in) & (2'd2 == out_stream_strb_V_1_state)) | ((1'b1 == out_stream_strb_V_1_ack_out) & (2'd1 == out_stream_strb_V_1_state)) | ((2'd3 == out_stream_strb_V_1_state) & ~((1'b1 == out_stream_strb_V_1_vld_in) & (1'b0 == out_stream_strb_V_1_ack_out)) & ~((1'b0 == out_stream_strb_V_1_vld_in) & (1'b1 == out_stream_strb_V_1_ack_out))))) begin
            out_stream_strb_V_1_state <= 2'd3;
        end else begin
            out_stream_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_stream_user_V_1_ack_out) & (1'b1 == out_stream_user_V_1_vld_out))) begin
            out_stream_user_V_1_sel_rd <= ~out_stream_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_stream_user_V_1_vld_in) & (1'b1 == out_stream_user_V_1_ack_out) & (2'd3 == out_stream_user_V_1_state)) | ((1'b0 == out_stream_user_V_1_vld_in) & (2'd2 == out_stream_user_V_1_state)))) begin
            out_stream_user_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_stream_user_V_1_vld_in) & (1'b0 == out_stream_user_V_1_ack_out) & (2'd3 == out_stream_user_V_1_state)) | ((1'b0 == out_stream_user_V_1_ack_out) & (2'd1 == out_stream_user_V_1_state)))) begin
            out_stream_user_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_stream_user_V_1_vld_in) & (2'd2 == out_stream_user_V_1_state)) | ((1'b1 == out_stream_user_V_1_ack_out) & (2'd1 == out_stream_user_V_1_state)) | ((2'd3 == out_stream_user_V_1_state) & ~((1'b1 == out_stream_user_V_1_vld_in) & (1'b0 == out_stream_user_V_1_ack_out)) & ~((1'b0 == out_stream_user_V_1_vld_in) & (1'b1 == out_stream_user_V_1_ack_out))))) begin
            out_stream_user_V_1_state <= 2'd3;
        end else begin
            out_stream_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        indvars_iv_reg_90 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (out_stream_dest_V_1_ack_in == 1'b1))) begin
        indvars_iv_reg_90 <= indvars_iv_next_reg_155;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        k_1_reg_102 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (out_stream_dest_V_1_ack_in == 1'b1))) begin
        k_1_reg_102 <= indvars_iv_reg_90;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in)) & (1'd0 == exitcond4_fu_114_p2))) begin
        indvars_iv_next_reg_155 <= indvars_iv_next_fu_131_p2;
        last_assign_reg_150 <= last_assign_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_stream_data_V_1_load_A)) begin
        out_stream_data_V_1_payload_A <= val_assign_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_stream_data_V_1_load_B)) begin
        out_stream_data_V_1_payload_B <= val_assign_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_stream_last_V_1_load_A)) begin
        out_stream_last_V_1_payload_A <= last_assign_reg_150;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_stream_last_V_1_load_B)) begin
        out_stream_last_V_1_payload_B <= last_assign_reg_150;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in)))) begin
        X_OUT_0_ce0 = 1'b1;
    end else begin
        X_OUT_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in)) & (1'd1 == exitcond4_fu_114_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in)) & (1'd1 == exitcond4_fu_114_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        out_stream_TDATA_blk_n = out_stream_data_V_1_state[1'd1];
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == out_stream_data_V_1_sel)) begin
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_B;
    end else begin
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (out_stream_dest_V_1_ack_in == 1'b1))) begin
        out_stream_data_V_1_vld_in = 1'b1;
    end else begin
        out_stream_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (out_stream_dest_V_1_ack_in == 1'b1))) begin
        out_stream_dest_V_1_vld_in = 1'b1;
    end else begin
        out_stream_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (out_stream_dest_V_1_ack_in == 1'b1))) begin
        out_stream_id_V_1_vld_in = 1'b1;
    end else begin
        out_stream_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (out_stream_dest_V_1_ack_in == 1'b1))) begin
        out_stream_keep_V_1_vld_in = 1'b1;
    end else begin
        out_stream_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == out_stream_last_V_1_sel)) begin
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_B;
    end else begin
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (out_stream_dest_V_1_ack_in == 1'b1))) begin
        out_stream_last_V_1_vld_in = 1'b1;
    end else begin
        out_stream_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (out_stream_dest_V_1_ack_in == 1'b1))) begin
        out_stream_strb_V_1_vld_in = 1'b1;
    end else begin
        out_stream_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (out_stream_dest_V_1_ack_in == 1'b1))) begin
        out_stream_user_V_1_vld_in = 1'b1;
    end else begin
        out_stream_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in)) & (1'd1 == exitcond4_fu_114_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in)) & (1'd0 == exitcond4_fu_114_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (out_stream_dest_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (out_stream_dest_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X_OUT_0_address0 = k_1_cast3_fu_120_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((1'b0 == out_stream_data_V_1_ack_in) | (1'b0 == out_stream_keep_V_1_ack_in) | (1'b0 == out_stream_strb_V_1_ack_in) | (1'b0 == out_stream_user_V_1_ack_in) | (1'b0 == out_stream_last_V_1_ack_in) | (1'b0 == out_stream_id_V_1_ack_in) | (1'b0 == out_stream_dest_V_1_ack_in));
end

assign exitcond4_fu_114_p2 = ((indvars_iv_reg_90 == 3'd4) ? 1'b1 : 1'b0);

assign indvars_iv_next_fu_131_p2 = (indvars_iv_reg_90 + 3'd1);

assign k_1_cast3_fu_120_p1 = k_1_reg_102;

assign last_assign_fu_125_p2 = ((k_1_reg_102 == 3'd2) ? 1'b1 : 1'b0);

assign out_stream_TDATA = out_stream_data_V_1_data_out;

assign out_stream_TDEST = out_stream_dest_V_1_data_out;

assign out_stream_TID = out_stream_id_V_1_data_out;

assign out_stream_TKEEP = out_stream_keep_V_1_data_out;

assign out_stream_TLAST = out_stream_last_V_1_data_out;

assign out_stream_TSTRB = out_stream_strb_V_1_data_out;

assign out_stream_TUSER = out_stream_user_V_1_data_out;

assign out_stream_TVALID = out_stream_dest_V_1_state[1'd0];

assign out_stream_data_V_1_ack_in = out_stream_data_V_1_state[1'd1];

assign out_stream_data_V_1_ack_out = out_stream_TREADY;

assign out_stream_data_V_1_load_A = (out_stream_data_V_1_state_cmp_full & ~out_stream_data_V_1_sel_wr);

assign out_stream_data_V_1_load_B = (out_stream_data_V_1_sel_wr & out_stream_data_V_1_state_cmp_full);

assign out_stream_data_V_1_sel = out_stream_data_V_1_sel_rd;

assign out_stream_data_V_1_state_cmp_full = ((out_stream_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_data_V_1_vld_out = out_stream_data_V_1_state[1'd0];

assign out_stream_dest_V_1_ack_in = out_stream_dest_V_1_state[1'd1];

assign out_stream_dest_V_1_ack_out = out_stream_TREADY;

assign out_stream_dest_V_1_data_out = 5'd0;

assign out_stream_dest_V_1_sel = out_stream_dest_V_1_sel_rd;

assign out_stream_dest_V_1_vld_out = out_stream_dest_V_1_state[1'd0];

assign out_stream_id_V_1_ack_in = out_stream_id_V_1_state[1'd1];

assign out_stream_id_V_1_ack_out = out_stream_TREADY;

assign out_stream_id_V_1_data_out = 5'd0;

assign out_stream_id_V_1_sel = out_stream_id_V_1_sel_rd;

assign out_stream_id_V_1_vld_out = out_stream_id_V_1_state[1'd0];

assign out_stream_keep_V_1_ack_in = out_stream_keep_V_1_state[1'd1];

assign out_stream_keep_V_1_ack_out = out_stream_TREADY;

assign out_stream_keep_V_1_data_out = 4'd15;

assign out_stream_keep_V_1_sel = out_stream_keep_V_1_sel_rd;

assign out_stream_keep_V_1_vld_out = out_stream_keep_V_1_state[1'd0];

assign out_stream_last_V_1_ack_in = out_stream_last_V_1_state[1'd1];

assign out_stream_last_V_1_ack_out = out_stream_TREADY;

assign out_stream_last_V_1_load_A = (out_stream_last_V_1_state_cmp_full & ~out_stream_last_V_1_sel_wr);

assign out_stream_last_V_1_load_B = (out_stream_last_V_1_sel_wr & out_stream_last_V_1_state_cmp_full);

assign out_stream_last_V_1_sel = out_stream_last_V_1_sel_rd;

assign out_stream_last_V_1_state_cmp_full = ((out_stream_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_last_V_1_vld_out = out_stream_last_V_1_state[1'd0];

assign out_stream_strb_V_1_ack_in = out_stream_strb_V_1_state[1'd1];

assign out_stream_strb_V_1_ack_out = out_stream_TREADY;

assign out_stream_strb_V_1_data_out = 4'd15;

assign out_stream_strb_V_1_sel = out_stream_strb_V_1_sel_rd;

assign out_stream_strb_V_1_vld_out = out_stream_strb_V_1_state[1'd0];

assign out_stream_user_V_1_ack_in = out_stream_user_V_1_state[1'd1];

assign out_stream_user_V_1_ack_out = out_stream_TREADY;

assign out_stream_user_V_1_data_out = 4'd0;

assign out_stream_user_V_1_sel = out_stream_user_V_1_sel_rd;

assign out_stream_user_V_1_vld_out = out_stream_user_V_1_state[1'd0];

assign val_assign_fu_137_p1 = X_OUT_0_q0;

endmodule //Loop_3_proc
