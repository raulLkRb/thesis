// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module read_data (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        buf_0_V_din,
        buf_0_V_full_n,
        buf_0_V_write,
        start_out,
        start_write,
        input_AX_ALG_TDATA,
        input_AX_ALG_TVALID,
        input_AX_ALG_TREADY,
        input_AX_ALG_TKEEP,
        input_AX_ALG_TSTRB,
        input_AX_ALG_TUSER,
        input_AX_ALG_TLAST,
        input_AX_ALG_TID,
        input_AX_ALG_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] buf_0_V_din;
input   buf_0_V_full_n;
output   buf_0_V_write;
output   start_out;
output   start_write;
input  [31:0] input_AX_ALG_TDATA;
input   input_AX_ALG_TVALID;
output   input_AX_ALG_TREADY;
input  [3:0] input_AX_ALG_TKEEP;
input  [3:0] input_AX_ALG_TSTRB;
input  [3:0] input_AX_ALG_TUSER;
input  [0:0] input_AX_ALG_TLAST;
input  [4:0] input_AX_ALG_TID;
input  [4:0] input_AX_ALG_TDEST;

reg ap_done;
reg ap_idle;
reg buf_0_V_write;
reg start_write;

reg    real_start;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    internal_ap_ready;
reg    ap_block_state1_pp0_stage0_iter0;
wire    input_data_V_0_vld_out;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_flag00011001;
reg    start_once_reg;
reg   [31:0] input_data_V_0_data_out;
wire    input_data_V_0_vld_in;
wire    input_data_V_0_ack_in;
reg    input_data_V_0_ack_out;
reg   [31:0] input_data_V_0_payload_A;
reg   [31:0] input_data_V_0_payload_B;
reg    input_data_V_0_sel_rd;
reg    input_data_V_0_sel_wr;
wire    input_data_V_0_sel;
wire    input_data_V_0_load_A;
wire    input_data_V_0_load_B;
reg   [1:0] input_data_V_0_state;
wire    input_data_V_0_state_cmp_full;
wire    input_dest_V_0_vld_in;
reg    input_dest_V_0_ack_out;
reg   [1:0] input_dest_V_0_state;
reg    input_AX_ALG_TDATA_blk_n;
wire    ap_block_pp0_stage0_flag00000000;
reg    buf_0_V_blk_n;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_block_pp0_stage0_flag00001001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 start_once_reg = 1'b0;
#0 input_data_V_0_sel_rd = 1'b0;
#0 input_data_V_0_sel_wr = 1'b0;
#0 input_data_V_0_state = 2'd0;
#0 input_dest_V_0_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_data_V_0_ack_out) & (1'b1 == input_data_V_0_vld_out))) begin
            input_data_V_0_sel_rd <= ~input_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_data_V_0_vld_in) & (1'b1 == input_data_V_0_ack_in))) begin
            input_data_V_0_sel_wr <= ~input_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_data_V_0_vld_in) & (1'b1 == input_data_V_0_ack_out) & (input_data_V_0_state == 2'd3)) | ((1'b0 == input_data_V_0_vld_in) & (input_data_V_0_state == 2'd2)))) begin
            input_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_data_V_0_vld_in) & (1'b0 == input_data_V_0_ack_out) & (input_data_V_0_state == 2'd3)) | ((1'b0 == input_data_V_0_ack_out) & (input_data_V_0_state == 2'd1)))) begin
            input_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_data_V_0_vld_in) & (input_data_V_0_state == 2'd2)) | ((1'b1 == input_data_V_0_ack_out) & (input_data_V_0_state == 2'd1)) | ((input_data_V_0_state == 2'd3) & ~((1'b1 == input_data_V_0_vld_in) & (1'b0 == input_data_V_0_ack_out)) & ~((1'b0 == input_data_V_0_vld_in) & (1'b1 == input_data_V_0_ack_out))))) begin
            input_data_V_0_state <= 2'd3;
        end else begin
            input_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_dest_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_dest_V_0_vld_in) & (1'b1 == input_dest_V_0_ack_out) & (2'd3 == input_dest_V_0_state)) | ((1'b0 == input_dest_V_0_vld_in) & (2'd2 == input_dest_V_0_state)))) begin
            input_dest_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_dest_V_0_vld_in) & (1'b0 == input_dest_V_0_ack_out) & (2'd3 == input_dest_V_0_state)) | ((1'b0 == input_dest_V_0_ack_out) & (2'd1 == input_dest_V_0_state)))) begin
            input_dest_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_dest_V_0_vld_in) & (2'd2 == input_dest_V_0_state)) | ((1'b1 == input_dest_V_0_ack_out) & (2'd1 == input_dest_V_0_state)) | ((2'd3 == input_dest_V_0_state) & ~((1'b1 == input_dest_V_0_vld_in) & (1'b0 == input_dest_V_0_ack_out)) & ~((1'b0 == input_dest_V_0_vld_in) & (1'b1 == input_dest_V_0_ack_out))))) begin
            input_dest_V_0_state <= 2'd3;
        end else begin
            input_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_data_V_0_load_A)) begin
        input_data_V_0_payload_A <= input_AX_ALG_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_data_V_0_load_B)) begin
        input_data_V_0_payload_B <= input_AX_ALG_TDATA;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_idle_pp0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_enable_reg_pp0_iter0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_idle_pp0_0to0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        buf_0_V_blk_n = buf_0_V_full_n;
    end else begin
        buf_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        buf_0_V_write = 1'b1;
    end else begin
        buf_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        input_AX_ALG_TDATA_blk_n = input_data_V_0_state[1'd0];
    end else begin
        input_AX_ALG_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        input_data_V_0_ack_out = 1'b1;
    end else begin
        input_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == input_data_V_0_sel)) begin
        input_data_V_0_data_out = input_data_V_0_payload_B;
    end else begin
        input_data_V_0_data_out = input_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        input_dest_V_0_ack_out = 1'b1;
    end else begin
        input_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == real_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == start_full_n)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((ap_done_reg == 1'b1) | ((1'b1 == real_start) & ((1'b0 == real_start) | (ap_done_reg == 1'b1))) | (((1'b0 == input_data_V_0_vld_out) | (1'b0 == buf_0_V_full_n)) & (1'b1 == ap_enable_reg_pp0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((ap_done_reg == 1'b1) | ((1'b1 == real_start) & ((1'b0 == real_start) | (ap_done_reg == 1'b1))) | (((1'b0 == input_data_V_0_vld_out) | (1'b0 == buf_0_V_full_n)) & (1'b1 == ap_enable_reg_pp0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((ap_done_reg == 1'b1) | ((1'b1 == real_start) & ((1'b0 == real_start) | (ap_done_reg == 1'b1))) | (((1'b0 == input_data_V_0_vld_out) | (1'b0 == buf_0_V_full_n)) & (1'b1 == ap_enable_reg_pp0_iter1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((1'b0 == input_data_V_0_vld_out) | (1'b0 == buf_0_V_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

assign ap_ready = internal_ap_ready;

assign buf_0_V_din = input_data_V_0_data_out;

assign input_AX_ALG_TREADY = input_dest_V_0_state[1'd1];

assign input_data_V_0_ack_in = input_data_V_0_state[1'd1];

assign input_data_V_0_load_A = (input_data_V_0_state_cmp_full & ~input_data_V_0_sel_wr);

assign input_data_V_0_load_B = (input_data_V_0_sel_wr & input_data_V_0_state_cmp_full);

assign input_data_V_0_sel = input_data_V_0_sel_rd;

assign input_data_V_0_state_cmp_full = ((input_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_data_V_0_vld_in = input_AX_ALG_TVALID;

assign input_data_V_0_vld_out = input_data_V_0_state[1'd0];

assign input_dest_V_0_vld_in = input_AX_ALG_TVALID;

assign start_out = real_start;

endmodule //read_data
