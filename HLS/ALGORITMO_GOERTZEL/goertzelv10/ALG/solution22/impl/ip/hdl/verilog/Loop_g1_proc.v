// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_g1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        aux_array_V_dout,
        aux_array_V_empty_n,
        aux_array_V_read,
        y_V_din,
        y_V_full_n,
        y_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [31:0] aux_array_V_dout;
input   aux_array_V_empty_n;
output   aux_array_V_read;
output  [31:0] y_V_din;
input   y_V_full_n;
output   y_V_write;

reg ap_done;
reg ap_idle;
reg aux_array_V_read;
reg[31:0] y_V_din;
reg y_V_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    y_V_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [3:0] j_1_fu_97_p2;
reg   [3:0] j_1_reg_115;
wire    ap_CS_fsm_state2;
reg   [31:0] vectorAuxiliar_1_V_reg_120;
wire    grp_goertzelInterno_simp_fu_79_ap_done;
wire    grp_goertzelInterno_simp_fu_79_ap_start;
wire    grp_goertzelInterno_simp_fu_79_ap_idle;
wire    grp_goertzelInterno_simp_fu_79_ap_ready;
wire    grp_goertzelInterno_simp_fu_79_aux_array_V_read;
wire   [31:0] grp_goertzelInterno_simp_fu_79_ap_return_0;
wire   [31:0] grp_goertzelInterno_simp_fu_79_ap_return_1;
reg   [3:0] j_reg_67;
reg    ap_block_state1;
reg    ap_reg_grp_goertzelInterno_simp_fu_79_ap_start;
wire   [0:0] exitcond1_fu_91_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_reg_grp_goertzelInterno_simp_fu_79_ap_start = 1'b0;
end

goertzelInterno_simp grp_goertzelInterno_simp_fu_79(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_goertzelInterno_simp_fu_79_ap_start),
    .ap_done(grp_goertzelInterno_simp_fu_79_ap_done),
    .ap_idle(grp_goertzelInterno_simp_fu_79_ap_idle),
    .ap_ready(grp_goertzelInterno_simp_fu_79_ap_ready),
    .indiceK(j_reg_67),
    .aux_array_V_dout(aux_array_V_dout),
    .aux_array_V_empty_n(aux_array_V_empty_n),
    .aux_array_V_read(grp_goertzelInterno_simp_fu_79_aux_array_V_read),
    .ap_return_0(grp_goertzelInterno_simp_fu_79_ap_return_0),
    .ap_return_1(grp_goertzelInterno_simp_fu_79_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_91_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_goertzelInterno_simp_fu_79_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_91_p2 == 1'd0))) begin
            ap_reg_grp_goertzelInterno_simp_fu_79_ap_start <= 1'b1;
        end else if ((1'b1 == grp_goertzelInterno_simp_fu_79_ap_ready)) begin
            ap_reg_grp_goertzelInterno_simp_fu_79_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (y_V_full_n == 1'b1))) begin
        j_reg_67 <= j_1_reg_115;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        j_reg_67 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_1_reg_115 <= j_1_fu_97_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == y_V_full_n) | (1'b0 == grp_goertzelInterno_simp_fu_79_ap_done)))) begin
        vectorAuxiliar_1_V_reg_120 <= grp_goertzelInterno_simp_fu_79_ap_return_1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_91_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        aux_array_V_read = grp_goertzelInterno_simp_fu_79_aux_array_V_read;
    end else begin
        aux_array_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_91_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        y_V_blk_n = y_V_full_n;
    end else begin
        y_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (y_V_full_n == 1'b1))) begin
        y_V_din = vectorAuxiliar_1_V_reg_120;
    end else if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == y_V_full_n) | (1'b0 == grp_goertzelInterno_simp_fu_79_ap_done)))) begin
        y_V_din = grp_goertzelInterno_simp_fu_79_ap_return_0;
    end else begin
        y_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == y_V_full_n) | (1'b0 == grp_goertzelInterno_simp_fu_79_ap_done))) | ((1'b1 == ap_CS_fsm_state4) & (y_V_full_n == 1'b1)))) begin
        y_V_write = 1'b1;
    end else begin
        y_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_91_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == y_V_full_n) | (1'b0 == grp_goertzelInterno_simp_fu_79_ap_done)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (y_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign exitcond1_fu_91_p2 = ((j_reg_67 == 4'd8) ? 1'b1 : 1'b0);

assign grp_goertzelInterno_simp_fu_79_ap_start = ap_reg_grp_goertzelInterno_simp_fu_79_ap_start;

assign j_1_fu_97_p2 = (j_reg_67 + 4'd1);

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

endmodule //Loop_g1_proc
