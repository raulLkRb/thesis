-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_g1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    aux_array_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    aux_array_V_empty_n : IN STD_LOGIC;
    aux_array_V_read : OUT STD_LOGIC;
    y_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_V_full_n : IN STD_LOGIC;
    y_V_write : OUT STD_LOGIC );
end;


architecture behav of Loop_g1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal real_start_status_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal start_once_reg : STD_LOGIC := '0';
    signal start_control_reg : STD_LOGIC := '0';
    signal y_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_1_fu_97_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_115 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal vectorAuxiliar_1_V_reg_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_goertzelInterno_simp_fu_79_ap_done : STD_LOGIC;
    signal grp_goertzelInterno_simp_fu_79_ap_start : STD_LOGIC;
    signal grp_goertzelInterno_simp_fu_79_ap_idle : STD_LOGIC;
    signal grp_goertzelInterno_simp_fu_79_ap_ready : STD_LOGIC;
    signal grp_goertzelInterno_simp_fu_79_aux_array_V_read : STD_LOGIC;
    signal grp_goertzelInterno_simp_fu_79_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_goertzelInterno_simp_fu_79_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_67 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_reg_grp_goertzelInterno_simp_fu_79_ap_start : STD_LOGIC := '0';
    signal exitcond1_fu_91_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component goertzelInterno_simp IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        indiceK : IN STD_LOGIC_VECTOR (3 downto 0);
        aux_array_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        aux_array_V_empty_n : IN STD_LOGIC;
        aux_array_V_read : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_goertzelInterno_simp_fu_79 : component goertzelInterno_simp
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_goertzelInterno_simp_fu_79_ap_start,
        ap_done => grp_goertzelInterno_simp_fu_79_ap_done,
        ap_idle => grp_goertzelInterno_simp_fu_79_ap_idle,
        ap_ready => grp_goertzelInterno_simp_fu_79_ap_ready,
        indiceK => j_reg_67,
        aux_array_V_dout => aux_array_V_dout,
        aux_array_V_empty_n => aux_array_V_empty_n,
        aux_array_V_read => grp_goertzelInterno_simp_fu_79_aux_array_V_read,
        ap_return_0 => grp_goertzelInterno_simp_fu_79_ap_return_0,
        ap_return_1 => grp_goertzelInterno_simp_fu_79_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_91_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_goertzelInterno_simp_fu_79_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_goertzelInterno_simp_fu_79_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_91_p2 = ap_const_lv1_0))) then 
                    ap_reg_grp_goertzelInterno_simp_fu_79_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_goertzelInterno_simp_fu_79_ap_ready)) then 
                    ap_reg_grp_goertzelInterno_simp_fu_79_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    real_start_status_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                real_start_status_reg <= ap_const_logic_0;
            else
                if ((start_full_n = ap_const_logic_1)) then 
                    real_start_status_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_0 = start_full_n) and (ap_const_logic_1 = internal_ap_ready))) then 
                    real_start_status_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_control_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_control_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = real_start) and ((ap_const_logic_1 = internal_ap_ready) or (ap_const_logic_0 = start_once_reg)))) then 
                    start_control_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = start_control_reg)) then 
                    start_control_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = real_start)) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_0 = ap_start)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_reg_67_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (y_V_full_n = ap_const_logic_1))) then 
                j_reg_67 <= j_1_reg_115;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
                j_reg_67 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_1_reg_115 <= j_1_fu_97_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and not(((ap_const_logic_0 = y_V_full_n) or (ap_const_logic_0 = grp_goertzelInterno_simp_fu_79_ap_done))))) then
                vectorAuxiliar_1_V_reg_120 <= grp_goertzelInterno_simp_fu_79_ap_return_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, y_V_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, grp_goertzelInterno_simp_fu_79_ap_done, exitcond1_fu_91_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_91_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and not(((ap_const_logic_0 = y_V_full_n) or (ap_const_logic_0 = grp_goertzelInterno_simp_fu_79_ap_done))))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (y_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond1_fu_91_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_91_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = real_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    aux_array_V_read_assign_proc : process(ap_CS_fsm_state3, grp_goertzelInterno_simp_fu_79_aux_array_V_read)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            aux_array_V_read <= grp_goertzelInterno_simp_fu_79_aux_array_V_read;
        else 
            aux_array_V_read <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_91_p2 <= "1" when (j_reg_67 = ap_const_lv4_8) else "0";
    grp_goertzelInterno_simp_fu_79_ap_start <= ap_reg_grp_goertzelInterno_simp_fu_79_ap_start;

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_91_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_91_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_97_p2 <= std_logic_vector(unsigned(j_reg_67) + unsigned(ap_const_lv4_1));

    real_start_assign_proc : process(ap_start, real_start_status_reg)
    begin
        if ((ap_const_logic_1 = real_start_status_reg)) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;
    start_write <= (ap_start and start_control_reg);

    y_V_blk_n_assign_proc : process(y_V_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            y_V_blk_n <= y_V_full_n;
        else 
            y_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    y_V_din_assign_proc : process(y_V_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, vectorAuxiliar_1_V_reg_120, grp_goertzelInterno_simp_fu_79_ap_done, grp_goertzelInterno_simp_fu_79_ap_return_0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (y_V_full_n = ap_const_logic_1))) then 
            y_V_din <= vectorAuxiliar_1_V_reg_120;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and not(((ap_const_logic_0 = y_V_full_n) or (ap_const_logic_0 = grp_goertzelInterno_simp_fu_79_ap_done))))) then 
            y_V_din <= grp_goertzelInterno_simp_fu_79_ap_return_0;
        else 
            y_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_V_write_assign_proc : process(y_V_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, grp_goertzelInterno_simp_fu_79_ap_done)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and not(((ap_const_logic_0 = y_V_full_n) or (ap_const_logic_0 = grp_goertzelInterno_simp_fu_79_ap_done)))) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (y_V_full_n = ap_const_logic_1)))) then 
            y_V_write <= ap_const_logic_1;
        else 
            y_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
