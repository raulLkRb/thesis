-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity goertzel_algorithm_simpler is
port (
    input_AX_ALG_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_AX_ALG_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALG_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALG_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALG_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_AX_ALG_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    input_AX_ALG_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    output_AX_ALG_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_AX_ALG_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALG_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALG_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALG_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_AX_ALG_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_AX_ALG_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_AX_ALG_TVALID : IN STD_LOGIC;
    input_AX_ALG_TREADY : OUT STD_LOGIC;
    output_AX_ALG_TVALID : OUT STD_LOGIC;
    output_AX_ALG_TREADY : IN STD_LOGIC );
end;


architecture behav of goertzel_algorithm_simpler is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "goertzel_algorithm_simpler,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.623500,HLS_SYN_LAT=114745,HLS_SYN_TPT=114746,HLS_SYN_MEM=4,HLS_SYN_DSP=16,HLS_SYN_FF=1405,HLS_SYN_LUT=1771}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal read_data_U0_ap_start : STD_LOGIC;
    signal read_data_U0_start_full_n : STD_LOGIC;
    signal read_data_U0_ap_done : STD_LOGIC;
    signal read_data_U0_ap_continue : STD_LOGIC;
    signal read_data_U0_ap_idle : STD_LOGIC;
    signal read_data_U0_ap_ready : STD_LOGIC;
    signal read_data_U0_buf_0_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal read_data_U0_buf_0_V_write : STD_LOGIC;
    signal read_data_U0_start_out : STD_LOGIC;
    signal read_data_U0_start_write : STD_LOGIC;
    signal read_data_U0_input_AX_ALG_TREADY : STD_LOGIC;
    signal devuelveAuxArray_U0_ap_start : STD_LOGIC;
    signal devuelveAuxArray_U0_start_full_n : STD_LOGIC;
    signal devuelveAuxArray_U0_ap_ready : STD_LOGIC;
    signal devuelveAuxArray_U0_ap_done : STD_LOGIC;
    signal devuelveAuxArray_U0_ap_continue : STD_LOGIC;
    signal devuelveAuxArray_U0_ap_idle : STD_LOGIC;
    signal devuelveAuxArray_U0_start_out : STD_LOGIC;
    signal devuelveAuxArray_U0_start_write : STD_LOGIC;
    signal devuelveAuxArray_U0_aux_array_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal devuelveAuxArray_U0_aux_array_V_write : STD_LOGIC;
    signal devuelveAuxArray_U0_bufIn_0_V_read : STD_LOGIC;
    signal Loop_g1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_g1_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_g1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_g1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_g1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_g1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_g1_proc_U0_start_out : STD_LOGIC;
    signal Loop_g1_proc_U0_start_write : STD_LOGIC;
    signal Loop_g1_proc_U0_aux_array_V_read : STD_LOGIC;
    signal Loop_g1_proc_U0_y_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_g1_proc_U0_y_V_write : STD_LOGIC;
    signal Loop_2_proc_U0_ap_start : STD_LOGIC;
    signal Loop_2_proc_U0_ap_done : STD_LOGIC;
    signal Loop_2_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_2_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_2_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_2_proc_U0_y_V_read : STD_LOGIC;
    signal Loop_2_proc_U0_output_AX_ALG_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_output_AX_ALG_TVALID : STD_LOGIC;
    signal Loop_2_proc_U0_output_AX_ALG_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_2_proc_U0_output_AX_ALG_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_2_proc_U0_output_AX_ALG_TUSER : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_2_proc_U0_output_AX_ALG_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_2_proc_U0_output_AX_ALG_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal Loop_2_proc_U0_output_AX_ALG_TDEST : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal bufIn_0_V_full_n : STD_LOGIC;
    signal bufIn_0_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal bufIn_0_V_empty_n : STD_LOGIC;
    signal aux_array_V_full_n : STD_LOGIC;
    signal aux_array_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal aux_array_V_empty_n : STD_LOGIC;
    signal y_V_full_n : STD_LOGIC;
    signal y_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal y_V_empty_n : STD_LOGIC;
    signal start_for_devuelveAuxArray_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_devuelveAuxArray_U0_full_n : STD_LOGIC;
    signal start_for_devuelveAuxArray_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_devuelveAuxArray_U0_empty_n : STD_LOGIC;
    signal start_for_Loop_g1_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_g1_proc_U0_full_n : STD_LOGIC;
    signal start_for_Loop_g1_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_g1_proc_U0_empty_n : STD_LOGIC;
    signal start_for_Loop_2_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_2_proc_U0_full_n : STD_LOGIC;
    signal start_for_Loop_2_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_2_proc_U0_empty_n : STD_LOGIC;
    signal Loop_2_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_2_proc_U0_start_write : STD_LOGIC;

    component read_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        buf_0_V_full_n : IN STD_LOGIC;
        buf_0_V_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        input_AX_ALG_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        input_AX_ALG_TVALID : IN STD_LOGIC;
        input_AX_ALG_TREADY : OUT STD_LOGIC;
        input_AX_ALG_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        input_AX_ALG_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        input_AX_ALG_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
        input_AX_ALG_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        input_AX_ALG_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        input_AX_ALG_TDEST : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component devuelveAuxArray IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        aux_array_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aux_array_V_full_n : IN STD_LOGIC;
        aux_array_V_write : OUT STD_LOGIC;
        bufIn_0_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        bufIn_0_V_empty_n : IN STD_LOGIC;
        bufIn_0_V_read : OUT STD_LOGIC );
    end component;


    component Loop_g1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        aux_array_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        aux_array_V_empty_n : IN STD_LOGIC;
        aux_array_V_read : OUT STD_LOGIC;
        y_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_V_full_n : IN STD_LOGIC;
        y_V_write : OUT STD_LOGIC );
    end component;


    component Loop_2_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        y_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_V_empty_n : IN STD_LOGIC;
        y_V_read : OUT STD_LOGIC;
        output_AX_ALG_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_AX_ALG_TVALID : OUT STD_LOGIC;
        output_AX_ALG_TREADY : IN STD_LOGIC;
        output_AX_ALG_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALG_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALG_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALG_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_AX_ALG_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_AX_ALG_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_devuelvfYi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Loop_g1g8j IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Loop_2_hbi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    read_data_U0 : component read_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => read_data_U0_ap_start,
        start_full_n => read_data_U0_start_full_n,
        ap_done => read_data_U0_ap_done,
        ap_continue => read_data_U0_ap_continue,
        ap_idle => read_data_U0_ap_idle,
        ap_ready => read_data_U0_ap_ready,
        buf_0_V_din => read_data_U0_buf_0_V_din,
        buf_0_V_full_n => bufIn_0_V_full_n,
        buf_0_V_write => read_data_U0_buf_0_V_write,
        start_out => read_data_U0_start_out,
        start_write => read_data_U0_start_write,
        input_AX_ALG_TDATA => input_AX_ALG_TDATA,
        input_AX_ALG_TVALID => input_AX_ALG_TVALID,
        input_AX_ALG_TREADY => read_data_U0_input_AX_ALG_TREADY,
        input_AX_ALG_TKEEP => input_AX_ALG_TKEEP,
        input_AX_ALG_TSTRB => input_AX_ALG_TSTRB,
        input_AX_ALG_TUSER => input_AX_ALG_TUSER,
        input_AX_ALG_TLAST => input_AX_ALG_TLAST,
        input_AX_ALG_TID => input_AX_ALG_TID,
        input_AX_ALG_TDEST => input_AX_ALG_TDEST);

    devuelveAuxArray_U0 : component devuelveAuxArray
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => devuelveAuxArray_U0_ap_start,
        start_full_n => devuelveAuxArray_U0_start_full_n,
        ap_ready => devuelveAuxArray_U0_ap_ready,
        ap_done => devuelveAuxArray_U0_ap_done,
        ap_continue => devuelveAuxArray_U0_ap_continue,
        ap_idle => devuelveAuxArray_U0_ap_idle,
        start_out => devuelveAuxArray_U0_start_out,
        start_write => devuelveAuxArray_U0_start_write,
        aux_array_V_din => devuelveAuxArray_U0_aux_array_V_din,
        aux_array_V_full_n => aux_array_V_full_n,
        aux_array_V_write => devuelveAuxArray_U0_aux_array_V_write,
        bufIn_0_V_dout => bufIn_0_V_dout,
        bufIn_0_V_empty_n => bufIn_0_V_empty_n,
        bufIn_0_V_read => devuelveAuxArray_U0_bufIn_0_V_read);

    Loop_g1_proc_U0 : component Loop_g1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_g1_proc_U0_ap_start,
        start_full_n => Loop_g1_proc_U0_start_full_n,
        ap_ready => Loop_g1_proc_U0_ap_ready,
        ap_done => Loop_g1_proc_U0_ap_done,
        ap_continue => Loop_g1_proc_U0_ap_continue,
        ap_idle => Loop_g1_proc_U0_ap_idle,
        start_out => Loop_g1_proc_U0_start_out,
        start_write => Loop_g1_proc_U0_start_write,
        aux_array_V_dout => aux_array_V_dout,
        aux_array_V_empty_n => aux_array_V_empty_n,
        aux_array_V_read => Loop_g1_proc_U0_aux_array_V_read,
        y_V_din => Loop_g1_proc_U0_y_V_din,
        y_V_full_n => y_V_full_n,
        y_V_write => Loop_g1_proc_U0_y_V_write);

    Loop_2_proc_U0 : component Loop_2_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_2_proc_U0_ap_start,
        ap_done => Loop_2_proc_U0_ap_done,
        ap_continue => Loop_2_proc_U0_ap_continue,
        ap_idle => Loop_2_proc_U0_ap_idle,
        ap_ready => Loop_2_proc_U0_ap_ready,
        y_V_dout => y_V_dout,
        y_V_empty_n => y_V_empty_n,
        y_V_read => Loop_2_proc_U0_y_V_read,
        output_AX_ALG_TDATA => Loop_2_proc_U0_output_AX_ALG_TDATA,
        output_AX_ALG_TVALID => Loop_2_proc_U0_output_AX_ALG_TVALID,
        output_AX_ALG_TREADY => output_AX_ALG_TREADY,
        output_AX_ALG_TKEEP => Loop_2_proc_U0_output_AX_ALG_TKEEP,
        output_AX_ALG_TSTRB => Loop_2_proc_U0_output_AX_ALG_TSTRB,
        output_AX_ALG_TUSER => Loop_2_proc_U0_output_AX_ALG_TUSER,
        output_AX_ALG_TLAST => Loop_2_proc_U0_output_AX_ALG_TLAST,
        output_AX_ALG_TID => Loop_2_proc_U0_output_AX_ALG_TID,
        output_AX_ALG_TDEST => Loop_2_proc_U0_output_AX_ALG_TDEST);

    bufIn_0_V_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_data_U0_buf_0_V_din,
        if_full_n => bufIn_0_V_full_n,
        if_write => read_data_U0_buf_0_V_write,
        if_dout => bufIn_0_V_dout,
        if_empty_n => bufIn_0_V_empty_n,
        if_read => devuelveAuxArray_U0_bufIn_0_V_read);

    aux_array_V_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => devuelveAuxArray_U0_aux_array_V_din,
        if_full_n => aux_array_V_full_n,
        if_write => devuelveAuxArray_U0_aux_array_V_write,
        if_dout => aux_array_V_dout,
        if_empty_n => aux_array_V_empty_n,
        if_read => Loop_g1_proc_U0_aux_array_V_read);

    y_V_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_g1_proc_U0_y_V_din,
        if_full_n => y_V_full_n,
        if_write => Loop_g1_proc_U0_y_V_write,
        if_dout => y_V_dout,
        if_empty_n => y_V_empty_n,
        if_read => Loop_2_proc_U0_y_V_read);

    start_for_devuelvfYi_U : component start_for_devuelvfYi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_devuelveAuxArray_U0_din,
        if_full_n => start_for_devuelveAuxArray_U0_full_n,
        if_write => read_data_U0_start_write,
        if_dout => start_for_devuelveAuxArray_U0_dout,
        if_empty_n => start_for_devuelveAuxArray_U0_empty_n,
        if_read => devuelveAuxArray_U0_ap_ready);

    start_for_Loop_g1g8j_U : component start_for_Loop_g1g8j
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_g1_proc_U0_din,
        if_full_n => start_for_Loop_g1_proc_U0_full_n,
        if_write => devuelveAuxArray_U0_start_write,
        if_dout => start_for_Loop_g1_proc_U0_dout,
        if_empty_n => start_for_Loop_g1_proc_U0_empty_n,
        if_read => Loop_g1_proc_U0_ap_ready);

    start_for_Loop_2_hbi_U : component start_for_Loop_2_hbi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_2_proc_U0_din,
        if_full_n => start_for_Loop_2_proc_U0_full_n,
        if_write => Loop_g1_proc_U0_start_write,
        if_dout => start_for_Loop_2_proc_U0_dout,
        if_empty_n => start_for_Loop_2_proc_U0_empty_n,
        if_read => Loop_2_proc_U0_ap_ready);




    Loop_2_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_2_proc_U0_ap_start <= start_for_Loop_2_proc_U0_empty_n;
    Loop_2_proc_U0_start_full_n <= ap_const_logic_0;
    Loop_2_proc_U0_start_write <= ap_const_logic_0;
    Loop_g1_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_g1_proc_U0_ap_start <= start_for_Loop_g1_proc_U0_empty_n;
    Loop_g1_proc_U0_start_full_n <= (ap_const_logic_0 or start_for_Loop_2_proc_U0_full_n);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    devuelveAuxArray_U0_ap_continue <= ap_const_logic_1;
    devuelveAuxArray_U0_ap_start <= start_for_devuelveAuxArray_U0_empty_n;
    devuelveAuxArray_U0_start_full_n <= (ap_const_logic_0 or start_for_Loop_g1_proc_U0_full_n);
    input_AX_ALG_TREADY <= read_data_U0_input_AX_ALG_TREADY;
    output_AX_ALG_TDATA <= Loop_2_proc_U0_output_AX_ALG_TDATA;
    output_AX_ALG_TDEST <= Loop_2_proc_U0_output_AX_ALG_TDEST;
    output_AX_ALG_TID <= Loop_2_proc_U0_output_AX_ALG_TID;
    output_AX_ALG_TKEEP <= Loop_2_proc_U0_output_AX_ALG_TKEEP;
    output_AX_ALG_TLAST <= Loop_2_proc_U0_output_AX_ALG_TLAST;
    output_AX_ALG_TSTRB <= Loop_2_proc_U0_output_AX_ALG_TSTRB;
    output_AX_ALG_TUSER <= Loop_2_proc_U0_output_AX_ALG_TUSER;
    output_AX_ALG_TVALID <= Loop_2_proc_U0_output_AX_ALG_TVALID;
    read_data_U0_ap_continue <= ap_const_logic_1;
    read_data_U0_ap_start <= ap_const_logic_1;
    read_data_U0_start_full_n <= (start_for_devuelveAuxArray_U0_full_n or ap_const_logic_0);
    start_for_Loop_2_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Loop_g1_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_devuelveAuxArray_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
