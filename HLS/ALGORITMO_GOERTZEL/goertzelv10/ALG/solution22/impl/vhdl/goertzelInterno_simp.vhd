-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity goertzelInterno_simp is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indiceK : IN STD_LOGIC_VECTOR (3 downto 0);
    aux_array_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    aux_array_V_empty_n : IN STD_LOGIC;
    aux_array_V_read : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of goertzelInterno_simp is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal REAL_PARTE_W_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal REAL_PARTE_W_V_ce0 : STD_LOGIC;
    signal REAL_PARTE_W_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal IMAGINARIO_W_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal IMAGINARIO_W_V_ce0 : STD_LOGIC;
    signal IMAGINARIO_W_V_q0 : STD_LOGIC_VECTOR (27 downto 0);
    signal aux_array_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_192_p2 : STD_LOGIC_VECTOR (96 downto 0);
    signal reg_209 : STD_LOGIC_VECTOR (96 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal indiceK_cast1_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indiceK_cast1_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal OP1_V_1_cast_fu_222_p1 : STD_LOGIC_VECTOR (96 downto 0);
    signal OP1_V_1_cast_reg_798 : STD_LOGIC_VECTOR (96 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_232_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_reg_806 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal OP2_V_1_cast_fu_238_p1 : STD_LOGIC_VECTOR (96 downto 0);
    signal exitcond_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal OP2_V_cast3_fu_243_p1 : STD_LOGIC_VECTOR (96 downto 0);
    signal p_Val2_7_fu_282_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal p_Val2_7_reg_826 : STD_LOGIC_VECTOR (97 downto 0);
    signal p_Val2_18_fu_353_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal IMAGINARIO_W_V_load_reg_840 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal OP2_V_cast_fu_359_p1 : STD_LOGIC_VECTOR (91 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal OP1_V_2_cast_fu_364_p1 : STD_LOGIC_VECTOR (91 downto 0);
    signal tmp_6_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_855 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_Val2_2_fu_437_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_2_reg_860 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_866 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_871 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_28_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_876 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_10_fu_579_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_10_reg_881 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_21_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_887 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_14_fu_658_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_Val2_14_reg_892 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_33_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_898 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_reg_156 : STD_LOGIC_VECTOR (63 downto 0);
    signal d2_V_reg_168 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_181 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_192_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_192_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal REAL_PARTE_W_V_load_s_fu_218_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_2_fu_248_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_8_cast_fu_260_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_2_cast_fu_256_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_12_fu_270_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_5_fu_264_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_12_cast_fu_278_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_50_fu_311_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_304_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_320_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_34_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_329_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_18_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_5_fu_288_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_295_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_376_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_368_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_386_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_396_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal signbit_fu_410_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_418_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_451_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_443_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_461_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_s_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_471_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal signbit_1_fu_485_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_492_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_fu_510_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_526_p1 : STD_LOGIC_VECTOR (91 downto 0);
    signal tmp_43_fu_534_p0 : STD_LOGIC_VECTOR (91 downto 0);
    signal tmp_43_fu_534_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_526_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_544_p1 : STD_LOGIC_VECTOR (91 downto 0);
    signal tmp_26_fu_544_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_24_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_554_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_14_fu_568_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_15_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_fu_593_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_585_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_603_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_16_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_613_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal signbit_3_fu_627_p1 : STD_LOGIC_VECTOR (91 downto 0);
    signal tmp_23_fu_635_p1 : STD_LOGIC_VECTOR (91 downto 0);
    signal tmp_23_fu_635_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal signbit_3_fu_627_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_4_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_fu_645_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_36_cast_fu_654_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_47_fu_672_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_664_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_682_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_29_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_692_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal signbit_2_fu_706_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_3_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_fu_713_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_727_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_744_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal signbit_4_fu_737_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_5_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_15_cast_fu_753_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_cast9_fu_762_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_15_fu_766_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_12_fu_731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_16_cast_fu_772_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component goertzel_algoritheOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (96 downto 0) );
    end component;


    component goertzelInterno_scud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component goertzelInterno_sdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    REAL_PARTE_W_V_U : component goertzelInterno_scud
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => REAL_PARTE_W_V_address0,
        ce0 => REAL_PARTE_W_V_ce0,
        q0 => REAL_PARTE_W_V_q0);

    IMAGINARIO_W_V_U : component goertzelInterno_sdEe
    generic map (
        DataWidth => 28,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => IMAGINARIO_W_V_address0,
        ce0 => IMAGINARIO_W_V_ce0,
        q0 => IMAGINARIO_W_V_q0);

    goertzel_algoritheOg_U11 : component goertzel_algoritheOg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 33,
        dout_WIDTH => 97)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_192_p0,
        din1 => grp_fu_192_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_192_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    d2_V_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                d2_V_reg_168 <= p_Val2_18_fu_353_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                d2_V_reg_168 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_reg_181 <= i_1_reg_806;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_181 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    p_Val2_6_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_Val2_6_reg_156 <= d2_V_reg_168;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_Val2_6_reg_156 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                IMAGINARIO_W_V_load_reg_840 <= IMAGINARIO_W_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    OP1_V_1_cast_reg_798(32 downto 0) <= OP1_V_1_cast_fu_222_p1(32 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_806 <= i_1_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    indiceK_cast1_reg_788(3 downto 0) <= indiceK_cast1_fu_213_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                p_Val2_10_reg_881 <= p_Val2_10_fu_579_p2;
                p_Val2_14_reg_892 <= p_Val2_14_fu_658_p2;
                tmp_21_reg_887 <= tmp_21_fu_621_p2;
                tmp_33_reg_898 <= tmp_33_fu_700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                p_Val2_2_reg_860 <= p_Val2_2_fu_437_p2;
                tmp_10_reg_866 <= tmp_10_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (aux_array_V_empty_n = ap_const_logic_1))) then
                p_Val2_7_reg_826 <= p_Val2_7_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_209 <= grp_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_13_reg_871 <= p_Val2_9_fu_510_p2(31 downto 1);
                tmp_28_reg_876 <= tmp_28_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_6_reg_855 <= tmp_6_fu_404_p2;
            end if;
        end if;
    end process;
    indiceK_cast1_reg_788(31 downto 4) <= "0000000000000000000000000000";
    OP1_V_1_cast_reg_798(96 downto 33) <= "0000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, aux_array_V_empty_n, ap_CS_fsm_state8, ap_CS_fsm_state3, exitcond_fu_226_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_226_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (aux_array_V_empty_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    IMAGINARIO_W_V_address0 <= indiceK_cast1_reg_788(3 - 1 downto 0);

    IMAGINARIO_W_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            IMAGINARIO_W_V_ce0 <= ap_const_logic_1;
        else 
            IMAGINARIO_W_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    OP1_V_1_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(REAL_PARTE_W_V_load_s_fu_218_p1),97));
    OP1_V_2_cast_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IMAGINARIO_W_V_load_reg_840),92));
        OP2_V_1_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d2_V_reg_168),97));

        OP2_V_cast3_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d2_V_reg_168),97));

        OP2_V_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d2_V_reg_168),92));

    REAL_PARTE_W_V_address0 <= indiceK_cast1_fu_213_p1(3 - 1 downto 0);

    REAL_PARTE_W_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            REAL_PARTE_W_V_ce0 <= ap_const_logic_1;
        else 
            REAL_PARTE_W_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        REAL_PARTE_W_V_load_s_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(REAL_PARTE_W_V_q0),33));

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= p_Val2_12_fu_731_p2;
    ap_return_1 <= p_Val2_16_cast_fu_772_p1;

    aux_array_V_blk_n_assign_proc : process(aux_array_V_empty_n, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            aux_array_V_blk_n <= aux_array_V_empty_n;
        else 
            aux_array_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    aux_array_V_read_assign_proc : process(aux_array_V_empty_n, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (aux_array_V_empty_n = ap_const_logic_1))) then 
            aux_array_V_read <= ap_const_logic_1;
        else 
            aux_array_V_read <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_226_p2 <= "1" when (i_reg_181 = ap_const_lv11_7FF) else "0";

    grp_fu_192_p0_assign_proc : process(ap_CS_fsm_state3, OP2_V_1_cast_fu_238_p1, exitcond_fu_226_p2, OP2_V_cast3_fu_243_p1, OP2_V_cast_fu_359_p1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_192_p0 <= OP2_V_cast_fu_359_p1(64 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_226_p2 = ap_const_lv1_1))) then 
            grp_fu_192_p0 <= OP2_V_cast3_fu_243_p1(64 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_226_p2 = ap_const_lv1_0))) then 
            grp_fu_192_p0 <= OP2_V_1_cast_fu_238_p1(64 - 1 downto 0);
        else 
            grp_fu_192_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_192_p1_assign_proc : process(OP1_V_1_cast_reg_798, ap_CS_fsm_state3, exitcond_fu_226_p2, ap_CS_fsm_state11, OP1_V_2_cast_fu_364_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_192_p1 <= OP1_V_2_cast_fu_364_p1(33 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_226_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_226_p2 = ap_const_lv1_1)))) then 
            grp_fu_192_p1 <= OP1_V_1_cast_reg_798(33 - 1 downto 0);
        else 
            grp_fu_192_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_232_p2 <= std_logic_vector(unsigned(i_reg_181) + unsigned(ap_const_lv11_1));
    indiceK_cast1_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indiceK),32));
    p_Val2_10_fu_579_p2 <= std_logic_vector(signed(tmp_15_fu_575_p1) - signed(p_Val2_6_reg_156));
    p_Val2_11_fu_713_p4 <= p_Val2_10_reg_881(63 downto 32);
    p_Val2_12_fu_731_p2 <= std_logic_vector(unsigned(p_Val2_11_fu_713_p4) + unsigned(tmp_22_fu_727_p1));
    p_Val2_14_fu_658_p2 <= std_logic_vector(signed(p_cast_fu_645_p1) + signed(tmp_36_cast_fu_654_p1));
        p_Val2_15_cast_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_45_fu_744_p4),30));

    p_Val2_15_fu_766_p2 <= std_logic_vector(signed(p_Val2_15_cast_fu_753_p1) + signed(tmp_36_cast9_fu_762_p1));
        p_Val2_16_cast_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_15_fu_766_p2),32));

    p_Val2_18_fu_353_p2 <= std_logic_vector(unsigned(p_Val2_8_fu_295_p4) + unsigned(tmp_19_fu_349_p1));
    p_Val2_1_fu_418_p4 <= reg_209(95 downto 32);
    p_Val2_2_fu_437_p2 <= std_logic_vector(unsigned(p_Val2_1_fu_418_p4) + unsigned(tmp_7_fu_433_p1));
    p_Val2_3_fu_492_p4 <= p_Val2_2_reg_860(63 downto 32);
    p_Val2_5_fu_264_p2 <= std_logic_vector(signed(tmp_8_cast_fu_260_p1) + signed(tmp_2_cast_fu_256_p1));
    p_Val2_7_fu_282_p2 <= std_logic_vector(unsigned(p_Val2_5_fu_264_p2) - unsigned(tmp_12_cast_fu_278_p1));
    p_Val2_8_fu_295_p4 <= p_Val2_7_reg_826(95 downto 32);
    p_Val2_9_fu_510_p2 <= std_logic_vector(unsigned(p_Val2_3_fu_492_p4) + unsigned(tmp_11_fu_506_p1));
        p_cast_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_fu_635_p4),61));

    qb_assign_1_fu_343_p2 <= (tmp_18_fu_337_p2 and signbit_5_fu_288_p3);
    qb_assign_2_fu_501_p2 <= (tmp_10_reg_866 and signbit_1_fu_485_p3);
    qb_assign_3_fu_722_p2 <= (tmp_21_reg_887 and signbit_2_fu_706_p3);
    qb_assign_4_fu_649_p2 <= (tmp_28_reg_876 and signbit_3_fu_627_p3);
    qb_assign_5_fu_757_p2 <= (tmp_33_reg_898 and signbit_4_fu_737_p3);
    qb_assign_fu_428_p2 <= (tmp_6_reg_855 and signbit_fu_410_p3);
    signbit_1_fu_485_p3 <= p_Val2_2_reg_860(63 downto 63);
    signbit_2_fu_706_p3 <= p_Val2_10_reg_881(63 downto 63);
    signbit_3_fu_627_p1 <= reg_209(92 - 1 downto 0);
    signbit_3_fu_627_p3 <= signbit_3_fu_627_p1(91 downto 91);
    signbit_4_fu_737_p3 <= p_Val2_14_reg_892(60 downto 60);
    signbit_5_fu_288_p3 <= p_Val2_7_reg_826(97 downto 97);
    signbit_fu_410_p3 <= reg_209(96 downto 96);
    tmp_10_fu_479_p2 <= "0" when (tmp_9_fu_471_p3 = ap_const_lv31_0) else "1";
    tmp_11_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_2_fu_501_p2),32));
        tmp_12_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_270_p3),98));

    tmp_12_fu_270_p3 <= (p_Val2_6_reg_156 & ap_const_lv32_0);
    tmp_14_fu_568_p3 <= (tmp_13_reg_871 & ap_const_lv32_0);
        tmp_15_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_568_p3),64));

    tmp_16_fu_597_p2 <= (tmp_37_fu_593_p1 or tmp_36_fu_585_p3);
    tmp_17_fu_603_p4 <= p_Val2_10_fu_579_p2(30 downto 1);
    tmp_18_fu_337_p2 <= "0" when (tmp_38_fu_329_p3 = ap_const_lv31_0) else "1";
    tmp_19_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_fu_343_p2),64));
    tmp_1_fu_461_p4 <= p_Val2_2_fu_437_p2(30 downto 1);
    tmp_20_fu_613_p3 <= (tmp_17_fu_603_p4 & tmp_16_fu_597_p2);
    tmp_21_fu_621_p2 <= "0" when (tmp_20_fu_613_p3 = ap_const_lv31_0) else "1";
    tmp_22_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_3_fu_722_p2),32));
    tmp_23_fu_635_p1 <= reg_209(92 - 1 downto 0);
    tmp_23_fu_635_p4 <= tmp_23_fu_635_p1(91 downto 32);
    tmp_24_fu_538_p2 <= (tmp_43_fu_534_p1 or tmp_42_fu_526_p3);
    tmp_25_fu_443_p3 <= p_Val2_2_fu_437_p2(31 downto 31);
    tmp_26_fu_544_p1 <= reg_209(92 - 1 downto 0);
    tmp_26_fu_544_p4 <= tmp_26_fu_544_p1(30 downto 1);
    tmp_27_fu_554_p3 <= (tmp_26_fu_544_p4 & tmp_24_fu_538_p2);
    tmp_28_fu_562_p2 <= "0" when (tmp_27_fu_554_p3 = ap_const_lv31_0) else "1";
    tmp_29_fu_676_p2 <= (tmp_47_fu_672_p1 or tmp_46_fu_664_p3);
        tmp_2_cast_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_248_p3),98));

    tmp_2_fu_248_p3 <= (aux_array_V_dout & ap_const_lv64_0);
    tmp_30_fu_451_p1 <= p_Val2_2_fu_437_p2(1 - 1 downto 0);
    tmp_31_fu_682_p4 <= p_Val2_14_fu_658_p2(30 downto 1);
    tmp_32_fu_692_p3 <= (tmp_31_fu_682_p4 & tmp_29_fu_676_p2);
    tmp_33_fu_700_p2 <= "0" when (tmp_32_fu_692_p3 = ap_const_lv31_0) else "1";
    tmp_34_fu_314_p2 <= (tmp_50_fu_311_p1 or tmp_49_fu_304_p3);
    tmp_35_fu_320_p4 <= p_Val2_7_reg_826(30 downto 1);
    tmp_36_cast9_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_5_fu_757_p2),30));
    tmp_36_cast_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_4_fu_649_p2),61));
    tmp_36_fu_585_p3 <= p_Val2_10_fu_579_p2(31 downto 31);
    tmp_37_fu_593_p1 <= p_Val2_10_fu_579_p2(1 - 1 downto 0);
    tmp_38_fu_329_p3 <= (tmp_35_fu_320_p4 & tmp_34_fu_314_p2);
    tmp_3_fu_380_p2 <= (tmp_8_fu_376_p1 or tmp_fu_368_p3);
    tmp_42_fu_526_p1 <= reg_209(92 - 1 downto 0);
    tmp_42_fu_526_p3 <= tmp_42_fu_526_p1(31 downto 31);
    tmp_43_fu_534_p0 <= reg_209(92 - 1 downto 0);
    tmp_43_fu_534_p1 <= tmp_43_fu_534_p0(1 - 1 downto 0);
    tmp_45_fu_744_p4 <= p_Val2_14_reg_892(60 downto 32);
    tmp_46_fu_664_p3 <= p_Val2_14_fu_658_p2(31 downto 31);
    tmp_47_fu_672_p1 <= p_Val2_14_fu_658_p2(1 - 1 downto 0);
    tmp_49_fu_304_p3 <= p_Val2_7_reg_826(31 downto 31);
    tmp_4_fu_386_p4 <= reg_209(30 downto 1);
    tmp_50_fu_311_p1 <= p_Val2_7_reg_826(1 - 1 downto 0);
    tmp_5_fu_396_p3 <= (tmp_4_fu_386_p4 & tmp_3_fu_380_p2);
    tmp_6_fu_404_p2 <= "0" when (tmp_5_fu_396_p3 = ap_const_lv31_0) else "1";
    tmp_7_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_fu_428_p2),64));
        tmp_8_cast_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_209),98));

    tmp_8_fu_376_p1 <= reg_209(1 - 1 downto 0);
    tmp_9_fu_471_p3 <= (tmp_1_fu_461_p4 & tmp_s_fu_455_p2);
    tmp_fu_368_p3 <= reg_209(31 downto 31);
    tmp_s_fu_455_p2 <= (tmp_30_fu_451_p1 or tmp_25_fu_443_p3);
end behav;
