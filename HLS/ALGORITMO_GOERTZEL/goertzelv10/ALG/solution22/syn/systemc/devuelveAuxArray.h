// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _devuelveAuxArray_HH_
#define _devuelveAuxArray_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "devuelveAuxArray_bkb.h"

namespace ap_rtl {

struct devuelveAuxArray : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_out< sc_lv<32> > aux_array_V_din;
    sc_in< sc_logic > aux_array_V_full_n;
    sc_out< sc_logic > aux_array_V_write;
    sc_in< sc_lv<32> > bufIn_0_V_dout;
    sc_in< sc_logic > bufIn_0_V_empty_n;
    sc_out< sc_logic > bufIn_0_V_read;


    // Module declarations
    devuelveAuxArray(sc_module_name name);
    SC_HAS_PROCESS(devuelveAuxArray);

    ~devuelveAuxArray();

    sc_trace_file* mVcdFile;

    devuelveAuxArray_bkb* arrayAuxiliar_V_U;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > real_start_status_reg;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > start_control_reg;
    sc_signal< sc_lv<11> > arrayAuxiliar_V_address0;
    sc_signal< sc_logic > arrayAuxiliar_V_ce0;
    sc_signal< sc_logic > arrayAuxiliar_V_we0;
    sc_signal< sc_lv<32> > arrayAuxiliar_V_q0;
    sc_signal< sc_lv<11> > arrayAuxiliar_V_address1;
    sc_signal< sc_logic > arrayAuxiliar_V_ce1;
    sc_signal< sc_logic > arrayAuxiliar_V_we1;
    sc_signal< sc_logic > aux_array_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_lv<1> > exitcond_reg_147;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > bufIn_0_V_blk_n;
    sc_signal< sc_lv<11> > i_reg_113;
    sc_signal< sc_lv<1> > exitcond_fu_125_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<11> > i_2_fu_131_p2;
    sc_signal< sc_lv<11> > i_2_reg_151;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<11> > i_phi_fu_117_p4;
    sc_signal< sc_lv<32> > i_2_cast_fu_137_p1;
    sc_signal< sc_lv<32> > i_cast2_fu_142_p1;
    sc_signal< bool > ap_block_state4;
    sc_signal< bool > ap_block_pp0_stage0_flag00001001;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<11> ap_const_lv11_7FF;
    static const sc_lv<11> ap_const_lv11_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00001001();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_arrayAuxiliar_V_address0();
    void thread_arrayAuxiliar_V_address1();
    void thread_arrayAuxiliar_V_ce0();
    void thread_arrayAuxiliar_V_ce1();
    void thread_arrayAuxiliar_V_we0();
    void thread_arrayAuxiliar_V_we1();
    void thread_aux_array_V_blk_n();
    void thread_aux_array_V_din();
    void thread_aux_array_V_write();
    void thread_bufIn_0_V_blk_n();
    void thread_bufIn_0_V_read();
    void thread_exitcond_fu_125_p2();
    void thread_i_2_cast_fu_137_p1();
    void thread_i_2_fu_131_p2();
    void thread_i_cast2_fu_142_p1();
    void thread_i_phi_fu_117_p4();
    void thread_internal_ap_ready();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
