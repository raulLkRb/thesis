// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "goertzel_algorithm_simpler.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<32> goertzel_algorithm_simpler::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> goertzel_algorithm_simpler::ap_const_lv4_0 = "0000";
const sc_lv<1> goertzel_algorithm_simpler::ap_const_lv1_0 = "0";
const sc_lv<5> goertzel_algorithm_simpler::ap_const_lv5_0 = "00000";
const sc_logic goertzel_algorithm_simpler::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic goertzel_algorithm_simpler::ap_const_logic_0 = sc_dt::Log_0;

goertzel_algorithm_simpler::goertzel_algorithm_simpler(sc_module_name name) : sc_module(name), mVcdFile(0) {
    read_data_U0 = new read_data("read_data_U0");
    read_data_U0->ap_clk(ap_clk);
    read_data_U0->ap_rst(ap_rst_n_inv);
    read_data_U0->ap_start(read_data_U0_ap_start);
    read_data_U0->start_full_n(read_data_U0_start_full_n);
    read_data_U0->ap_done(read_data_U0_ap_done);
    read_data_U0->ap_continue(read_data_U0_ap_continue);
    read_data_U0->ap_idle(read_data_U0_ap_idle);
    read_data_U0->ap_ready(read_data_U0_ap_ready);
    read_data_U0->buf_0_V_din(read_data_U0_buf_0_V_din);
    read_data_U0->buf_0_V_full_n(bufIn_0_V_full_n);
    read_data_U0->buf_0_V_write(read_data_U0_buf_0_V_write);
    read_data_U0->start_out(read_data_U0_start_out);
    read_data_U0->start_write(read_data_U0_start_write);
    read_data_U0->input_AX_ALG_TDATA(input_AX_ALG_TDATA);
    read_data_U0->input_AX_ALG_TVALID(input_AX_ALG_TVALID);
    read_data_U0->input_AX_ALG_TREADY(read_data_U0_input_AX_ALG_TREADY);
    read_data_U0->input_AX_ALG_TKEEP(input_AX_ALG_TKEEP);
    read_data_U0->input_AX_ALG_TSTRB(input_AX_ALG_TSTRB);
    read_data_U0->input_AX_ALG_TUSER(input_AX_ALG_TUSER);
    read_data_U0->input_AX_ALG_TLAST(input_AX_ALG_TLAST);
    read_data_U0->input_AX_ALG_TID(input_AX_ALG_TID);
    read_data_U0->input_AX_ALG_TDEST(input_AX_ALG_TDEST);
    devuelveAuxArray_U0 = new devuelveAuxArray("devuelveAuxArray_U0");
    devuelveAuxArray_U0->ap_clk(ap_clk);
    devuelveAuxArray_U0->ap_rst(ap_rst_n_inv);
    devuelveAuxArray_U0->ap_start(devuelveAuxArray_U0_ap_start);
    devuelveAuxArray_U0->start_full_n(devuelveAuxArray_U0_start_full_n);
    devuelveAuxArray_U0->ap_ready(devuelveAuxArray_U0_ap_ready);
    devuelveAuxArray_U0->ap_done(devuelveAuxArray_U0_ap_done);
    devuelveAuxArray_U0->ap_continue(devuelveAuxArray_U0_ap_continue);
    devuelveAuxArray_U0->ap_idle(devuelveAuxArray_U0_ap_idle);
    devuelveAuxArray_U0->start_out(devuelveAuxArray_U0_start_out);
    devuelveAuxArray_U0->start_write(devuelveAuxArray_U0_start_write);
    devuelveAuxArray_U0->aux_array_V_din(devuelveAuxArray_U0_aux_array_V_din);
    devuelveAuxArray_U0->aux_array_V_full_n(aux_array_V_full_n);
    devuelveAuxArray_U0->aux_array_V_write(devuelveAuxArray_U0_aux_array_V_write);
    devuelveAuxArray_U0->bufIn_0_V_dout(bufIn_0_V_dout);
    devuelveAuxArray_U0->bufIn_0_V_empty_n(bufIn_0_V_empty_n);
    devuelveAuxArray_U0->bufIn_0_V_read(devuelveAuxArray_U0_bufIn_0_V_read);
    Loop_g1_proc_U0 = new Loop_g1_proc("Loop_g1_proc_U0");
    Loop_g1_proc_U0->ap_clk(ap_clk);
    Loop_g1_proc_U0->ap_rst(ap_rst_n_inv);
    Loop_g1_proc_U0->ap_start(Loop_g1_proc_U0_ap_start);
    Loop_g1_proc_U0->start_full_n(Loop_g1_proc_U0_start_full_n);
    Loop_g1_proc_U0->ap_ready(Loop_g1_proc_U0_ap_ready);
    Loop_g1_proc_U0->ap_done(Loop_g1_proc_U0_ap_done);
    Loop_g1_proc_U0->ap_continue(Loop_g1_proc_U0_ap_continue);
    Loop_g1_proc_U0->ap_idle(Loop_g1_proc_U0_ap_idle);
    Loop_g1_proc_U0->start_out(Loop_g1_proc_U0_start_out);
    Loop_g1_proc_U0->start_write(Loop_g1_proc_U0_start_write);
    Loop_g1_proc_U0->aux_array_V_dout(aux_array_V_dout);
    Loop_g1_proc_U0->aux_array_V_empty_n(aux_array_V_empty_n);
    Loop_g1_proc_U0->aux_array_V_read(Loop_g1_proc_U0_aux_array_V_read);
    Loop_g1_proc_U0->y_V_din(Loop_g1_proc_U0_y_V_din);
    Loop_g1_proc_U0->y_V_full_n(y_V_full_n);
    Loop_g1_proc_U0->y_V_write(Loop_g1_proc_U0_y_V_write);
    Loop_2_proc_U0 = new Loop_2_proc("Loop_2_proc_U0");
    Loop_2_proc_U0->ap_clk(ap_clk);
    Loop_2_proc_U0->ap_rst(ap_rst_n_inv);
    Loop_2_proc_U0->ap_start(Loop_2_proc_U0_ap_start);
    Loop_2_proc_U0->ap_done(Loop_2_proc_U0_ap_done);
    Loop_2_proc_U0->ap_continue(Loop_2_proc_U0_ap_continue);
    Loop_2_proc_U0->ap_idle(Loop_2_proc_U0_ap_idle);
    Loop_2_proc_U0->ap_ready(Loop_2_proc_U0_ap_ready);
    Loop_2_proc_U0->y_V_dout(y_V_dout);
    Loop_2_proc_U0->y_V_empty_n(y_V_empty_n);
    Loop_2_proc_U0->y_V_read(Loop_2_proc_U0_y_V_read);
    Loop_2_proc_U0->output_AX_ALG_TDATA(Loop_2_proc_U0_output_AX_ALG_TDATA);
    Loop_2_proc_U0->output_AX_ALG_TVALID(Loop_2_proc_U0_output_AX_ALG_TVALID);
    Loop_2_proc_U0->output_AX_ALG_TREADY(output_AX_ALG_TREADY);
    Loop_2_proc_U0->output_AX_ALG_TKEEP(Loop_2_proc_U0_output_AX_ALG_TKEEP);
    Loop_2_proc_U0->output_AX_ALG_TSTRB(Loop_2_proc_U0_output_AX_ALG_TSTRB);
    Loop_2_proc_U0->output_AX_ALG_TUSER(Loop_2_proc_U0_output_AX_ALG_TUSER);
    Loop_2_proc_U0->output_AX_ALG_TLAST(Loop_2_proc_U0_output_AX_ALG_TLAST);
    Loop_2_proc_U0->output_AX_ALG_TID(Loop_2_proc_U0_output_AX_ALG_TID);
    Loop_2_proc_U0->output_AX_ALG_TDEST(Loop_2_proc_U0_output_AX_ALG_TDEST);
    bufIn_0_V_U = new fifo_w32_d4_A("bufIn_0_V_U");
    bufIn_0_V_U->clk(ap_clk);
    bufIn_0_V_U->reset(ap_rst_n_inv);
    bufIn_0_V_U->if_read_ce(ap_var_for_const0);
    bufIn_0_V_U->if_write_ce(ap_var_for_const0);
    bufIn_0_V_U->if_din(read_data_U0_buf_0_V_din);
    bufIn_0_V_U->if_full_n(bufIn_0_V_full_n);
    bufIn_0_V_U->if_write(read_data_U0_buf_0_V_write);
    bufIn_0_V_U->if_dout(bufIn_0_V_dout);
    bufIn_0_V_U->if_empty_n(bufIn_0_V_empty_n);
    bufIn_0_V_U->if_read(devuelveAuxArray_U0_bufIn_0_V_read);
    aux_array_V_U = new fifo_w32_d4_A("aux_array_V_U");
    aux_array_V_U->clk(ap_clk);
    aux_array_V_U->reset(ap_rst_n_inv);
    aux_array_V_U->if_read_ce(ap_var_for_const0);
    aux_array_V_U->if_write_ce(ap_var_for_const0);
    aux_array_V_U->if_din(devuelveAuxArray_U0_aux_array_V_din);
    aux_array_V_U->if_full_n(aux_array_V_full_n);
    aux_array_V_U->if_write(devuelveAuxArray_U0_aux_array_V_write);
    aux_array_V_U->if_dout(aux_array_V_dout);
    aux_array_V_U->if_empty_n(aux_array_V_empty_n);
    aux_array_V_U->if_read(Loop_g1_proc_U0_aux_array_V_read);
    y_V_U = new fifo_w32_d4_A("y_V_U");
    y_V_U->clk(ap_clk);
    y_V_U->reset(ap_rst_n_inv);
    y_V_U->if_read_ce(ap_var_for_const0);
    y_V_U->if_write_ce(ap_var_for_const0);
    y_V_U->if_din(Loop_g1_proc_U0_y_V_din);
    y_V_U->if_full_n(y_V_full_n);
    y_V_U->if_write(Loop_g1_proc_U0_y_V_write);
    y_V_U->if_dout(y_V_dout);
    y_V_U->if_empty_n(y_V_empty_n);
    y_V_U->if_read(Loop_2_proc_U0_y_V_read);
    start_for_devuelvfYi_U = new start_for_devuelvfYi("start_for_devuelvfYi_U");
    start_for_devuelvfYi_U->clk(ap_clk);
    start_for_devuelvfYi_U->reset(ap_rst_n_inv);
    start_for_devuelvfYi_U->if_read_ce(ap_var_for_const0);
    start_for_devuelvfYi_U->if_write_ce(ap_var_for_const0);
    start_for_devuelvfYi_U->if_din(start_for_devuelveAuxArray_U0_din);
    start_for_devuelvfYi_U->if_full_n(start_for_devuelveAuxArray_U0_full_n);
    start_for_devuelvfYi_U->if_write(read_data_U0_start_write);
    start_for_devuelvfYi_U->if_dout(start_for_devuelveAuxArray_U0_dout);
    start_for_devuelvfYi_U->if_empty_n(start_for_devuelveAuxArray_U0_empty_n);
    start_for_devuelvfYi_U->if_read(devuelveAuxArray_U0_ap_ready);
    start_for_Loop_g1g8j_U = new start_for_Loop_g1g8j("start_for_Loop_g1g8j_U");
    start_for_Loop_g1g8j_U->clk(ap_clk);
    start_for_Loop_g1g8j_U->reset(ap_rst_n_inv);
    start_for_Loop_g1g8j_U->if_read_ce(ap_var_for_const0);
    start_for_Loop_g1g8j_U->if_write_ce(ap_var_for_const0);
    start_for_Loop_g1g8j_U->if_din(start_for_Loop_g1_proc_U0_din);
    start_for_Loop_g1g8j_U->if_full_n(start_for_Loop_g1_proc_U0_full_n);
    start_for_Loop_g1g8j_U->if_write(devuelveAuxArray_U0_start_write);
    start_for_Loop_g1g8j_U->if_dout(start_for_Loop_g1_proc_U0_dout);
    start_for_Loop_g1g8j_U->if_empty_n(start_for_Loop_g1_proc_U0_empty_n);
    start_for_Loop_g1g8j_U->if_read(Loop_g1_proc_U0_ap_ready);
    start_for_Loop_2_hbi_U = new start_for_Loop_2_hbi("start_for_Loop_2_hbi_U");
    start_for_Loop_2_hbi_U->clk(ap_clk);
    start_for_Loop_2_hbi_U->reset(ap_rst_n_inv);
    start_for_Loop_2_hbi_U->if_read_ce(ap_var_for_const0);
    start_for_Loop_2_hbi_U->if_write_ce(ap_var_for_const0);
    start_for_Loop_2_hbi_U->if_din(start_for_Loop_2_proc_U0_din);
    start_for_Loop_2_hbi_U->if_full_n(start_for_Loop_2_proc_U0_full_n);
    start_for_Loop_2_hbi_U->if_write(Loop_g1_proc_U0_start_write);
    start_for_Loop_2_hbi_U->if_dout(start_for_Loop_2_proc_U0_dout);
    start_for_Loop_2_hbi_U->if_empty_n(start_for_Loop_2_proc_U0_empty_n);
    start_for_Loop_2_hbi_U->if_read(Loop_2_proc_U0_ap_ready);

    SC_METHOD(thread_Loop_2_proc_U0_ap_continue);

    SC_METHOD(thread_Loop_2_proc_U0_ap_start);
    sensitive << ( start_for_Loop_2_proc_U0_empty_n );

    SC_METHOD(thread_Loop_2_proc_U0_start_full_n);

    SC_METHOD(thread_Loop_2_proc_U0_start_write);

    SC_METHOD(thread_Loop_g1_proc_U0_ap_continue);

    SC_METHOD(thread_Loop_g1_proc_U0_ap_start);
    sensitive << ( start_for_Loop_g1_proc_U0_empty_n );

    SC_METHOD(thread_Loop_g1_proc_U0_start_full_n);
    sensitive << ( start_for_Loop_2_proc_U0_full_n );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_devuelveAuxArray_U0_ap_continue);

    SC_METHOD(thread_devuelveAuxArray_U0_ap_start);
    sensitive << ( start_for_devuelveAuxArray_U0_empty_n );

    SC_METHOD(thread_devuelveAuxArray_U0_start_full_n);
    sensitive << ( start_for_Loop_g1_proc_U0_full_n );

    SC_METHOD(thread_input_AX_ALG_TREADY);
    sensitive << ( read_data_U0_input_AX_ALG_TREADY );

    SC_METHOD(thread_output_AX_ALG_TDATA);
    sensitive << ( Loop_2_proc_U0_output_AX_ALG_TDATA );

    SC_METHOD(thread_output_AX_ALG_TDEST);
    sensitive << ( Loop_2_proc_U0_output_AX_ALG_TDEST );

    SC_METHOD(thread_output_AX_ALG_TID);
    sensitive << ( Loop_2_proc_U0_output_AX_ALG_TID );

    SC_METHOD(thread_output_AX_ALG_TKEEP);
    sensitive << ( Loop_2_proc_U0_output_AX_ALG_TKEEP );

    SC_METHOD(thread_output_AX_ALG_TLAST);
    sensitive << ( Loop_2_proc_U0_output_AX_ALG_TLAST );

    SC_METHOD(thread_output_AX_ALG_TSTRB);
    sensitive << ( Loop_2_proc_U0_output_AX_ALG_TSTRB );

    SC_METHOD(thread_output_AX_ALG_TUSER);
    sensitive << ( Loop_2_proc_U0_output_AX_ALG_TUSER );

    SC_METHOD(thread_output_AX_ALG_TVALID);
    sensitive << ( Loop_2_proc_U0_output_AX_ALG_TVALID );

    SC_METHOD(thread_read_data_U0_ap_continue);

    SC_METHOD(thread_read_data_U0_ap_start);

    SC_METHOD(thread_read_data_U0_start_full_n);
    sensitive << ( start_for_devuelveAuxArray_U0_full_n );

    SC_METHOD(thread_start_for_Loop_2_proc_U0_din);

    SC_METHOD(thread_start_for_Loop_g1_proc_U0_din);

    SC_METHOD(thread_start_for_devuelveAuxArray_U0_din);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "goertzel_algorithm_simpler_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, input_AX_ALG_TDATA, "(port)input_AX_ALG_TDATA");
    sc_trace(mVcdFile, input_AX_ALG_TKEEP, "(port)input_AX_ALG_TKEEP");
    sc_trace(mVcdFile, input_AX_ALG_TSTRB, "(port)input_AX_ALG_TSTRB");
    sc_trace(mVcdFile, input_AX_ALG_TUSER, "(port)input_AX_ALG_TUSER");
    sc_trace(mVcdFile, input_AX_ALG_TLAST, "(port)input_AX_ALG_TLAST");
    sc_trace(mVcdFile, input_AX_ALG_TID, "(port)input_AX_ALG_TID");
    sc_trace(mVcdFile, input_AX_ALG_TDEST, "(port)input_AX_ALG_TDEST");
    sc_trace(mVcdFile, output_AX_ALG_TDATA, "(port)output_AX_ALG_TDATA");
    sc_trace(mVcdFile, output_AX_ALG_TKEEP, "(port)output_AX_ALG_TKEEP");
    sc_trace(mVcdFile, output_AX_ALG_TSTRB, "(port)output_AX_ALG_TSTRB");
    sc_trace(mVcdFile, output_AX_ALG_TUSER, "(port)output_AX_ALG_TUSER");
    sc_trace(mVcdFile, output_AX_ALG_TLAST, "(port)output_AX_ALG_TLAST");
    sc_trace(mVcdFile, output_AX_ALG_TID, "(port)output_AX_ALG_TID");
    sc_trace(mVcdFile, output_AX_ALG_TDEST, "(port)output_AX_ALG_TDEST");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, input_AX_ALG_TVALID, "(port)input_AX_ALG_TVALID");
    sc_trace(mVcdFile, input_AX_ALG_TREADY, "(port)input_AX_ALG_TREADY");
    sc_trace(mVcdFile, output_AX_ALG_TVALID, "(port)output_AX_ALG_TVALID");
    sc_trace(mVcdFile, output_AX_ALG_TREADY, "(port)output_AX_ALG_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, read_data_U0_ap_start, "read_data_U0_ap_start");
    sc_trace(mVcdFile, read_data_U0_start_full_n, "read_data_U0_start_full_n");
    sc_trace(mVcdFile, read_data_U0_ap_done, "read_data_U0_ap_done");
    sc_trace(mVcdFile, read_data_U0_ap_continue, "read_data_U0_ap_continue");
    sc_trace(mVcdFile, read_data_U0_ap_idle, "read_data_U0_ap_idle");
    sc_trace(mVcdFile, read_data_U0_ap_ready, "read_data_U0_ap_ready");
    sc_trace(mVcdFile, read_data_U0_buf_0_V_din, "read_data_U0_buf_0_V_din");
    sc_trace(mVcdFile, read_data_U0_buf_0_V_write, "read_data_U0_buf_0_V_write");
    sc_trace(mVcdFile, read_data_U0_start_out, "read_data_U0_start_out");
    sc_trace(mVcdFile, read_data_U0_start_write, "read_data_U0_start_write");
    sc_trace(mVcdFile, read_data_U0_input_AX_ALG_TREADY, "read_data_U0_input_AX_ALG_TREADY");
    sc_trace(mVcdFile, devuelveAuxArray_U0_ap_start, "devuelveAuxArray_U0_ap_start");
    sc_trace(mVcdFile, devuelveAuxArray_U0_start_full_n, "devuelveAuxArray_U0_start_full_n");
    sc_trace(mVcdFile, devuelveAuxArray_U0_ap_ready, "devuelveAuxArray_U0_ap_ready");
    sc_trace(mVcdFile, devuelveAuxArray_U0_ap_done, "devuelveAuxArray_U0_ap_done");
    sc_trace(mVcdFile, devuelveAuxArray_U0_ap_continue, "devuelveAuxArray_U0_ap_continue");
    sc_trace(mVcdFile, devuelveAuxArray_U0_ap_idle, "devuelveAuxArray_U0_ap_idle");
    sc_trace(mVcdFile, devuelveAuxArray_U0_start_out, "devuelveAuxArray_U0_start_out");
    sc_trace(mVcdFile, devuelveAuxArray_U0_start_write, "devuelveAuxArray_U0_start_write");
    sc_trace(mVcdFile, devuelveAuxArray_U0_aux_array_V_din, "devuelveAuxArray_U0_aux_array_V_din");
    sc_trace(mVcdFile, devuelveAuxArray_U0_aux_array_V_write, "devuelveAuxArray_U0_aux_array_V_write");
    sc_trace(mVcdFile, devuelveAuxArray_U0_bufIn_0_V_read, "devuelveAuxArray_U0_bufIn_0_V_read");
    sc_trace(mVcdFile, Loop_g1_proc_U0_ap_start, "Loop_g1_proc_U0_ap_start");
    sc_trace(mVcdFile, Loop_g1_proc_U0_start_full_n, "Loop_g1_proc_U0_start_full_n");
    sc_trace(mVcdFile, Loop_g1_proc_U0_ap_ready, "Loop_g1_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loop_g1_proc_U0_ap_done, "Loop_g1_proc_U0_ap_done");
    sc_trace(mVcdFile, Loop_g1_proc_U0_ap_continue, "Loop_g1_proc_U0_ap_continue");
    sc_trace(mVcdFile, Loop_g1_proc_U0_ap_idle, "Loop_g1_proc_U0_ap_idle");
    sc_trace(mVcdFile, Loop_g1_proc_U0_start_out, "Loop_g1_proc_U0_start_out");
    sc_trace(mVcdFile, Loop_g1_proc_U0_start_write, "Loop_g1_proc_U0_start_write");
    sc_trace(mVcdFile, Loop_g1_proc_U0_aux_array_V_read, "Loop_g1_proc_U0_aux_array_V_read");
    sc_trace(mVcdFile, Loop_g1_proc_U0_y_V_din, "Loop_g1_proc_U0_y_V_din");
    sc_trace(mVcdFile, Loop_g1_proc_U0_y_V_write, "Loop_g1_proc_U0_y_V_write");
    sc_trace(mVcdFile, Loop_2_proc_U0_ap_start, "Loop_2_proc_U0_ap_start");
    sc_trace(mVcdFile, Loop_2_proc_U0_ap_done, "Loop_2_proc_U0_ap_done");
    sc_trace(mVcdFile, Loop_2_proc_U0_ap_continue, "Loop_2_proc_U0_ap_continue");
    sc_trace(mVcdFile, Loop_2_proc_U0_ap_idle, "Loop_2_proc_U0_ap_idle");
    sc_trace(mVcdFile, Loop_2_proc_U0_ap_ready, "Loop_2_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loop_2_proc_U0_y_V_read, "Loop_2_proc_U0_y_V_read");
    sc_trace(mVcdFile, Loop_2_proc_U0_output_AX_ALG_TDATA, "Loop_2_proc_U0_output_AX_ALG_TDATA");
    sc_trace(mVcdFile, Loop_2_proc_U0_output_AX_ALG_TVALID, "Loop_2_proc_U0_output_AX_ALG_TVALID");
    sc_trace(mVcdFile, Loop_2_proc_U0_output_AX_ALG_TKEEP, "Loop_2_proc_U0_output_AX_ALG_TKEEP");
    sc_trace(mVcdFile, Loop_2_proc_U0_output_AX_ALG_TSTRB, "Loop_2_proc_U0_output_AX_ALG_TSTRB");
    sc_trace(mVcdFile, Loop_2_proc_U0_output_AX_ALG_TUSER, "Loop_2_proc_U0_output_AX_ALG_TUSER");
    sc_trace(mVcdFile, Loop_2_proc_U0_output_AX_ALG_TLAST, "Loop_2_proc_U0_output_AX_ALG_TLAST");
    sc_trace(mVcdFile, Loop_2_proc_U0_output_AX_ALG_TID, "Loop_2_proc_U0_output_AX_ALG_TID");
    sc_trace(mVcdFile, Loop_2_proc_U0_output_AX_ALG_TDEST, "Loop_2_proc_U0_output_AX_ALG_TDEST");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, bufIn_0_V_full_n, "bufIn_0_V_full_n");
    sc_trace(mVcdFile, bufIn_0_V_dout, "bufIn_0_V_dout");
    sc_trace(mVcdFile, bufIn_0_V_empty_n, "bufIn_0_V_empty_n");
    sc_trace(mVcdFile, aux_array_V_full_n, "aux_array_V_full_n");
    sc_trace(mVcdFile, aux_array_V_dout, "aux_array_V_dout");
    sc_trace(mVcdFile, aux_array_V_empty_n, "aux_array_V_empty_n");
    sc_trace(mVcdFile, y_V_full_n, "y_V_full_n");
    sc_trace(mVcdFile, y_V_dout, "y_V_dout");
    sc_trace(mVcdFile, y_V_empty_n, "y_V_empty_n");
    sc_trace(mVcdFile, start_for_devuelveAuxArray_U0_din, "start_for_devuelveAuxArray_U0_din");
    sc_trace(mVcdFile, start_for_devuelveAuxArray_U0_full_n, "start_for_devuelveAuxArray_U0_full_n");
    sc_trace(mVcdFile, start_for_devuelveAuxArray_U0_dout, "start_for_devuelveAuxArray_U0_dout");
    sc_trace(mVcdFile, start_for_devuelveAuxArray_U0_empty_n, "start_for_devuelveAuxArray_U0_empty_n");
    sc_trace(mVcdFile, start_for_Loop_g1_proc_U0_din, "start_for_Loop_g1_proc_U0_din");
    sc_trace(mVcdFile, start_for_Loop_g1_proc_U0_full_n, "start_for_Loop_g1_proc_U0_full_n");
    sc_trace(mVcdFile, start_for_Loop_g1_proc_U0_dout, "start_for_Loop_g1_proc_U0_dout");
    sc_trace(mVcdFile, start_for_Loop_g1_proc_U0_empty_n, "start_for_Loop_g1_proc_U0_empty_n");
    sc_trace(mVcdFile, start_for_Loop_2_proc_U0_din, "start_for_Loop_2_proc_U0_din");
    sc_trace(mVcdFile, start_for_Loop_2_proc_U0_full_n, "start_for_Loop_2_proc_U0_full_n");
    sc_trace(mVcdFile, start_for_Loop_2_proc_U0_dout, "start_for_Loop_2_proc_U0_dout");
    sc_trace(mVcdFile, start_for_Loop_2_proc_U0_empty_n, "start_for_Loop_2_proc_U0_empty_n");
    sc_trace(mVcdFile, Loop_2_proc_U0_start_full_n, "Loop_2_proc_U0_start_full_n");
    sc_trace(mVcdFile, Loop_2_proc_U0_start_write, "Loop_2_proc_U0_start_write");
#endif

    }
    mHdltvinHandle.open("goertzel_algorithm_simpler.hdltvin.dat");
    mHdltvoutHandle.open("goertzel_algorithm_simpler.hdltvout.dat");
}

goertzel_algorithm_simpler::~goertzel_algorithm_simpler() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete read_data_U0;
    delete devuelveAuxArray_U0;
    delete Loop_g1_proc_U0;
    delete Loop_2_proc_U0;
    delete bufIn_0_V_U;
    delete aux_array_V_U;
    delete y_V_U;
    delete start_for_devuelvfYi_U;
    delete start_for_Loop_g1g8j_U;
    delete start_for_Loop_2_hbi_U;
}

void goertzel_algorithm_simpler::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void goertzel_algorithm_simpler::thread_Loop_2_proc_U0_ap_continue() {
    Loop_2_proc_U0_ap_continue = ap_const_logic_1;
}

void goertzel_algorithm_simpler::thread_Loop_2_proc_U0_ap_start() {
    Loop_2_proc_U0_ap_start = start_for_Loop_2_proc_U0_empty_n.read();
}

void goertzel_algorithm_simpler::thread_Loop_2_proc_U0_start_full_n() {
    Loop_2_proc_U0_start_full_n = ap_const_logic_0;
}

void goertzel_algorithm_simpler::thread_Loop_2_proc_U0_start_write() {
    Loop_2_proc_U0_start_write = ap_const_logic_0;
}

void goertzel_algorithm_simpler::thread_Loop_g1_proc_U0_ap_continue() {
    Loop_g1_proc_U0_ap_continue = ap_const_logic_1;
}

void goertzel_algorithm_simpler::thread_Loop_g1_proc_U0_ap_start() {
    Loop_g1_proc_U0_ap_start = start_for_Loop_g1_proc_U0_empty_n.read();
}

void goertzel_algorithm_simpler::thread_Loop_g1_proc_U0_start_full_n() {
    Loop_g1_proc_U0_start_full_n = (ap_const_logic_0 | start_for_Loop_2_proc_U0_full_n.read());
}

void goertzel_algorithm_simpler::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void goertzel_algorithm_simpler::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void goertzel_algorithm_simpler::thread_devuelveAuxArray_U0_ap_continue() {
    devuelveAuxArray_U0_ap_continue = ap_const_logic_1;
}

void goertzel_algorithm_simpler::thread_devuelveAuxArray_U0_ap_start() {
    devuelveAuxArray_U0_ap_start = start_for_devuelveAuxArray_U0_empty_n.read();
}

void goertzel_algorithm_simpler::thread_devuelveAuxArray_U0_start_full_n() {
    devuelveAuxArray_U0_start_full_n = (ap_const_logic_0 | start_for_Loop_g1_proc_U0_full_n.read());
}

void goertzel_algorithm_simpler::thread_input_AX_ALG_TREADY() {
    input_AX_ALG_TREADY = read_data_U0_input_AX_ALG_TREADY.read();
}

void goertzel_algorithm_simpler::thread_output_AX_ALG_TDATA() {
    output_AX_ALG_TDATA = Loop_2_proc_U0_output_AX_ALG_TDATA.read();
}

void goertzel_algorithm_simpler::thread_output_AX_ALG_TDEST() {
    output_AX_ALG_TDEST = Loop_2_proc_U0_output_AX_ALG_TDEST.read();
}

void goertzel_algorithm_simpler::thread_output_AX_ALG_TID() {
    output_AX_ALG_TID = Loop_2_proc_U0_output_AX_ALG_TID.read();
}

void goertzel_algorithm_simpler::thread_output_AX_ALG_TKEEP() {
    output_AX_ALG_TKEEP = Loop_2_proc_U0_output_AX_ALG_TKEEP.read();
}

void goertzel_algorithm_simpler::thread_output_AX_ALG_TLAST() {
    output_AX_ALG_TLAST = Loop_2_proc_U0_output_AX_ALG_TLAST.read();
}

void goertzel_algorithm_simpler::thread_output_AX_ALG_TSTRB() {
    output_AX_ALG_TSTRB = Loop_2_proc_U0_output_AX_ALG_TSTRB.read();
}

void goertzel_algorithm_simpler::thread_output_AX_ALG_TUSER() {
    output_AX_ALG_TUSER = Loop_2_proc_U0_output_AX_ALG_TUSER.read();
}

void goertzel_algorithm_simpler::thread_output_AX_ALG_TVALID() {
    output_AX_ALG_TVALID = Loop_2_proc_U0_output_AX_ALG_TVALID.read();
}

void goertzel_algorithm_simpler::thread_read_data_U0_ap_continue() {
    read_data_U0_ap_continue = ap_const_logic_1;
}

void goertzel_algorithm_simpler::thread_read_data_U0_ap_start() {
    read_data_U0_ap_start = ap_const_logic_1;
}

void goertzel_algorithm_simpler::thread_read_data_U0_start_full_n() {
    read_data_U0_start_full_n = (start_for_devuelveAuxArray_U0_full_n.read() | ap_const_logic_0);
}

void goertzel_algorithm_simpler::thread_start_for_Loop_2_proc_U0_din() {
    start_for_Loop_2_proc_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void goertzel_algorithm_simpler::thread_start_for_Loop_g1_proc_U0_din() {
    start_for_Loop_g1_proc_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void goertzel_algorithm_simpler::thread_start_for_devuelveAuxArray_U0_din() {
    start_for_devuelveAuxArray_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void goertzel_algorithm_simpler::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"input_AX_ALG_TDATA\" :  \"" << input_AX_ALG_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TKEEP\" :  \"" << input_AX_ALG_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TSTRB\" :  \"" << input_AX_ALG_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TUSER\" :  \"" << input_AX_ALG_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TLAST\" :  \"" << input_AX_ALG_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TID\" :  \"" << input_AX_ALG_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TDEST\" :  \"" << input_AX_ALG_TDEST.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"output_AX_ALG_TDATA\" :  \"" << output_AX_ALG_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TKEEP\" :  \"" << output_AX_ALG_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TSTRB\" :  \"" << output_AX_ALG_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TUSER\" :  \"" << output_AX_ALG_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TLAST\" :  \"" << output_AX_ALG_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TID\" :  \"" << output_AX_ALG_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TDEST\" :  \"" << output_AX_ALG_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_AX_ALG_TVALID\" :  \"" << input_AX_ALG_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_AX_ALG_TREADY\" :  \"" << input_AX_ALG_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_AX_ALG_TVALID\" :  \"" << output_AX_ALG_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"output_AX_ALG_TREADY\" :  \"" << output_AX_ALG_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

