// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "devuelveAuxArray.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic devuelveAuxArray::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic devuelveAuxArray::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> devuelveAuxArray::ap_ST_fsm_state1 = "1";
const sc_lv<3> devuelveAuxArray::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> devuelveAuxArray::ap_ST_fsm_state4 = "100";
const bool devuelveAuxArray::ap_const_boolean_1 = true;
const sc_lv<32> devuelveAuxArray::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> devuelveAuxArray::ap_const_lv32_1 = "1";
const bool devuelveAuxArray::ap_const_boolean_0 = false;
const sc_lv<1> devuelveAuxArray::ap_const_lv1_0 = "0";
const sc_lv<32> devuelveAuxArray::ap_const_lv32_2 = "10";
const sc_lv<1> devuelveAuxArray::ap_const_lv1_1 = "1";
const sc_lv<11> devuelveAuxArray::ap_const_lv11_0 = "00000000000";
const sc_lv<11> devuelveAuxArray::ap_const_lv11_7FF = "11111111111";
const sc_lv<11> devuelveAuxArray::ap_const_lv11_1 = "1";

devuelveAuxArray::devuelveAuxArray(sc_module_name name) : sc_module(name), mVcdFile(0) {
    arrayAuxiliar_V_U = new devuelveAuxArray_bkb("arrayAuxiliar_V_U");
    arrayAuxiliar_V_U->clk(ap_clk);
    arrayAuxiliar_V_U->reset(ap_rst);
    arrayAuxiliar_V_U->address0(arrayAuxiliar_V_address0);
    arrayAuxiliar_V_U->ce0(arrayAuxiliar_V_ce0);
    arrayAuxiliar_V_U->we0(arrayAuxiliar_V_we0);
    arrayAuxiliar_V_U->d0(bufIn_0_V_dout);
    arrayAuxiliar_V_U->q0(arrayAuxiliar_V_q0);
    arrayAuxiliar_V_U->address1(arrayAuxiliar_V_address1);
    arrayAuxiliar_V_U->ce1(arrayAuxiliar_V_ce1);
    arrayAuxiliar_V_U->we1(arrayAuxiliar_V_we1);
    arrayAuxiliar_V_U->d1(arrayAuxiliar_V_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00001001);
    sensitive << ( aux_array_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_147 );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011001);
    sensitive << ( aux_array_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_147 );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011011);
    sensitive << ( aux_array_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_147 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( aux_array_V_full_n );
    sensitive << ( exitcond_reg_147 );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( aux_array_V_full_n );
    sensitive << ( bufIn_0_V_empty_n );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_fu_125_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( aux_array_V_full_n );
    sensitive << ( bufIn_0_V_empty_n );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_arrayAuxiliar_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( i_2_cast_fu_137_p1 );

    SC_METHOD(thread_arrayAuxiliar_V_address1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( i_cast2_fu_142_p1 );

    SC_METHOD(thread_arrayAuxiliar_V_ce0);
    sensitive << ( aux_array_V_full_n );
    sensitive << ( bufIn_0_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_arrayAuxiliar_V_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_arrayAuxiliar_V_we0);
    sensitive << ( aux_array_V_full_n );
    sensitive << ( bufIn_0_V_empty_n );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_arrayAuxiliar_V_we1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_147 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_aux_array_V_blk_n);
    sensitive << ( aux_array_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( exitcond_reg_147 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_aux_array_V_din);
    sensitive << ( aux_array_V_full_n );
    sensitive << ( bufIn_0_V_dout );
    sensitive << ( bufIn_0_V_empty_n );
    sensitive << ( arrayAuxiliar_V_q0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_147 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_pp0_stage0_flag00001001 );

    SC_METHOD(thread_aux_array_V_write);
    sensitive << ( aux_array_V_full_n );
    sensitive << ( bufIn_0_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_147 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_bufIn_0_V_blk_n);
    sensitive << ( bufIn_0_V_empty_n );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_bufIn_0_V_read);
    sensitive << ( aux_array_V_full_n );
    sensitive << ( bufIn_0_V_empty_n );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_exitcond_fu_125_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( i_phi_fu_117_p4 );

    SC_METHOD(thread_i_2_cast_fu_137_p1);
    sensitive << ( i_2_fu_131_p2 );

    SC_METHOD(thread_i_2_fu_131_p2);
    sensitive << ( i_phi_fu_117_p4 );

    SC_METHOD(thread_i_cast2_fu_142_p1);
    sensitive << ( i_reg_113 );

    SC_METHOD(thread_i_phi_fu_117_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( exitcond_reg_147 );
    sensitive << ( i_reg_113 );
    sensitive << ( i_2_reg_151 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( aux_array_V_full_n );
    sensitive << ( bufIn_0_V_empty_n );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( real_start_status_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( ap_start );
    sensitive << ( start_control_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( aux_array_V_full_n );
    sensitive << ( bufIn_0_V_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_125_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_flag00011011 );

    real_start_status_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    start_once_reg = SC_LOGIC_0;
    start_control_reg = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "devuelveAuxArray_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, aux_array_V_din, "(port)aux_array_V_din");
    sc_trace(mVcdFile, aux_array_V_full_n, "(port)aux_array_V_full_n");
    sc_trace(mVcdFile, aux_array_V_write, "(port)aux_array_V_write");
    sc_trace(mVcdFile, bufIn_0_V_dout, "(port)bufIn_0_V_dout");
    sc_trace(mVcdFile, bufIn_0_V_empty_n, "(port)bufIn_0_V_empty_n");
    sc_trace(mVcdFile, bufIn_0_V_read, "(port)bufIn_0_V_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, real_start_status_reg, "real_start_status_reg");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, start_control_reg, "start_control_reg");
    sc_trace(mVcdFile, arrayAuxiliar_V_address0, "arrayAuxiliar_V_address0");
    sc_trace(mVcdFile, arrayAuxiliar_V_ce0, "arrayAuxiliar_V_ce0");
    sc_trace(mVcdFile, arrayAuxiliar_V_we0, "arrayAuxiliar_V_we0");
    sc_trace(mVcdFile, arrayAuxiliar_V_q0, "arrayAuxiliar_V_q0");
    sc_trace(mVcdFile, arrayAuxiliar_V_address1, "arrayAuxiliar_V_address1");
    sc_trace(mVcdFile, arrayAuxiliar_V_ce1, "arrayAuxiliar_V_ce1");
    sc_trace(mVcdFile, arrayAuxiliar_V_we1, "arrayAuxiliar_V_we1");
    sc_trace(mVcdFile, aux_array_V_blk_n, "aux_array_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00000000, "ap_block_pp0_stage0_flag00000000");
    sc_trace(mVcdFile, exitcond_reg_147, "exitcond_reg_147");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, bufIn_0_V_blk_n, "bufIn_0_V_blk_n");
    sc_trace(mVcdFile, i_reg_113, "i_reg_113");
    sc_trace(mVcdFile, exitcond_fu_125_p2, "exitcond_fu_125_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011001, "ap_block_pp0_stage0_flag00011001");
    sc_trace(mVcdFile, i_2_fu_131_p2, "i_2_fu_131_p2");
    sc_trace(mVcdFile, i_2_reg_151, "i_2_reg_151");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011011, "ap_block_pp0_stage0_flag00011011");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, i_phi_fu_117_p4, "i_phi_fu_117_p4");
    sc_trace(mVcdFile, i_2_cast_fu_137_p1, "i_2_cast_fu_137_p1");
    sc_trace(mVcdFile, i_cast2_fu_142_p1, "i_cast2_fu_142_p1");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00001001, "ap_block_pp0_stage0_flag00001001");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

devuelveAuxArray::~devuelveAuxArray() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete arrayAuxiliar_V_U;
}

void devuelveAuxArray::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, aux_array_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, bufIn_0_V_empty_n.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_147.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        i_reg_113 = i_2_reg_151.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_reg_113 = ap_const_lv11_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        real_start_status_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(start_full_n.read(), ap_const_logic_1)) {
            real_start_status_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read()))) {
            real_start_status_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_control_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read()) || 
              esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read())))) {
            start_control_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, start_control_reg.read())) {
            start_control_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read())) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        exitcond_reg_147 = exitcond_fu_125_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        i_2_reg_151 = i_2_fu_131_p2.read();
    }
}

void devuelveAuxArray::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void devuelveAuxArray::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void devuelveAuxArray::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void devuelveAuxArray::thread_ap_block_pp0_stage0_flag00000000() {
    ap_block_pp0_stage0_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void devuelveAuxArray::thread_ap_block_pp0_stage0_flag00001001() {
    ap_block_pp0_stage0_flag00001001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond_reg_147.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, aux_array_V_full_n.read()));
}

void devuelveAuxArray::thread_ap_block_pp0_stage0_flag00011001() {
    ap_block_pp0_stage0_flag00011001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond_reg_147.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, aux_array_V_full_n.read()));
}

void devuelveAuxArray::thread_ap_block_pp0_stage0_flag00011011() {
    ap_block_pp0_stage0_flag00011011 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond_reg_147.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, aux_array_V_full_n.read()));
}

void devuelveAuxArray::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void devuelveAuxArray::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void devuelveAuxArray::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = (esl_seteq<1,1,1>(exitcond_reg_147.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, aux_array_V_full_n.read()));
}

void devuelveAuxArray::thread_ap_block_state4() {
    ap_block_state4 = (esl_seteq<1,1,1>(ap_const_logic_0, aux_array_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, bufIn_0_V_empty_n.read()));
}

void devuelveAuxArray::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond_fu_125_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void devuelveAuxArray::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, aux_array_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, bufIn_0_V_empty_n.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void devuelveAuxArray::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void devuelveAuxArray::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void devuelveAuxArray::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void devuelveAuxArray::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void devuelveAuxArray::thread_arrayAuxiliar_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        arrayAuxiliar_V_address0 = ap_const_lv11_7FF;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        arrayAuxiliar_V_address0 =  (sc_lv<11>) (i_2_cast_fu_137_p1.read());
    } else {
        arrayAuxiliar_V_address0 = "XXXXXXXXXXX";
    }
}

void devuelveAuxArray::thread_arrayAuxiliar_V_address1() {
    arrayAuxiliar_V_address1 =  (sc_lv<11>) (i_cast2_fu_142_p1.read());
}

void devuelveAuxArray::thread_arrayAuxiliar_V_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, aux_array_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, bufIn_0_V_empty_n.read()))))) {
        arrayAuxiliar_V_ce0 = ap_const_logic_1;
    } else {
        arrayAuxiliar_V_ce0 = ap_const_logic_0;
    }
}

void devuelveAuxArray::thread_arrayAuxiliar_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        arrayAuxiliar_V_ce1 = ap_const_logic_1;
    } else {
        arrayAuxiliar_V_ce1 = ap_const_logic_0;
    }
}

void devuelveAuxArray::thread_arrayAuxiliar_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, aux_array_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, bufIn_0_V_empty_n.read())))) {
        arrayAuxiliar_V_we0 = ap_const_logic_1;
    } else {
        arrayAuxiliar_V_we0 = ap_const_logic_0;
    }
}

void devuelveAuxArray::thread_arrayAuxiliar_V_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_147.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        arrayAuxiliar_V_we1 = ap_const_logic_1;
    } else {
        arrayAuxiliar_V_we1 = ap_const_logic_0;
    }
}

void devuelveAuxArray::thread_aux_array_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(exitcond_reg_147.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        aux_array_V_blk_n = aux_array_V_full_n.read();
    } else {
        aux_array_V_blk_n = ap_const_logic_1;
    }
}

void devuelveAuxArray::thread_aux_array_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, aux_array_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, bufIn_0_V_empty_n.read())))) {
        aux_array_V_din = bufIn_0_V_dout.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(exitcond_reg_147.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00001001.read(), ap_const_boolean_0))) {
        aux_array_V_din = arrayAuxiliar_V_q0.read();
    } else {
        aux_array_V_din =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void devuelveAuxArray::thread_aux_array_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(exitcond_reg_147.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, aux_array_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, bufIn_0_V_empty_n.read()))))) {
        aux_array_V_write = ap_const_logic_1;
    } else {
        aux_array_V_write = ap_const_logic_0;
    }
}

void devuelveAuxArray::thread_bufIn_0_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        bufIn_0_V_blk_n = bufIn_0_V_empty_n.read();
    } else {
        bufIn_0_V_blk_n = ap_const_logic_1;
    }
}

void devuelveAuxArray::thread_bufIn_0_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, aux_array_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, bufIn_0_V_empty_n.read())))) {
        bufIn_0_V_read = ap_const_logic_1;
    } else {
        bufIn_0_V_read = ap_const_logic_0;
    }
}

void devuelveAuxArray::thread_exitcond_fu_125_p2() {
    exitcond_fu_125_p2 = (!i_phi_fu_117_p4.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(i_phi_fu_117_p4.read() == ap_const_lv11_7FF);
}

void devuelveAuxArray::thread_i_2_cast_fu_137_p1() {
    i_2_cast_fu_137_p1 = esl_zext<32,11>(i_2_fu_131_p2.read());
}

void devuelveAuxArray::thread_i_2_fu_131_p2() {
    i_2_fu_131_p2 = (!i_phi_fu_117_p4.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_phi_fu_117_p4.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void devuelveAuxArray::thread_i_cast2_fu_142_p1() {
    i_cast2_fu_142_p1 = esl_zext<32,11>(i_reg_113.read());
}

void devuelveAuxArray::thread_i_phi_fu_117_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_reg_147.read(), ap_const_lv1_0))) {
        i_phi_fu_117_p4 = i_2_reg_151.read();
    } else {
        i_phi_fu_117_p4 = i_reg_113.read();
    }
}

void devuelveAuxArray::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, aux_array_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, bufIn_0_V_empty_n.read())))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void devuelveAuxArray::thread_real_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, real_start_status_reg.read())) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void devuelveAuxArray::thread_start_out() {
    start_out = real_start.read();
}

void devuelveAuxArray::thread_start_write() {
    start_write = (ap_start.read() & start_control_reg.read());
}

void devuelveAuxArray::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_fu_125_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_fu_125_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, aux_array_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, bufIn_0_V_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

