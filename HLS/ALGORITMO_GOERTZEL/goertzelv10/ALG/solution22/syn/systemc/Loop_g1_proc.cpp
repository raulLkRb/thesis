// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_g1_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_g1_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_g1_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Loop_g1_proc::ap_ST_fsm_state1 = "1";
const sc_lv<4> Loop_g1_proc::ap_ST_fsm_state2 = "10";
const sc_lv<4> Loop_g1_proc::ap_ST_fsm_state3 = "100";
const sc_lv<4> Loop_g1_proc::ap_ST_fsm_state4 = "1000";
const sc_lv<32> Loop_g1_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Loop_g1_proc::ap_const_lv32_2 = "10";
const sc_lv<32> Loop_g1_proc::ap_const_lv32_3 = "11";
const sc_lv<32> Loop_g1_proc::ap_const_lv32_1 = "1";
const sc_lv<4> Loop_g1_proc::ap_const_lv4_0 = "0000";
const sc_lv<1> Loop_g1_proc::ap_const_lv1_0 = "0";
const sc_lv<4> Loop_g1_proc::ap_const_lv4_8 = "1000";
const sc_lv<4> Loop_g1_proc::ap_const_lv4_1 = "1";
const sc_lv<1> Loop_g1_proc::ap_const_lv1_1 = "1";
const bool Loop_g1_proc::ap_const_boolean_1 = true;

Loop_g1_proc::Loop_g1_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_goertzelInterno_simp_fu_79 = new goertzelInterno_simp("grp_goertzelInterno_simp_fu_79");
    grp_goertzelInterno_simp_fu_79->ap_clk(ap_clk);
    grp_goertzelInterno_simp_fu_79->ap_rst(ap_rst);
    grp_goertzelInterno_simp_fu_79->ap_start(grp_goertzelInterno_simp_fu_79_ap_start);
    grp_goertzelInterno_simp_fu_79->ap_done(grp_goertzelInterno_simp_fu_79_ap_done);
    grp_goertzelInterno_simp_fu_79->ap_idle(grp_goertzelInterno_simp_fu_79_ap_idle);
    grp_goertzelInterno_simp_fu_79->ap_ready(grp_goertzelInterno_simp_fu_79_ap_ready);
    grp_goertzelInterno_simp_fu_79->indiceK(j_reg_67);
    grp_goertzelInterno_simp_fu_79->aux_array_V_dout(aux_array_V_dout);
    grp_goertzelInterno_simp_fu_79->aux_array_V_empty_n(aux_array_V_empty_n);
    grp_goertzelInterno_simp_fu_79->aux_array_V_read(grp_goertzelInterno_simp_fu_79_aux_array_V_read);
    grp_goertzelInterno_simp_fu_79->ap_return_0(grp_goertzelInterno_simp_fu_79_ap_return_0);
    grp_goertzelInterno_simp_fu_79->ap_return_1(grp_goertzelInterno_simp_fu_79_ap_return_1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_91_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_aux_array_V_read);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_goertzelInterno_simp_fu_79_aux_array_V_read );

    SC_METHOD(thread_exitcond1_fu_91_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( j_reg_67 );

    SC_METHOD(thread_grp_goertzelInterno_simp_fu_79_ap_start);
    sensitive << ( ap_reg_grp_goertzelInterno_simp_fu_79_ap_start );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_91_p2 );

    SC_METHOD(thread_j_1_fu_97_p2);
    sensitive << ( j_reg_67 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( real_start_status_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( ap_start );
    sensitive << ( start_control_reg );

    SC_METHOD(thread_y_V_blk_n);
    sensitive << ( y_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_y_V_din);
    sensitive << ( y_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( vectorAuxiliar_1_V_reg_120 );
    sensitive << ( grp_goertzelInterno_simp_fu_79_ap_done );
    sensitive << ( grp_goertzelInterno_simp_fu_79_ap_return_0 );

    SC_METHOD(thread_y_V_write);
    sensitive << ( y_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_goertzelInterno_simp_fu_79_ap_done );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( y_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_goertzelInterno_simp_fu_79_ap_done );
    sensitive << ( exitcond1_fu_91_p2 );

    real_start_status_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    start_once_reg = SC_LOGIC_0;
    start_control_reg = SC_LOGIC_0;
    ap_reg_grp_goertzelInterno_simp_fu_79_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_g1_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, aux_array_V_dout, "(port)aux_array_V_dout");
    sc_trace(mVcdFile, aux_array_V_empty_n, "(port)aux_array_V_empty_n");
    sc_trace(mVcdFile, aux_array_V_read, "(port)aux_array_V_read");
    sc_trace(mVcdFile, y_V_din, "(port)y_V_din");
    sc_trace(mVcdFile, y_V_full_n, "(port)y_V_full_n");
    sc_trace(mVcdFile, y_V_write, "(port)y_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, real_start_status_reg, "real_start_status_reg");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, start_control_reg, "start_control_reg");
    sc_trace(mVcdFile, y_V_blk_n, "y_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, j_1_fu_97_p2, "j_1_fu_97_p2");
    sc_trace(mVcdFile, j_1_reg_115, "j_1_reg_115");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, vectorAuxiliar_1_V_reg_120, "vectorAuxiliar_1_V_reg_120");
    sc_trace(mVcdFile, grp_goertzelInterno_simp_fu_79_ap_done, "grp_goertzelInterno_simp_fu_79_ap_done");
    sc_trace(mVcdFile, grp_goertzelInterno_simp_fu_79_ap_start, "grp_goertzelInterno_simp_fu_79_ap_start");
    sc_trace(mVcdFile, grp_goertzelInterno_simp_fu_79_ap_idle, "grp_goertzelInterno_simp_fu_79_ap_idle");
    sc_trace(mVcdFile, grp_goertzelInterno_simp_fu_79_ap_ready, "grp_goertzelInterno_simp_fu_79_ap_ready");
    sc_trace(mVcdFile, grp_goertzelInterno_simp_fu_79_aux_array_V_read, "grp_goertzelInterno_simp_fu_79_aux_array_V_read");
    sc_trace(mVcdFile, grp_goertzelInterno_simp_fu_79_ap_return_0, "grp_goertzelInterno_simp_fu_79_ap_return_0");
    sc_trace(mVcdFile, grp_goertzelInterno_simp_fu_79_ap_return_1, "grp_goertzelInterno_simp_fu_79_ap_return_1");
    sc_trace(mVcdFile, j_reg_67, "j_reg_67");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_reg_grp_goertzelInterno_simp_fu_79_ap_start, "ap_reg_grp_goertzelInterno_simp_fu_79_ap_start");
    sc_trace(mVcdFile, exitcond1_fu_91_p2, "exitcond1_fu_91_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Loop_g1_proc::~Loop_g1_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_goertzelInterno_simp_fu_79;
}

void Loop_g1_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(exitcond1_fu_91_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_goertzelInterno_simp_fu_79_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond1_fu_91_p2.read(), ap_const_lv1_0))) {
            ap_reg_grp_goertzelInterno_simp_fu_79_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_goertzelInterno_simp_fu_79_ap_ready.read())) {
            ap_reg_grp_goertzelInterno_simp_fu_79_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(y_V_full_n.read(), ap_const_logic_1))) {
        j_reg_67 = j_1_reg_115.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        j_reg_67 = ap_const_lv4_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        real_start_status_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(start_full_n.read(), ap_const_logic_1)) {
            real_start_status_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read()))) {
            real_start_status_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_control_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read()) || 
              esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read())))) {
            start_control_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, start_control_reg.read())) {
            start_control_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read())) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        j_1_reg_115 = j_1_fu_97_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, y_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_goertzelInterno_simp_fu_79_ap_done.read())))) {
        vectorAuxiliar_1_V_reg_120 = grp_goertzelInterno_simp_fu_79_ap_return_1.read();
    }
}

void Loop_g1_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_g1_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_g1_proc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Loop_g1_proc::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Loop_g1_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_g1_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_91_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_g1_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_g1_proc::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void Loop_g1_proc::thread_aux_array_V_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        aux_array_V_read = grp_goertzelInterno_simp_fu_79_aux_array_V_read.read();
    } else {
        aux_array_V_read = ap_const_logic_0;
    }
}

void Loop_g1_proc::thread_exitcond1_fu_91_p2() {
    exitcond1_fu_91_p2 = (!j_reg_67.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_67.read() == ap_const_lv4_8);
}

void Loop_g1_proc::thread_grp_goertzelInterno_simp_fu_79_ap_start() {
    grp_goertzelInterno_simp_fu_79_ap_start = ap_reg_grp_goertzelInterno_simp_fu_79_ap_start.read();
}

void Loop_g1_proc::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_91_p2.read(), ap_const_lv1_1))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void Loop_g1_proc::thread_j_1_fu_97_p2() {
    j_1_fu_97_p2 = (!j_reg_67.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_reg_67.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void Loop_g1_proc::thread_real_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, real_start_status_reg.read())) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void Loop_g1_proc::thread_start_out() {
    start_out = real_start.read();
}

void Loop_g1_proc::thread_start_write() {
    start_write = (ap_start.read() & start_control_reg.read());
}

void Loop_g1_proc::thread_y_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        y_V_blk_n = y_V_full_n.read();
    } else {
        y_V_blk_n = ap_const_logic_1;
    }
}

void Loop_g1_proc::thread_y_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(y_V_full_n.read(), ap_const_logic_1))) {
        y_V_din = vectorAuxiliar_1_V_reg_120.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, y_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_goertzelInterno_simp_fu_79_ap_done.read())))) {
        y_V_din = grp_goertzelInterno_simp_fu_79_ap_return_0.read();
    } else {
        y_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void Loop_g1_proc::thread_y_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, y_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_goertzelInterno_simp_fu_79_ap_done.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(y_V_full_n.read(), ap_const_logic_1)))) {
        y_V_write = ap_const_logic_1;
    } else {
        y_V_write = ap_const_logic_0;
    }
}

void Loop_g1_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_91_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, y_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_goertzelInterno_simp_fu_79_ap_done.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(y_V_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}

