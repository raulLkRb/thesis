// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module devuelveAuxArray (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        aux_array_V_din,
        aux_array_V_full_n,
        aux_array_V_write,
        bufIn_0_V_dout,
        bufIn_0_V_empty_n,
        bufIn_0_V_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
output  [31:0] aux_array_V_din;
input   aux_array_V_full_n;
output   aux_array_V_write;
input  [31:0] bufIn_0_V_dout;
input   bufIn_0_V_empty_n;
output   bufIn_0_V_read;

reg ap_done;
reg ap_idle;
reg[31:0] aux_array_V_din;
reg aux_array_V_write;
reg bufIn_0_V_read;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg   [10:0] arrayAuxiliar_V_address0;
reg    arrayAuxiliar_V_ce0;
reg    arrayAuxiliar_V_we0;
wire   [31:0] arrayAuxiliar_V_q0;
wire   [10:0] arrayAuxiliar_V_address1;
reg    arrayAuxiliar_V_ce1;
reg    arrayAuxiliar_V_we1;
reg    aux_array_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_reg_147;
wire    ap_CS_fsm_state4;
reg    bufIn_0_V_blk_n;
reg   [10:0] i_reg_113;
wire   [0:0] exitcond_fu_125_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_flag00011001;
wire   [10:0] i_2_fu_131_p2;
reg   [10:0] i_2_reg_151;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [10:0] i_phi_fu_117_p4;
wire   [31:0] i_2_cast_fu_137_p1;
wire   [31:0] i_cast2_fu_142_p1;
reg    ap_block_state4;
reg    ap_block_pp0_stage0_flag00001001;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

devuelveAuxArray_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
arrayAuxiliar_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(arrayAuxiliar_V_address0),
    .ce0(arrayAuxiliar_V_ce0),
    .we0(arrayAuxiliar_V_we0),
    .d0(bufIn_0_V_dout),
    .q0(arrayAuxiliar_V_q0),
    .address1(arrayAuxiliar_V_address1),
    .ce1(arrayAuxiliar_V_ce1),
    .we1(arrayAuxiliar_V_we1),
    .d1(arrayAuxiliar_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == aux_array_V_full_n) | (1'b0 == bufIn_0_V_empty_n)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_147 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_reg_113 <= i_2_reg_151;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        i_reg_113 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        exitcond_reg_147 <= exitcond_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        i_2_reg_151 <= i_2_fu_131_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_125_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == aux_array_V_full_n) | (1'b0 == bufIn_0_V_empty_n)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        arrayAuxiliar_V_address0 = 11'd2047;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        arrayAuxiliar_V_address0 = i_2_cast_fu_137_p1;
    end else begin
        arrayAuxiliar_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == aux_array_V_full_n) | (1'b0 == bufIn_0_V_empty_n))))) begin
        arrayAuxiliar_V_ce0 = 1'b1;
    end else begin
        arrayAuxiliar_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        arrayAuxiliar_V_ce1 = 1'b1;
    end else begin
        arrayAuxiliar_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == aux_array_V_full_n) | (1'b0 == bufIn_0_V_empty_n)))) begin
        arrayAuxiliar_V_we0 = 1'b1;
    end else begin
        arrayAuxiliar_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_147 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        arrayAuxiliar_V_we1 = 1'b1;
    end else begin
        arrayAuxiliar_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_reg_147 == 1'd0)) | (1'b1 == ap_CS_fsm_state4))) begin
        aux_array_V_blk_n = aux_array_V_full_n;
    end else begin
        aux_array_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == aux_array_V_full_n) | (1'b0 == bufIn_0_V_empty_n)))) begin
        aux_array_V_din = bufIn_0_V_dout;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_147 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0))) begin
        aux_array_V_din = arrayAuxiliar_V_q0;
    end else begin
        aux_array_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_147 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == aux_array_V_full_n) | (1'b0 == bufIn_0_V_empty_n))))) begin
        aux_array_V_write = 1'b1;
    end else begin
        aux_array_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bufIn_0_V_blk_n = bufIn_0_V_empty_n;
    end else begin
        bufIn_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == aux_array_V_full_n) | (1'b0 == bufIn_0_V_empty_n)))) begin
        bufIn_0_V_read = 1'b1;
    end else begin
        bufIn_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_reg_147 == 1'd0))) begin
        i_phi_fu_117_p4 = i_2_reg_151;
    end else begin
        i_phi_fu_117_p4 = i_reg_113;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == aux_array_V_full_n) | (1'b0 == bufIn_0_V_empty_n)))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_125_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_125_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == aux_array_V_full_n) | (1'b0 == bufIn_0_V_empty_n)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_147 == 1'd0) & (1'b0 == aux_array_V_full_n));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_147 == 1'd0) & (1'b0 == aux_array_V_full_n));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_147 == 1'd0) & (1'b0 == aux_array_V_full_n));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_reg_147 == 1'd0) & (1'b0 == aux_array_V_full_n));
end

always @ (*) begin
    ap_block_state4 = ((1'b0 == aux_array_V_full_n) | (1'b0 == bufIn_0_V_empty_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign arrayAuxiliar_V_address1 = i_cast2_fu_142_p1;

assign exitcond_fu_125_p2 = ((i_phi_fu_117_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign i_2_cast_fu_137_p1 = i_2_fu_131_p2;

assign i_2_fu_131_p2 = (i_phi_fu_117_p4 + 11'd1);

assign i_cast2_fu_142_p1 = i_reg_113;

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

endmodule //devuelveAuxArray
