// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module goertzelInterno_simp (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        indiceK,
        aux_array_V_dout,
        aux_array_V_empty_n,
        aux_array_V_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] indiceK;
input  [31:0] aux_array_V_dout;
input   aux_array_V_empty_n;
output   aux_array_V_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg aux_array_V_read;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] REAL_PARTE_W_V_address0;
reg    REAL_PARTE_W_V_ce0;
wire   [29:0] REAL_PARTE_W_V_q0;
wire   [2:0] IMAGINARIO_W_V_address0;
reg    IMAGINARIO_W_V_ce0;
wire   [30:0] IMAGINARIO_W_V_q0;
reg    aux_array_V_blk_n;
wire    ap_CS_fsm_state8;
wire   [96:0] grp_fu_184_p2;
reg   [96:0] reg_201;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire   [31:0] indiceK_cast1_fu_205_p1;
reg   [31:0] indiceK_cast1_reg_772;
wire   [96:0] OP1_V_1_cast_fu_214_p1;
reg   [96:0] OP1_V_1_cast_reg_782;
wire    ap_CS_fsm_state2;
wire   [10:0] i_1_fu_224_p2;
reg   [10:0] i_1_reg_791;
wire    ap_CS_fsm_state3;
wire  signed [96:0] OP2_V_1_cast_fu_230_p1;
wire   [0:0] exitcond_fu_218_p2;
wire  signed [96:0] OP2_V_cast3_fu_235_p1;
wire   [97:0] p_Val2_7_fu_274_p2;
reg   [97:0] p_Val2_7_reg_811;
wire   [63:0] p_Val2_20_fu_345_p2;
wire    ap_CS_fsm_state9;
reg   [30:0] IMAGINARIO_W_V_load_reg_825;
wire    ap_CS_fsm_state10;
wire  signed [94:0] OP2_V_cast_fu_351_p1;
wire    ap_CS_fsm_state11;
wire   [94:0] OP1_V_2_cast_fu_356_p1;
wire   [0:0] tmp_6_fu_396_p2;
reg   [0:0] tmp_6_reg_840;
wire    ap_CS_fsm_state14;
wire   [63:0] p_Val2_2_fu_429_p2;
reg   [63:0] p_Val2_2_reg_845;
wire   [0:0] tmp_10_fu_471_p2;
reg   [0:0] tmp_10_reg_851;
reg   [30:0] tmp_13_reg_856;
wire    ap_CS_fsm_state16;
wire   [0:0] tmp_28_fu_554_p2;
reg   [0:0] tmp_28_reg_861;
wire   [63:0] p_Val2_10_fu_571_p2;
reg   [63:0] p_Val2_10_reg_866;
wire    ap_CS_fsm_state17;
wire   [0:0] tmp_21_fu_613_p2;
reg   [0:0] tmp_21_reg_872;
wire   [63:0] p_Val2_15_fu_650_p2;
reg   [63:0] p_Val2_15_reg_877;
wire   [0:0] tmp_34_fu_692_p2;
reg   [0:0] tmp_34_reg_883;
reg   [63:0] p_Val2_6_reg_148;
reg   [63:0] d2_V_reg_160;
reg   [10:0] i_reg_173;
reg  signed [63:0] grp_fu_184_p0;
reg  signed [63:0] grp_fu_184_p1;
wire  signed [32:0] REAL_PARTE_W_V_load_s_fu_210_p1;
wire   [95:0] tmp_2_fu_240_p3;
wire  signed [97:0] tmp_8_cast_fu_252_p1;
wire  signed [97:0] tmp_2_cast_fu_248_p1;
wire   [95:0] tmp_12_fu_262_p3;
wire   [97:0] p_Val2_5_fu_256_p2;
wire  signed [97:0] tmp_12_cast_fu_270_p1;
wire   [0:0] tmp_51_fu_303_p1;
wire   [0:0] tmp_50_fu_296_p3;
wire   [29:0] tmp_37_fu_312_p4;
wire   [0:0] tmp_36_fu_306_p2;
wire   [30:0] tmp_38_fu_321_p3;
wire   [0:0] tmp_18_fu_329_p2;
wire   [0:0] signbit_5_fu_280_p3;
wire   [0:0] qb_assign_1_fu_335_p2;
wire   [63:0] p_Val2_8_fu_287_p4;
wire   [63:0] tmp_19_fu_341_p1;
wire   [0:0] tmp_8_fu_368_p1;
wire   [0:0] tmp_fu_360_p3;
wire   [29:0] tmp_4_fu_378_p4;
wire   [0:0] tmp_3_fu_372_p2;
wire   [30:0] tmp_5_fu_388_p3;
wire   [0:0] signbit_fu_402_p3;
wire   [0:0] qb_assign_fu_420_p2;
wire   [63:0] tmp_7_fu_425_p1;
wire   [63:0] p_Val2_1_fu_410_p4;
wire   [0:0] tmp_31_fu_443_p1;
wire   [0:0] tmp_25_fu_435_p3;
wire   [29:0] tmp_1_fu_453_p4;
wire   [0:0] tmp_s_fu_447_p2;
wire   [30:0] tmp_9_fu_463_p3;
wire   [0:0] signbit_1_fu_477_p3;
wire   [0:0] qb_assign_2_fu_493_p2;
wire   [31:0] tmp_11_fu_498_p1;
wire   [31:0] p_Val2_3_fu_484_p4;
wire   [31:0] p_Val2_9_fu_502_p2;
wire   [94:0] tmp_44_fu_518_p1;
wire   [94:0] tmp_45_fu_526_p0;
wire   [0:0] tmp_45_fu_526_p1;
wire   [0:0] tmp_44_fu_518_p3;
wire   [94:0] tmp_26_fu_536_p1;
wire   [29:0] tmp_26_fu_536_p4;
wire   [0:0] tmp_24_fu_530_p2;
wire   [30:0] tmp_27_fu_546_p3;
wire   [62:0] tmp_14_fu_560_p3;
wire  signed [63:0] tmp_15_fu_567_p1;
wire   [0:0] tmp_42_fu_585_p1;
wire   [0:0] tmp_41_fu_577_p3;
wire   [29:0] tmp_17_fu_595_p4;
wire   [0:0] tmp_16_fu_589_p2;
wire   [30:0] tmp_20_fu_605_p3;
wire   [94:0] signbit_3_fu_619_p1;
wire   [94:0] tmp_23_fu_627_p1;
wire   [62:0] tmp_23_fu_627_p4;
wire   [0:0] signbit_3_fu_619_p3;
wire   [0:0] qb_assign_4_fu_641_p2;
wire   [63:0] tmp_29_fu_646_p1;
wire  signed [63:0] p_Val2_14_fu_637_p1;
wire   [0:0] tmp_48_fu_664_p1;
wire   [0:0] tmp_47_fu_656_p3;
wire   [29:0] tmp_32_fu_674_p4;
wire   [0:0] tmp_30_fu_668_p2;
wire   [30:0] tmp_33_fu_684_p3;
wire    ap_CS_fsm_state18;
wire   [0:0] signbit_2_fu_698_p3;
wire   [0:0] qb_assign_3_fu_714_p2;
wire   [31:0] tmp_22_fu_719_p1;
wire   [31:0] p_Val2_11_fu_705_p4;
wire   [0:0] signbit_4_fu_729_p3;
wire   [0:0] qb_assign_5_fu_745_p2;
wire   [31:0] tmp_35_fu_750_p1;
wire   [31:0] p_Val2_16_fu_736_p4;
wire   [31:0] p_Val2_12_fu_723_p2;
wire   [31:0] p_Val2_17_fu_754_p2;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

goertzelInterno_scud #(
    .DataWidth( 30 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
REAL_PARTE_W_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(REAL_PARTE_W_V_address0),
    .ce0(REAL_PARTE_W_V_ce0),
    .q0(REAL_PARTE_W_V_q0)
);

goertzelInterno_sdEe #(
    .DataWidth( 31 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
IMAGINARIO_W_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(IMAGINARIO_W_V_address0),
    .ce0(IMAGINARIO_W_V_ce0),
    .q0(IMAGINARIO_W_V_q0)
);

goertzel_algoritheOg #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 97 ))
goertzel_algoritheOg_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_184_p0),
    .din1(grp_fu_184_p1),
    .ce(1'b1),
    .dout(grp_fu_184_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        d2_V_reg_160 <= p_Val2_20_fu_345_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        d2_V_reg_160 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_173 <= i_1_reg_791;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_173 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Val2_6_reg_148 <= d2_V_reg_160;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_Val2_6_reg_148 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        IMAGINARIO_W_V_load_reg_825 <= IMAGINARIO_W_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OP1_V_1_cast_reg_782[32 : 0] <= OP1_V_1_cast_fu_214_p1[32 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_791 <= i_1_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indiceK_cast1_reg_772[3 : 0] <= indiceK_cast1_fu_205_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_Val2_10_reg_866 <= p_Val2_10_fu_571_p2;
        p_Val2_15_reg_877 <= p_Val2_15_fu_650_p2;
        tmp_21_reg_872 <= tmp_21_fu_613_p2;
        tmp_34_reg_883 <= tmp_34_fu_692_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        p_Val2_2_reg_845 <= p_Val2_2_fu_429_p2;
        tmp_10_reg_851 <= tmp_10_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (aux_array_V_empty_n == 1'b1))) begin
        p_Val2_7_reg_811 <= p_Val2_7_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_201 <= grp_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_13_reg_856 <= {{p_Val2_9_fu_502_p2[31:1]}};
        tmp_28_reg_861 <= tmp_28_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_6_reg_840 <= tmp_6_fu_396_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        IMAGINARIO_W_V_ce0 = 1'b1;
    end else begin
        IMAGINARIO_W_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        REAL_PARTE_W_V_ce0 = 1'b1;
    end else begin
        REAL_PARTE_W_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state18))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        aux_array_V_blk_n = aux_array_V_empty_n;
    end else begin
        aux_array_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (aux_array_V_empty_n == 1'b1))) begin
        aux_array_V_read = 1'b1;
    end else begin
        aux_array_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_184_p0 = OP1_V_2_cast_fu_356_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_218_p2 == 1'd1))) begin
        grp_fu_184_p0 = OP1_V_1_cast_reg_782;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_218_p2 == 1'd0))) begin
        grp_fu_184_p0 = OP2_V_1_cast_fu_230_p1;
    end else begin
        grp_fu_184_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_184_p1 = OP2_V_cast_fu_351_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_218_p2 == 1'd1))) begin
        grp_fu_184_p1 = OP2_V_cast3_fu_235_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_218_p2 == 1'd0))) begin
        grp_fu_184_p1 = OP1_V_1_cast_reg_782;
    end else begin
        grp_fu_184_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_218_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (aux_array_V_empty_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IMAGINARIO_W_V_address0 = indiceK_cast1_reg_772;

assign OP1_V_1_cast_fu_214_p1 = $unsigned(REAL_PARTE_W_V_load_s_fu_210_p1);

assign OP1_V_2_cast_fu_356_p1 = IMAGINARIO_W_V_load_reg_825;

assign OP2_V_1_cast_fu_230_p1 = $signed(d2_V_reg_160);

assign OP2_V_cast3_fu_235_p1 = $signed(d2_V_reg_160);

assign OP2_V_cast_fu_351_p1 = $signed(d2_V_reg_160);

assign REAL_PARTE_W_V_address0 = indiceK_cast1_fu_205_p1;

assign REAL_PARTE_W_V_load_s_fu_210_p1 = $signed(REAL_PARTE_W_V_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return_0 = p_Val2_12_fu_723_p2;

assign ap_return_1 = p_Val2_17_fu_754_p2;

assign exitcond_fu_218_p2 = ((i_reg_173 == 11'd2047) ? 1'b1 : 1'b0);

assign i_1_fu_224_p2 = (i_reg_173 + 11'd1);

assign indiceK_cast1_fu_205_p1 = indiceK;

assign p_Val2_10_fu_571_p2 = ($signed(tmp_15_fu_567_p1) - $signed(p_Val2_6_reg_148));

assign p_Val2_11_fu_705_p4 = {{p_Val2_10_reg_866[63:32]}};

assign p_Val2_12_fu_723_p2 = (tmp_22_fu_719_p1 + p_Val2_11_fu_705_p4);

assign p_Val2_14_fu_637_p1 = $signed(tmp_23_fu_627_p4);

assign p_Val2_15_fu_650_p2 = ($signed(tmp_29_fu_646_p1) + $signed(p_Val2_14_fu_637_p1));

assign p_Val2_16_fu_736_p4 = {{p_Val2_15_reg_877[63:32]}};

assign p_Val2_17_fu_754_p2 = (tmp_35_fu_750_p1 + p_Val2_16_fu_736_p4);

assign p_Val2_1_fu_410_p4 = {{reg_201[95:32]}};

assign p_Val2_20_fu_345_p2 = (p_Val2_8_fu_287_p4 + tmp_19_fu_341_p1);

assign p_Val2_2_fu_429_p2 = (tmp_7_fu_425_p1 + p_Val2_1_fu_410_p4);

assign p_Val2_3_fu_484_p4 = {{p_Val2_2_reg_845[63:32]}};

assign p_Val2_5_fu_256_p2 = ($signed(tmp_8_cast_fu_252_p1) + $signed(tmp_2_cast_fu_248_p1));

assign p_Val2_7_fu_274_p2 = ($signed(p_Val2_5_fu_256_p2) - $signed(tmp_12_cast_fu_270_p1));

assign p_Val2_8_fu_287_p4 = {{p_Val2_7_reg_811[95:32]}};

assign p_Val2_9_fu_502_p2 = (tmp_11_fu_498_p1 + p_Val2_3_fu_484_p4);

assign qb_assign_1_fu_335_p2 = (tmp_18_fu_329_p2 & signbit_5_fu_280_p3);

assign qb_assign_2_fu_493_p2 = (tmp_10_reg_851 & signbit_1_fu_477_p3);

assign qb_assign_3_fu_714_p2 = (tmp_21_reg_872 & signbit_2_fu_698_p3);

assign qb_assign_4_fu_641_p2 = (tmp_28_reg_861 & signbit_3_fu_619_p3);

assign qb_assign_5_fu_745_p2 = (tmp_34_reg_883 & signbit_4_fu_729_p3);

assign qb_assign_fu_420_p2 = (tmp_6_reg_840 & signbit_fu_402_p3);

assign signbit_1_fu_477_p3 = p_Val2_2_reg_845[32'd63];

assign signbit_2_fu_698_p3 = p_Val2_10_reg_866[32'd63];

assign signbit_3_fu_619_p1 = reg_201;

assign signbit_3_fu_619_p3 = signbit_3_fu_619_p1[32'd94];

assign signbit_4_fu_729_p3 = p_Val2_15_reg_877[32'd63];

assign signbit_5_fu_280_p3 = p_Val2_7_reg_811[32'd97];

assign signbit_fu_402_p3 = reg_201[32'd96];

assign tmp_10_fu_471_p2 = ((tmp_9_fu_463_p3 != 31'd0) ? 1'b1 : 1'b0);

assign tmp_11_fu_498_p1 = qb_assign_2_fu_493_p2;

assign tmp_12_cast_fu_270_p1 = $signed(tmp_12_fu_262_p3);

assign tmp_12_fu_262_p3 = {{p_Val2_6_reg_148}, {32'd0}};

assign tmp_14_fu_560_p3 = {{tmp_13_reg_856}, {32'd0}};

assign tmp_15_fu_567_p1 = $signed(tmp_14_fu_560_p3);

assign tmp_16_fu_589_p2 = (tmp_42_fu_585_p1 | tmp_41_fu_577_p3);

assign tmp_17_fu_595_p4 = {{p_Val2_10_fu_571_p2[30:1]}};

assign tmp_18_fu_329_p2 = ((tmp_38_fu_321_p3 != 31'd0) ? 1'b1 : 1'b0);

assign tmp_19_fu_341_p1 = qb_assign_1_fu_335_p2;

assign tmp_1_fu_453_p4 = {{p_Val2_2_fu_429_p2[30:1]}};

assign tmp_20_fu_605_p3 = {{tmp_17_fu_595_p4}, {tmp_16_fu_589_p2}};

assign tmp_21_fu_613_p2 = ((tmp_20_fu_605_p3 != 31'd0) ? 1'b1 : 1'b0);

assign tmp_22_fu_719_p1 = qb_assign_3_fu_714_p2;

assign tmp_23_fu_627_p1 = reg_201;

assign tmp_23_fu_627_p4 = {{tmp_23_fu_627_p1[94:32]}};

assign tmp_24_fu_530_p2 = (tmp_45_fu_526_p1 | tmp_44_fu_518_p3);

assign tmp_25_fu_435_p3 = p_Val2_2_fu_429_p2[32'd31];

assign tmp_26_fu_536_p1 = reg_201;

assign tmp_26_fu_536_p4 = {{tmp_26_fu_536_p1[30:1]}};

assign tmp_27_fu_546_p3 = {{tmp_26_fu_536_p4}, {tmp_24_fu_530_p2}};

assign tmp_28_fu_554_p2 = ((tmp_27_fu_546_p3 != 31'd0) ? 1'b1 : 1'b0);

assign tmp_29_fu_646_p1 = qb_assign_4_fu_641_p2;

assign tmp_2_cast_fu_248_p1 = $signed(tmp_2_fu_240_p3);

assign tmp_2_fu_240_p3 = {{aux_array_V_dout}, {64'd0}};

assign tmp_30_fu_668_p2 = (tmp_48_fu_664_p1 | tmp_47_fu_656_p3);

assign tmp_31_fu_443_p1 = p_Val2_2_fu_429_p2[0:0];

assign tmp_32_fu_674_p4 = {{p_Val2_15_fu_650_p2[30:1]}};

assign tmp_33_fu_684_p3 = {{tmp_32_fu_674_p4}, {tmp_30_fu_668_p2}};

assign tmp_34_fu_692_p2 = ((tmp_33_fu_684_p3 != 31'd0) ? 1'b1 : 1'b0);

assign tmp_35_fu_750_p1 = qb_assign_5_fu_745_p2;

assign tmp_36_fu_306_p2 = (tmp_51_fu_303_p1 | tmp_50_fu_296_p3);

assign tmp_37_fu_312_p4 = {{p_Val2_7_reg_811[30:1]}};

assign tmp_38_fu_321_p3 = {{tmp_37_fu_312_p4}, {tmp_36_fu_306_p2}};

assign tmp_3_fu_372_p2 = (tmp_8_fu_368_p1 | tmp_fu_360_p3);

assign tmp_41_fu_577_p3 = p_Val2_10_fu_571_p2[32'd31];

assign tmp_42_fu_585_p1 = p_Val2_10_fu_571_p2[0:0];

assign tmp_44_fu_518_p1 = reg_201;

assign tmp_44_fu_518_p3 = tmp_44_fu_518_p1[32'd31];

assign tmp_45_fu_526_p0 = reg_201;

assign tmp_45_fu_526_p1 = tmp_45_fu_526_p0[0:0];

assign tmp_47_fu_656_p3 = p_Val2_15_fu_650_p2[32'd31];

assign tmp_48_fu_664_p1 = p_Val2_15_fu_650_p2[0:0];

assign tmp_4_fu_378_p4 = {{reg_201[30:1]}};

assign tmp_50_fu_296_p3 = p_Val2_7_reg_811[32'd31];

assign tmp_51_fu_303_p1 = p_Val2_7_reg_811[0:0];

assign tmp_5_fu_388_p3 = {{tmp_4_fu_378_p4}, {tmp_3_fu_372_p2}};

assign tmp_6_fu_396_p2 = ((tmp_5_fu_388_p3 != 31'd0) ? 1'b1 : 1'b0);

assign tmp_7_fu_425_p1 = qb_assign_fu_420_p2;

assign tmp_8_cast_fu_252_p1 = $signed(reg_201);

assign tmp_8_fu_368_p1 = reg_201[0:0];

assign tmp_9_fu_463_p3 = {{tmp_1_fu_453_p4}, {tmp_s_fu_447_p2}};

assign tmp_fu_360_p3 = reg_201[32'd31];

assign tmp_s_fu_447_p2 = (tmp_31_fu_443_p1 | tmp_25_fu_435_p3);

always @ (posedge ap_clk) begin
    indiceK_cast1_reg_772[31:4] <= 28'b0000000000000000000000000000;
    OP1_V_1_cast_reg_782[96:33] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //goertzelInterno_simp
