

================================================================
== Vivado HLS Report for 'goertzel_algorithm_simpler'
================================================================
* Date:           Tue Jul 14 13:29:08 2020

* Version:        2017.1 (Build 1846317 on Fri Apr 14 19:19:38 MDT 2017)
* Project:        ALG
* Solution:       solution22
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.62|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +--------+--------+--------+--------+----------+
    |     Latency     |     Interval    | Pipeline |
    |   min  |   max  |   min  |   max  |   Type   |
    +--------+--------+--------+--------+----------+
    |  114745|  114745|  114746|  114746| dataflow |
    +--------+--------+--------+--------+----------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 10
* Pipeline: 0
* Dataflow Pipeline: 1
  DF-Pipeline-0: Size = 10, States = { 1 2 3 4 5 6 7 8 9 10 }

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
* FSM state operations: 

 <State 1>: 0.00ns
ST_1: bufIn_0_V (18)  [1/1] 0.00ns  loc: axi_algorithm.cpp:93
arrayctor.loop1.preheader:0  %bufIn_0_V = alloca i32, align 4

ST_1: aux_array_V (35)  [1/1] 0.00ns  loc: axi_algorithm.cpp:91
arrayctor.loop1.preheader:17  %aux_array_V = alloca i32, align 4

ST_1: y_V (38)  [1/1] 0.00ns  loc: axi_algorithm.cpp:99
arrayctor.loop1.preheader:20  %y_V = alloca i32, align 4


 <State 2>: 0.00ns
ST_2: StgValue_14 (44)  [2/2] 0.00ns  loc: axi_algorithm.cpp:102
arrayctor.loop1.preheader:26  call fastcc void @read_data(i32* %input_AX_ALG_data_V, i4* %input_AX_ALG_keep_V, i4* %input_AX_ALG_strb_V, i4* %input_AX_ALG_user_V, i1* %input_AX_ALG_last_V, i5* %input_AX_ALG_id_V, i5* %input_AX_ALG_dest_V, i32* %bufIn_0_V)


 <State 3>: 0.00ns
ST_3: StgValue_15 (44)  [1/2] 0.00ns  loc: axi_algorithm.cpp:102
arrayctor.loop1.preheader:26  call fastcc void @read_data(i32* %input_AX_ALG_data_V, i4* %input_AX_ALG_keep_V, i4* %input_AX_ALG_strb_V, i4* %input_AX_ALG_user_V, i1* %input_AX_ALG_last_V, i5* %input_AX_ALG_id_V, i5* %input_AX_ALG_dest_V, i32* %bufIn_0_V)


 <State 4>: 0.00ns
ST_4: StgValue_16 (47)  [2/2] 0.00ns  loc: axi_algorithm.cpp:104
arrayctor.loop1.preheader:29  call fastcc void @devuelveAuxArray(i32* %aux_array_V, i32* %bufIn_0_V)


 <State 5>: 0.00ns
ST_5: StgValue_17 (47)  [1/2] 0.00ns  loc: axi_algorithm.cpp:104
arrayctor.loop1.preheader:29  call fastcc void @devuelveAuxArray(i32* %aux_array_V, i32* %bufIn_0_V)


 <State 6>: 0.00ns
ST_6: StgValue_18 (50)  [2/2] 0.00ns
arrayctor.loop1.preheader:32  call fastcc void @Loop_g1_proc(i32* %aux_array_V, i32* %y_V)


 <State 7>: 0.00ns
ST_7: StgValue_19 (50)  [1/2] 0.00ns
arrayctor.loop1.preheader:32  call fastcc void @Loop_g1_proc(i32* %aux_array_V, i32* %y_V)


 <State 8>: 0.00ns
ST_8: StgValue_20 (53)  [2/2] 0.00ns
arrayctor.loop1.preheader:35  call fastcc void @Loop_2_proc(i32* %y_V, i32* %output_AX_ALG_data_V, i4* %output_AX_ALG_keep_V, i4* %output_AX_ALG_strb_V, i4* %output_AX_ALG_user_V, i1* %output_AX_ALG_last_V, i5* %output_AX_ALG_id_V, i5* %output_AX_ALG_dest_V)


 <State 9>: 0.00ns
ST_9: StgValue_21 (53)  [1/2] 0.00ns
arrayctor.loop1.preheader:35  call fastcc void @Loop_2_proc(i32* %y_V, i32* %output_AX_ALG_data_V, i4* %output_AX_ALG_keep_V, i4* %output_AX_ALG_strb_V, i4* %output_AX_ALG_user_V, i1* %output_AX_ALG_last_V, i5* %output_AX_ALG_id_V, i5* %output_AX_ALG_dest_V)


 <State 10>: 0.00ns
ST_10: StgValue_22 (19)  [1/1] 0.00ns  loc: axi_algorithm.cpp:84
arrayctor.loop1.preheader:1  call void (...)* @_ssdm_op_SpecDataflowPipeline(i32 -1, [1 x i8]* @p_str3) nounwind

ST_10: StgValue_23 (20)  [1/1] 0.00ns
arrayctor.loop1.preheader:2  call void (...)* @_ssdm_op_SpecBitsMap(i32* %input_AX_ALG_data_V), !map !129

ST_10: StgValue_24 (21)  [1/1] 0.00ns
arrayctor.loop1.preheader:3  call void (...)* @_ssdm_op_SpecBitsMap(i4* %input_AX_ALG_keep_V), !map !133

ST_10: StgValue_25 (22)  [1/1] 0.00ns
arrayctor.loop1.preheader:4  call void (...)* @_ssdm_op_SpecBitsMap(i4* %input_AX_ALG_strb_V), !map !137

ST_10: StgValue_26 (23)  [1/1] 0.00ns
arrayctor.loop1.preheader:5  call void (...)* @_ssdm_op_SpecBitsMap(i4* %input_AX_ALG_user_V), !map !141

ST_10: StgValue_27 (24)  [1/1] 0.00ns
arrayctor.loop1.preheader:6  call void (...)* @_ssdm_op_SpecBitsMap(i1* %input_AX_ALG_last_V), !map !145

ST_10: StgValue_28 (25)  [1/1] 0.00ns
arrayctor.loop1.preheader:7  call void (...)* @_ssdm_op_SpecBitsMap(i5* %input_AX_ALG_id_V), !map !149

ST_10: StgValue_29 (26)  [1/1] 0.00ns
arrayctor.loop1.preheader:8  call void (...)* @_ssdm_op_SpecBitsMap(i5* %input_AX_ALG_dest_V), !map !153

ST_10: StgValue_30 (27)  [1/1] 0.00ns
arrayctor.loop1.preheader:9  call void (...)* @_ssdm_op_SpecBitsMap(i32* %output_AX_ALG_data_V), !map !157

ST_10: StgValue_31 (28)  [1/1] 0.00ns
arrayctor.loop1.preheader:10  call void (...)* @_ssdm_op_SpecBitsMap(i4* %output_AX_ALG_keep_V), !map !163

ST_10: StgValue_32 (29)  [1/1] 0.00ns
arrayctor.loop1.preheader:11  call void (...)* @_ssdm_op_SpecBitsMap(i4* %output_AX_ALG_strb_V), !map !167

ST_10: StgValue_33 (30)  [1/1] 0.00ns
arrayctor.loop1.preheader:12  call void (...)* @_ssdm_op_SpecBitsMap(i4* %output_AX_ALG_user_V), !map !171

ST_10: StgValue_34 (31)  [1/1] 0.00ns
arrayctor.loop1.preheader:13  call void (...)* @_ssdm_op_SpecBitsMap(i1* %output_AX_ALG_last_V), !map !175

ST_10: StgValue_35 (32)  [1/1] 0.00ns
arrayctor.loop1.preheader:14  call void (...)* @_ssdm_op_SpecBitsMap(i5* %output_AX_ALG_id_V), !map !179

ST_10: StgValue_36 (33)  [1/1] 0.00ns
arrayctor.loop1.preheader:15  call void (...)* @_ssdm_op_SpecBitsMap(i5* %output_AX_ALG_dest_V), !map !183

ST_10: StgValue_37 (34)  [1/1] 0.00ns
arrayctor.loop1.preheader:16  call void (...)* @_ssdm_op_SpecTopModule([27 x i8]* @goertzel_algorithm_s) nounwind

ST_10: empty (36)  [1/1] 0.00ns
arrayctor.loop1.preheader:18  %empty = call i32 (...)* @_ssdm_op_SpecChannel([20 x i8]* @aux_array_OC_V_OC_ch, i32 1, [1 x i8]* @p_str108, [1 x i8]* @p_str108, i32 4, i32 2048, i32* %aux_array_V, i32* %aux_array_V)

ST_10: StgValue_39 (37)  [1/1] 0.00ns
arrayctor.loop1.preheader:19  call void (...)* @_ssdm_op_SpecInterface(i32* %aux_array_V, [8 x i8]* @ap_fifo_str, i32 0, i32 0, [1 x i8]* @p_str109, i32 0, i32 0, [1 x i8]* @p_str110, [1 x i8]* @p_str111, [1 x i8]* @p_str112, i32 2, i32 2, i32 16, i32 16, [1 x i8]* @p_str113, [1 x i8]* @p_str114)

ST_10: empty_15 (39)  [1/1] 0.00ns
arrayctor.loop1.preheader:21  %empty_15 = call i32 (...)* @_ssdm_op_SpecChannel([12 x i8]* @y_OC_V_OC_channel_st, i32 1, [1 x i8]* @p_str101, [1 x i8]* @p_str101, i32 4, i32 16, i32* %y_V, i32* %y_V)

ST_10: StgValue_41 (40)  [1/1] 0.00ns
arrayctor.loop1.preheader:22  call void (...)* @_ssdm_op_SpecInterface(i32* %y_V, [8 x i8]* @ap_fifo_str, i32 0, i32 0, [1 x i8]* @p_str102, i32 0, i32 0, [1 x i8]* @p_str103, [1 x i8]* @p_str104, [1 x i8]* @p_str105, i32 2, i32 2, i32 16, i32 16, [1 x i8]* @p_str106, [1 x i8]* @p_str107)

ST_10: StgValue_42 (41)  [1/1] 0.00ns  loc: axi_algorithm.cpp:85
arrayctor.loop1.preheader:23  call void (...)* @_ssdm_op_SpecInterface(i32 0, [13 x i8]* @p_str6, i32 0, i32 0, [1 x i8]* @p_str3, i32 0, i32 0, [12 x i8]* @p_str7, [1 x i8]* @p_str3, [1 x i8]* @p_str3, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str3, [1 x i8]* @p_str3) nounwind

ST_10: StgValue_43 (42)  [1/1] 0.00ns
arrayctor.loop1.preheader:24  call void (...)* @_ssdm_op_SpecInterface(i32* %input_AX_ALG_data_V, i4* %input_AX_ALG_keep_V, i4* %input_AX_ALG_strb_V, i4* %input_AX_ALG_user_V, i1* %input_AX_ALG_last_V, i5* %input_AX_ALG_id_V, i5* %input_AX_ALG_dest_V, [5 x i8]* @p_str8, i32 1, i32 1, [5 x i8]* @p_str9, i32 0, i32 0, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str3, [1 x i8]* @p_str3)

ST_10: StgValue_44 (43)  [1/1] 0.00ns
arrayctor.loop1.preheader:25  call void (...)* @_ssdm_op_SpecInterface(i32* %output_AX_ALG_data_V, i4* %output_AX_ALG_keep_V, i4* %output_AX_ALG_strb_V, i4* %output_AX_ALG_user_V, i1* %output_AX_ALG_last_V, i5* %output_AX_ALG_id_V, i5* %output_AX_ALG_dest_V, [5 x i8]* @p_str8, i32 1, i32 1, [5 x i8]* @p_str9, i32 0, i32 0, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str3, [1 x i8]* @p_str3)

ST_10: empty_16 (45)  [1/1] 0.00ns
arrayctor.loop1.preheader:27  %empty_16 = call i32 (...)* @_ssdm_op_SpecChannel([19 x i8]* @bufIn_LF_0_NF_OC_V_s, i32 1, [1 x i8]* @p_str38, [1 x i8]* @p_str38, i32 4, i32 0, i32* %bufIn_0_V, i32* %bufIn_0_V)

ST_10: StgValue_46 (46)  [1/1] 0.00ns
arrayctor.loop1.preheader:28  call void (...)* @_ssdm_op_SpecInterface(i32* %bufIn_0_V, [8 x i8]* @ap_fifo_str, i32 0, i32 0, [1 x i8]* @p_str39, i32 0, i32 0, [1 x i8]* @p_str40, [1 x i8]* @p_str41, [1 x i8]* @p_str42, i32 2, i32 2, i32 16, i32 16, [1 x i8]* @p_str43, [1 x i8]* @p_str44)

ST_10: empty_17 (48)  [1/1] 0.00ns
arrayctor.loop1.preheader:30  %empty_17 = call i32 (...)* @_ssdm_op_SpecChannel([12 x i8]* @aux_array_OC_V_str, i32 1, [1 x i8]* @p_str45, [1 x i8]* @p_str45, i32 4, i32 2048, i32* %aux_array_V, i32* %aux_array_V)

ST_10: StgValue_48 (49)  [1/1] 0.00ns
arrayctor.loop1.preheader:31  call void (...)* @_ssdm_op_SpecInterface(i32* %aux_array_V, [8 x i8]* @ap_fifo_str, i32 0, i32 0, [1 x i8]* @p_str46, i32 0, i32 0, [1 x i8]* @p_str47, [1 x i8]* @p_str48, [1 x i8]* @p_str49, i32 2, i32 2, i32 16, i32 16, [1 x i8]* @p_str50, [1 x i8]* @p_str51)

ST_10: empty_18 (51)  [1/1] 0.00ns
arrayctor.loop1.preheader:33  %empty_18 = call i32 (...)* @_ssdm_op_SpecChannel([4 x i8]* @y_OC_V_str, i32 1, [1 x i8]* @p_str53, [1 x i8]* @p_str53, i32 4, i32 16, i32* %y_V, i32* %y_V)

ST_10: StgValue_50 (52)  [1/1] 0.00ns
arrayctor.loop1.preheader:34  call void (...)* @_ssdm_op_SpecInterface(i32* %y_V, [8 x i8]* @ap_fifo_str, i32 0, i32 0, [1 x i8]* @p_str54, i32 0, i32 0, [1 x i8]* @p_str55, [1 x i8]* @p_str56, [1 x i8]* @p_str57, i32 2, i32 2, i32 16, i32 16, [1 x i8]* @p_str58, [1 x i8]* @p_str59)

ST_10: StgValue_51 (54)  [1/1] 0.00ns  loc: axi_algorithm.cpp:123
arrayctor.loop1.preheader:36  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 0ns
The critical path consists of the following:

 <State 2>: 0ns
The critical path consists of the following:

 <State 3>: 0ns
The critical path consists of the following:

 <State 4>: 0ns
The critical path consists of the following:

 <State 5>: 0ns
The critical path consists of the following:

 <State 6>: 0ns
The critical path consists of the following:

 <State 7>: 0ns
The critical path consists of the following:

 <State 8>: 0ns
The critical path consists of the following:

 <State 9>: 0ns
The critical path consists of the following:

 <State 10>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
