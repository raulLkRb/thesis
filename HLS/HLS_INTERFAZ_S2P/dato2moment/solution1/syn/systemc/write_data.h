// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _write_data_HH_
#define _write_data_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct write_data : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > output_AX_ALGpalma1_TREADY;
    sc_in< sc_lv<32> > buf_0_V_read;
    sc_out< sc_lv<32> > output_AX_ALGpalma1_TDATA;
    sc_out< sc_logic > output_AX_ALGpalma1_TVALID;
    sc_out< sc_lv<4> > output_AX_ALGpalma1_TKEEP;
    sc_out< sc_lv<4> > output_AX_ALGpalma1_TSTRB;
    sc_out< sc_lv<4> > output_AX_ALGpalma1_TUSER;
    sc_out< sc_lv<1> > output_AX_ALGpalma1_TLAST;
    sc_out< sc_lv<5> > output_AX_ALGpalma1_TID;
    sc_out< sc_lv<5> > output_AX_ALGpalma1_TDEST;


    // Module declarations
    write_data(sc_module_name name);
    SC_HAS_PROCESS(write_data);

    ~write_data();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_logic > output_data_V_1_ack_in;
    sc_signal< sc_logic > output_keep_V_1_ack_in;
    sc_signal< sc_logic > output_strb_V_1_ack_in;
    sc_signal< sc_logic > output_user_V_1_ack_in;
    sc_signal< sc_logic > output_last_V_1_ack_in;
    sc_signal< sc_logic > output_id_V_1_ack_in;
    sc_signal< sc_logic > output_dest_V_1_ack_in;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<32> > output_data_V_1_data_out;
    sc_signal< sc_logic > output_data_V_1_vld_in;
    sc_signal< sc_logic > output_data_V_1_vld_out;
    sc_signal< sc_logic > output_data_V_1_ack_out;
    sc_signal< sc_lv<32> > output_data_V_1_payload_A;
    sc_signal< sc_lv<32> > output_data_V_1_payload_B;
    sc_signal< sc_logic > output_data_V_1_sel_rd;
    sc_signal< sc_logic > output_data_V_1_sel_wr;
    sc_signal< sc_logic > output_data_V_1_sel;
    sc_signal< sc_logic > output_data_V_1_load_A;
    sc_signal< sc_logic > output_data_V_1_load_B;
    sc_signal< sc_lv<2> > output_data_V_1_state;
    sc_signal< sc_logic > output_data_V_1_state_cmp_full;
    sc_signal< sc_lv<4> > output_keep_V_1_data_out;
    sc_signal< sc_logic > output_keep_V_1_vld_in;
    sc_signal< sc_logic > output_keep_V_1_vld_out;
    sc_signal< sc_logic > output_keep_V_1_ack_out;
    sc_signal< sc_logic > output_keep_V_1_sel_rd;
    sc_signal< sc_logic > output_keep_V_1_sel;
    sc_signal< sc_lv<2> > output_keep_V_1_state;
    sc_signal< sc_lv<4> > output_strb_V_1_data_out;
    sc_signal< sc_logic > output_strb_V_1_vld_in;
    sc_signal< sc_logic > output_strb_V_1_vld_out;
    sc_signal< sc_logic > output_strb_V_1_ack_out;
    sc_signal< sc_logic > output_strb_V_1_sel_rd;
    sc_signal< sc_logic > output_strb_V_1_sel;
    sc_signal< sc_lv<2> > output_strb_V_1_state;
    sc_signal< sc_lv<4> > output_user_V_1_data_out;
    sc_signal< sc_logic > output_user_V_1_vld_in;
    sc_signal< sc_logic > output_user_V_1_vld_out;
    sc_signal< sc_logic > output_user_V_1_ack_out;
    sc_signal< sc_logic > output_user_V_1_sel_rd;
    sc_signal< sc_logic > output_user_V_1_sel;
    sc_signal< sc_lv<2> > output_user_V_1_state;
    sc_signal< sc_lv<1> > output_last_V_1_data_out;
    sc_signal< sc_logic > output_last_V_1_vld_in;
    sc_signal< sc_logic > output_last_V_1_vld_out;
    sc_signal< sc_logic > output_last_V_1_ack_out;
    sc_signal< sc_logic > output_last_V_1_sel_rd;
    sc_signal< sc_logic > output_last_V_1_sel;
    sc_signal< sc_lv<2> > output_last_V_1_state;
    sc_signal< sc_lv<5> > output_id_V_1_data_out;
    sc_signal< sc_logic > output_id_V_1_vld_in;
    sc_signal< sc_logic > output_id_V_1_vld_out;
    sc_signal< sc_logic > output_id_V_1_ack_out;
    sc_signal< sc_logic > output_id_V_1_sel_rd;
    sc_signal< sc_logic > output_id_V_1_sel;
    sc_signal< sc_lv<2> > output_id_V_1_state;
    sc_signal< sc_lv<5> > output_dest_V_1_data_out;
    sc_signal< sc_logic > output_dest_V_1_vld_in;
    sc_signal< sc_logic > output_dest_V_1_vld_out;
    sc_signal< sc_logic > output_dest_V_1_ack_out;
    sc_signal< sc_logic > output_dest_V_1_sel_rd;
    sc_signal< sc_logic > output_dest_V_1_sel;
    sc_signal< sc_lv<2> > output_dest_V_1_state;
    sc_signal< sc_logic > output_AX_ALGpalma1_TDATA_blk_n;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< bool > ap_block_pp0_stage0_flag00001001;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<5> ap_const_lv5_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00001001();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_output_AX_ALGpalma1_TDATA();
    void thread_output_AX_ALGpalma1_TDATA_blk_n();
    void thread_output_AX_ALGpalma1_TDEST();
    void thread_output_AX_ALGpalma1_TID();
    void thread_output_AX_ALGpalma1_TKEEP();
    void thread_output_AX_ALGpalma1_TLAST();
    void thread_output_AX_ALGpalma1_TSTRB();
    void thread_output_AX_ALGpalma1_TUSER();
    void thread_output_AX_ALGpalma1_TVALID();
    void thread_output_data_V_1_ack_in();
    void thread_output_data_V_1_ack_out();
    void thread_output_data_V_1_data_out();
    void thread_output_data_V_1_load_A();
    void thread_output_data_V_1_load_B();
    void thread_output_data_V_1_sel();
    void thread_output_data_V_1_state_cmp_full();
    void thread_output_data_V_1_vld_in();
    void thread_output_data_V_1_vld_out();
    void thread_output_dest_V_1_ack_in();
    void thread_output_dest_V_1_ack_out();
    void thread_output_dest_V_1_data_out();
    void thread_output_dest_V_1_sel();
    void thread_output_dest_V_1_vld_in();
    void thread_output_dest_V_1_vld_out();
    void thread_output_id_V_1_ack_in();
    void thread_output_id_V_1_ack_out();
    void thread_output_id_V_1_data_out();
    void thread_output_id_V_1_sel();
    void thread_output_id_V_1_vld_in();
    void thread_output_id_V_1_vld_out();
    void thread_output_keep_V_1_ack_in();
    void thread_output_keep_V_1_ack_out();
    void thread_output_keep_V_1_data_out();
    void thread_output_keep_V_1_sel();
    void thread_output_keep_V_1_vld_in();
    void thread_output_keep_V_1_vld_out();
    void thread_output_last_V_1_ack_in();
    void thread_output_last_V_1_ack_out();
    void thread_output_last_V_1_data_out();
    void thread_output_last_V_1_sel();
    void thread_output_last_V_1_vld_in();
    void thread_output_last_V_1_vld_out();
    void thread_output_strb_V_1_ack_in();
    void thread_output_strb_V_1_ack_out();
    void thread_output_strb_V_1_data_out();
    void thread_output_strb_V_1_sel();
    void thread_output_strb_V_1_vld_in();
    void thread_output_strb_V_1_vld_out();
    void thread_output_user_V_1_ack_in();
    void thread_output_user_V_1_ack_out();
    void thread_output_user_V_1_data_out();
    void thread_output_user_V_1_sel();
    void thread_output_user_V_1_vld_in();
    void thread_output_user_V_1_vld_out();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
