-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi_algorithm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_AX_ALG_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_AX_ALG_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALG_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALG_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALG_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_AX_ALG_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    input_AX_ALG_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    output_AX_ALGdedo0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_AX_ALGdedo0_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALGdedo0_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALGdedo0_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALGdedo0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_AX_ALGdedo0_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_AX_ALGdedo0_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_AX_ALGpalma0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_AX_ALGpalma0_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALGpalma0_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALGpalma0_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALGpalma0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_AX_ALGpalma0_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_AX_ALGpalma0_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_AX_ALGdedo1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_AX_ALGdedo1_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALGdedo1_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALGdedo1_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALGdedo1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_AX_ALGdedo1_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_AX_ALGdedo1_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_AX_ALGpalma1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_AX_ALGpalma1_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALGpalma1_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALGpalma1_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALGpalma1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_AX_ALGpalma1_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_AX_ALGpalma1_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_AX_ALG_TVALID : IN STD_LOGIC;
    input_AX_ALG_TREADY : OUT STD_LOGIC;
    output_AX_ALGdedo0_TVALID : OUT STD_LOGIC;
    output_AX_ALGdedo0_TREADY : IN STD_LOGIC;
    output_AX_ALGpalma0_TVALID : OUT STD_LOGIC;
    output_AX_ALGpalma0_TREADY : IN STD_LOGIC;
    output_AX_ALGdedo1_TVALID : OUT STD_LOGIC;
    output_AX_ALGdedo1_TREADY : IN STD_LOGIC;
    output_AX_ALGpalma1_TVALID : OUT STD_LOGIC;
    output_AX_ALGpalma1_TREADY : IN STD_LOGIC );
end;


architecture behav of axi_algorithm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axi_algorithm,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.140000,HLS_SYN_LAT=11,HLS_SYN_TPT=7,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=639,HLS_SYN_LUT=852}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal dato_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dato_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dato_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dato_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_data_U0_ap_start : STD_LOGIC;
    signal read_data_U0_ap_done : STD_LOGIC;
    signal read_data_U0_ap_continue : STD_LOGIC;
    signal read_data_U0_ap_idle : STD_LOGIC;
    signal read_data_U0_ap_ready : STD_LOGIC;
    signal read_data_U0_input_AX_ALG_TREADY : STD_LOGIC;
    signal read_data_U0_buf_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal read_data_U0_buf_V_ce0 : STD_LOGIC;
    signal read_data_U0_buf_V_we0 : STD_LOGIC;
    signal read_data_U0_buf_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_dato : STD_LOGIC;
    signal read_data_U0_buf_V_full_n : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_start : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_done : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_continue : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_idle : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_ready : STD_LOGIC;
    signal Block_arrayctor_loop_U0_dato_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_arrayctor_loop_U0_dato_ce0 : STD_LOGIC;
    signal Block_arrayctor_loop_U0_dato_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_arrayctor_loop_U0_dato_ce1 : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_arrayctor_loop_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_arrayctor_loop_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_arrayctor_loop_U0_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_palma1_0_V : STD_LOGIC;
    signal palma1_0_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_palma1_0_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_palma1_0_V : STD_LOGIC;
    signal ap_channel_done_dedo1_0_V : STD_LOGIC;
    signal dedo1_0_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_dedo1_0_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_dedo1_0_V : STD_LOGIC;
    signal ap_channel_done_palma0_0_V : STD_LOGIC;
    signal palma0_0_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_palma0_0_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_palma0_0_V : STD_LOGIC;
    signal ap_channel_done_dedo0_0_V : STD_LOGIC;
    signal dedo0_0_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_dedo0_0_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_dedo0_0_V : STD_LOGIC;
    signal write_data21_U0_ap_start : STD_LOGIC;
    signal write_data21_U0_ap_done : STD_LOGIC;
    signal write_data21_U0_ap_continue : STD_LOGIC;
    signal write_data21_U0_ap_idle : STD_LOGIC;
    signal write_data21_U0_ap_ready : STD_LOGIC;
    signal write_data21_U0_output_AX_ALGdedo0_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal write_data21_U0_output_AX_ALGdedo0_TVALID : STD_LOGIC;
    signal write_data21_U0_output_AX_ALGdedo0_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data21_U0_output_AX_ALGdedo0_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data21_U0_output_AX_ALGdedo0_TUSER : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data21_U0_output_AX_ALGdedo0_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal write_data21_U0_output_AX_ALGdedo0_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal write_data21_U0_output_AX_ALGdedo0_TDEST : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal write_data22_U0_ap_start : STD_LOGIC;
    signal write_data22_U0_ap_done : STD_LOGIC;
    signal write_data22_U0_ap_continue : STD_LOGIC;
    signal write_data22_U0_ap_idle : STD_LOGIC;
    signal write_data22_U0_ap_ready : STD_LOGIC;
    signal write_data22_U0_output_AX_ALGpalma0_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal write_data22_U0_output_AX_ALGpalma0_TVALID : STD_LOGIC;
    signal write_data22_U0_output_AX_ALGpalma0_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data22_U0_output_AX_ALGpalma0_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data22_U0_output_AX_ALGpalma0_TUSER : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data22_U0_output_AX_ALGpalma0_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal write_data22_U0_output_AX_ALGpalma0_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal write_data22_U0_output_AX_ALGpalma0_TDEST : STD_LOGIC_VECTOR (4 downto 0);
    signal write_data23_U0_ap_start : STD_LOGIC;
    signal write_data23_U0_ap_done : STD_LOGIC;
    signal write_data23_U0_ap_continue : STD_LOGIC;
    signal write_data23_U0_ap_idle : STD_LOGIC;
    signal write_data23_U0_ap_ready : STD_LOGIC;
    signal write_data23_U0_output_AX_ALGdedo1_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal write_data23_U0_output_AX_ALGdedo1_TVALID : STD_LOGIC;
    signal write_data23_U0_output_AX_ALGdedo1_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data23_U0_output_AX_ALGdedo1_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data23_U0_output_AX_ALGdedo1_TUSER : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data23_U0_output_AX_ALGdedo1_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal write_data23_U0_output_AX_ALGdedo1_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal write_data23_U0_output_AX_ALGdedo1_TDEST : STD_LOGIC_VECTOR (4 downto 0);
    signal write_data_U0_ap_start : STD_LOGIC;
    signal write_data_U0_ap_done : STD_LOGIC;
    signal write_data_U0_ap_continue : STD_LOGIC;
    signal write_data_U0_ap_idle : STD_LOGIC;
    signal write_data_U0_ap_ready : STD_LOGIC;
    signal write_data_U0_output_AX_ALGpalma1_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal write_data_U0_output_AX_ALGpalma1_TVALID : STD_LOGIC;
    signal write_data_U0_output_AX_ALGpalma1_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data_U0_output_AX_ALGpalma1_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data_U0_output_AX_ALGpalma1_TUSER : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data_U0_output_AX_ALGpalma1_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal write_data_U0_output_AX_ALGpalma1_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal write_data_U0_output_AX_ALGpalma1_TDEST : STD_LOGIC_VECTOR (4 downto 0);
    signal dato_i_full_n : STD_LOGIC;
    signal dato_t_empty_n : STD_LOGIC;
    signal dato_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dato_t_we1 : STD_LOGIC;
    signal dedo0_0_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dedo0_0_V_empty_n : STD_LOGIC;
    signal palma0_0_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal palma0_0_V_empty_n : STD_LOGIC;
    signal dedo1_0_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dedo1_0_V_empty_n : STD_LOGIC;
    signal palma1_0_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal palma1_0_V_empty_n : STD_LOGIC;
    signal read_data_U0_start_full_n : STD_LOGIC;
    signal read_data_U0_start_write : STD_LOGIC;
    signal Block_arrayctor_loop_U0_start_full_n : STD_LOGIC;
    signal Block_arrayctor_loop_U0_start_write : STD_LOGIC;
    signal write_data21_U0_start_full_n : STD_LOGIC;
    signal write_data21_U0_start_write : STD_LOGIC;
    signal write_data22_U0_start_full_n : STD_LOGIC;
    signal write_data22_U0_start_write : STD_LOGIC;
    signal write_data23_U0_start_full_n : STD_LOGIC;
    signal write_data23_U0_start_write : STD_LOGIC;
    signal write_data_U0_start_full_n : STD_LOGIC;
    signal write_data_U0_start_write : STD_LOGIC;

    component read_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_AX_ALG_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        input_AX_ALG_TVALID : IN STD_LOGIC;
        input_AX_ALG_TREADY : OUT STD_LOGIC;
        input_AX_ALG_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        input_AX_ALG_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        input_AX_ALG_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
        input_AX_ALG_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        input_AX_ALG_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        input_AX_ALG_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
        buf_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_V_ce0 : OUT STD_LOGIC;
        buf_V_we0 : OUT STD_LOGIC;
        buf_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Block_arrayctor_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dato_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        dato_ce0 : OUT STD_LOGIC;
        dato_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dato_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        dato_ce1 : OUT STD_LOGIC;
        dato_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component write_data21 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_AX_ALGdedo0_TREADY : IN STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        output_AX_ALGdedo0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_AX_ALGdedo0_TVALID : OUT STD_LOGIC;
        output_AX_ALGdedo0_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALGdedo0_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALGdedo0_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALGdedo0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_AX_ALGdedo0_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_AX_ALGdedo0_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component write_data22 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_AX_ALGpalma0_TREADY : IN STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        output_AX_ALGpalma0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_AX_ALGpalma0_TVALID : OUT STD_LOGIC;
        output_AX_ALGpalma0_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALGpalma0_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALGpalma0_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALGpalma0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_AX_ALGpalma0_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_AX_ALGpalma0_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component write_data23 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_AX_ALGdedo1_TREADY : IN STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        output_AX_ALGdedo1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_AX_ALGdedo1_TVALID : OUT STD_LOGIC;
        output_AX_ALGdedo1_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALGdedo1_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALGdedo1_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALGdedo1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_AX_ALGdedo1_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_AX_ALGdedo1_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component write_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_AX_ALGpalma1_TREADY : IN STD_LOGIC;
        buf_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        output_AX_ALGpalma1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_AX_ALGpalma1_TVALID : OUT STD_LOGIC;
        output_AX_ALGpalma1_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALGpalma1_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALGpalma1_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALGpalma1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_AX_ALGpalma1_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_AX_ALGpalma1_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component axi_algorithm_dato IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    dato_U : component axi_algorithm_dato
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => read_data_U0_buf_V_address0,
        i_ce0 => read_data_U0_buf_V_ce0,
        i_we0 => read_data_U0_buf_V_we0,
        i_d0 => read_data_U0_buf_V_d0,
        i_q0 => dato_i_q0,
        i_address1 => ap_const_lv2_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => dato_i_q1,
        t_address0 => Block_arrayctor_loop_U0_dato_address0,
        t_ce0 => Block_arrayctor_loop_U0_dato_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => dato_t_q0,
        t_address1 => Block_arrayctor_loop_U0_dato_address1,
        t_ce1 => Block_arrayctor_loop_U0_dato_ce1,
        t_q1 => dato_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => dato_i_full_n,
        i_write => read_data_U0_ap_done,
        t_empty_n => dato_t_empty_n,
        t_read => Block_arrayctor_loop_U0_ap_ready);

    read_data_U0 : component read_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => read_data_U0_ap_start,
        ap_done => read_data_U0_ap_done,
        ap_continue => read_data_U0_ap_continue,
        ap_idle => read_data_U0_ap_idle,
        ap_ready => read_data_U0_ap_ready,
        input_AX_ALG_TDATA => input_AX_ALG_TDATA,
        input_AX_ALG_TVALID => input_AX_ALG_TVALID,
        input_AX_ALG_TREADY => read_data_U0_input_AX_ALG_TREADY,
        input_AX_ALG_TKEEP => input_AX_ALG_TKEEP,
        input_AX_ALG_TSTRB => input_AX_ALG_TSTRB,
        input_AX_ALG_TUSER => input_AX_ALG_TUSER,
        input_AX_ALG_TLAST => input_AX_ALG_TLAST,
        input_AX_ALG_TID => input_AX_ALG_TID,
        input_AX_ALG_TDEST => input_AX_ALG_TDEST,
        buf_V_address0 => read_data_U0_buf_V_address0,
        buf_V_ce0 => read_data_U0_buf_V_ce0,
        buf_V_we0 => read_data_U0_buf_V_we0,
        buf_V_d0 => read_data_U0_buf_V_d0);

    Block_arrayctor_loop_U0 : component Block_arrayctor_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_arrayctor_loop_U0_ap_start,
        ap_done => Block_arrayctor_loop_U0_ap_done,
        ap_continue => Block_arrayctor_loop_U0_ap_continue,
        ap_idle => Block_arrayctor_loop_U0_ap_idle,
        ap_ready => Block_arrayctor_loop_U0_ap_ready,
        dato_address0 => Block_arrayctor_loop_U0_dato_address0,
        dato_ce0 => Block_arrayctor_loop_U0_dato_ce0,
        dato_q0 => dato_t_q0,
        dato_address1 => Block_arrayctor_loop_U0_dato_address1,
        dato_ce1 => Block_arrayctor_loop_U0_dato_ce1,
        dato_q1 => dato_t_q1,
        ap_return_0 => Block_arrayctor_loop_U0_ap_return_0,
        ap_return_1 => Block_arrayctor_loop_U0_ap_return_1,
        ap_return_2 => Block_arrayctor_loop_U0_ap_return_2,
        ap_return_3 => Block_arrayctor_loop_U0_ap_return_3);

    write_data21_U0 : component write_data21
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => write_data21_U0_ap_start,
        ap_done => write_data21_U0_ap_done,
        ap_continue => write_data21_U0_ap_continue,
        ap_idle => write_data21_U0_ap_idle,
        ap_ready => write_data21_U0_ap_ready,
        output_AX_ALGdedo0_TREADY => output_AX_ALGdedo0_TREADY,
        p_read => dedo0_0_V_dout,
        output_AX_ALGdedo0_TDATA => write_data21_U0_output_AX_ALGdedo0_TDATA,
        output_AX_ALGdedo0_TVALID => write_data21_U0_output_AX_ALGdedo0_TVALID,
        output_AX_ALGdedo0_TKEEP => write_data21_U0_output_AX_ALGdedo0_TKEEP,
        output_AX_ALGdedo0_TSTRB => write_data21_U0_output_AX_ALGdedo0_TSTRB,
        output_AX_ALGdedo0_TUSER => write_data21_U0_output_AX_ALGdedo0_TUSER,
        output_AX_ALGdedo0_TLAST => write_data21_U0_output_AX_ALGdedo0_TLAST,
        output_AX_ALGdedo0_TID => write_data21_U0_output_AX_ALGdedo0_TID,
        output_AX_ALGdedo0_TDEST => write_data21_U0_output_AX_ALGdedo0_TDEST);

    write_data22_U0 : component write_data22
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => write_data22_U0_ap_start,
        ap_done => write_data22_U0_ap_done,
        ap_continue => write_data22_U0_ap_continue,
        ap_idle => write_data22_U0_ap_idle,
        ap_ready => write_data22_U0_ap_ready,
        output_AX_ALGpalma0_TREADY => output_AX_ALGpalma0_TREADY,
        p_read => palma0_0_V_dout,
        output_AX_ALGpalma0_TDATA => write_data22_U0_output_AX_ALGpalma0_TDATA,
        output_AX_ALGpalma0_TVALID => write_data22_U0_output_AX_ALGpalma0_TVALID,
        output_AX_ALGpalma0_TKEEP => write_data22_U0_output_AX_ALGpalma0_TKEEP,
        output_AX_ALGpalma0_TSTRB => write_data22_U0_output_AX_ALGpalma0_TSTRB,
        output_AX_ALGpalma0_TUSER => write_data22_U0_output_AX_ALGpalma0_TUSER,
        output_AX_ALGpalma0_TLAST => write_data22_U0_output_AX_ALGpalma0_TLAST,
        output_AX_ALGpalma0_TID => write_data22_U0_output_AX_ALGpalma0_TID,
        output_AX_ALGpalma0_TDEST => write_data22_U0_output_AX_ALGpalma0_TDEST);

    write_data23_U0 : component write_data23
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => write_data23_U0_ap_start,
        ap_done => write_data23_U0_ap_done,
        ap_continue => write_data23_U0_ap_continue,
        ap_idle => write_data23_U0_ap_idle,
        ap_ready => write_data23_U0_ap_ready,
        output_AX_ALGdedo1_TREADY => output_AX_ALGdedo1_TREADY,
        p_read => dedo1_0_V_dout,
        output_AX_ALGdedo1_TDATA => write_data23_U0_output_AX_ALGdedo1_TDATA,
        output_AX_ALGdedo1_TVALID => write_data23_U0_output_AX_ALGdedo1_TVALID,
        output_AX_ALGdedo1_TKEEP => write_data23_U0_output_AX_ALGdedo1_TKEEP,
        output_AX_ALGdedo1_TSTRB => write_data23_U0_output_AX_ALGdedo1_TSTRB,
        output_AX_ALGdedo1_TUSER => write_data23_U0_output_AX_ALGdedo1_TUSER,
        output_AX_ALGdedo1_TLAST => write_data23_U0_output_AX_ALGdedo1_TLAST,
        output_AX_ALGdedo1_TID => write_data23_U0_output_AX_ALGdedo1_TID,
        output_AX_ALGdedo1_TDEST => write_data23_U0_output_AX_ALGdedo1_TDEST);

    write_data_U0 : component write_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => write_data_U0_ap_start,
        ap_done => write_data_U0_ap_done,
        ap_continue => write_data_U0_ap_continue,
        ap_idle => write_data_U0_ap_idle,
        ap_ready => write_data_U0_ap_ready,
        output_AX_ALGpalma1_TREADY => output_AX_ALGpalma1_TREADY,
        buf_0_V_read => palma1_0_V_dout,
        output_AX_ALGpalma1_TDATA => write_data_U0_output_AX_ALGpalma1_TDATA,
        output_AX_ALGpalma1_TVALID => write_data_U0_output_AX_ALGpalma1_TVALID,
        output_AX_ALGpalma1_TKEEP => write_data_U0_output_AX_ALGpalma1_TKEEP,
        output_AX_ALGpalma1_TSTRB => write_data_U0_output_AX_ALGpalma1_TSTRB,
        output_AX_ALGpalma1_TUSER => write_data_U0_output_AX_ALGpalma1_TUSER,
        output_AX_ALGpalma1_TLAST => write_data_U0_output_AX_ALGpalma1_TLAST,
        output_AX_ALGpalma1_TID => write_data_U0_output_AX_ALGpalma1_TID,
        output_AX_ALGpalma1_TDEST => write_data_U0_output_AX_ALGpalma1_TDEST);

    dedo0_0_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_arrayctor_loop_U0_ap_return_0,
        if_full_n => dedo0_0_V_full_n,
        if_write => ap_channel_done_dedo0_0_V,
        if_dout => dedo0_0_V_dout,
        if_empty_n => dedo0_0_V_empty_n,
        if_read => write_data21_U0_ap_ready);

    palma0_0_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_arrayctor_loop_U0_ap_return_1,
        if_full_n => palma0_0_V_full_n,
        if_write => ap_channel_done_palma0_0_V,
        if_dout => palma0_0_V_dout,
        if_empty_n => palma0_0_V_empty_n,
        if_read => write_data22_U0_ap_ready);

    dedo1_0_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_arrayctor_loop_U0_ap_return_2,
        if_full_n => dedo1_0_V_full_n,
        if_write => ap_channel_done_dedo1_0_V,
        if_dout => dedo1_0_V_dout,
        if_empty_n => dedo1_0_V_empty_n,
        if_read => write_data23_U0_ap_ready);

    palma1_0_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_arrayctor_loop_U0_ap_return_3,
        if_full_n => palma1_0_V_full_n,
        if_write => ap_channel_done_palma1_0_V,
        if_dout => palma1_0_V_dout,
        if_empty_n => palma1_0_V_empty_n,
        if_read => write_data_U0_ap_ready);





    ap_sync_reg_channel_write_dedo0_0_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_dedo0_0_V <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (Block_arrayctor_loop_U0_ap_done and Block_arrayctor_loop_U0_ap_continue))) then 
                    ap_sync_reg_channel_write_dedo0_0_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_dedo0_0_V <= ap_sync_channel_write_dedo0_0_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_dedo1_0_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_dedo1_0_V <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (Block_arrayctor_loop_U0_ap_done and Block_arrayctor_loop_U0_ap_continue))) then 
                    ap_sync_reg_channel_write_dedo1_0_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_dedo1_0_V <= ap_sync_channel_write_dedo1_0_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_palma0_0_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_palma0_0_V <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (Block_arrayctor_loop_U0_ap_done and Block_arrayctor_loop_U0_ap_continue))) then 
                    ap_sync_reg_channel_write_palma0_0_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_palma0_0_V <= ap_sync_channel_write_palma0_0_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_palma1_0_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_palma1_0_V <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (Block_arrayctor_loop_U0_ap_done and Block_arrayctor_loop_U0_ap_continue))) then 
                    ap_sync_reg_channel_write_palma1_0_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_palma1_0_V <= ap_sync_channel_write_palma1_0_V;
                end if; 
            end if;
        end if;
    end process;

    Block_arrayctor_loop_U0_ap_continue <= (ap_sync_channel_write_palma1_0_V and ap_sync_channel_write_dedo1_0_V and ap_sync_channel_write_palma0_0_V and ap_sync_channel_write_dedo0_0_V);
    Block_arrayctor_loop_U0_ap_start <= dato_t_empty_n;
    Block_arrayctor_loop_U0_start_full_n <= ap_const_logic_0;
    Block_arrayctor_loop_U0_start_write <= ap_const_logic_0;
    ap_channel_done_dato <= read_data_U0_ap_done;
    ap_channel_done_dedo0_0_V <= (Block_arrayctor_loop_U0_ap_done and (ap_sync_reg_channel_write_dedo0_0_V xor ap_const_logic_1));
    ap_channel_done_dedo1_0_V <= (Block_arrayctor_loop_U0_ap_done and (ap_sync_reg_channel_write_dedo1_0_V xor ap_const_logic_1));
    ap_channel_done_palma0_0_V <= (Block_arrayctor_loop_U0_ap_done and (ap_sync_reg_channel_write_palma0_0_V xor ap_const_logic_1));
    ap_channel_done_palma1_0_V <= (Block_arrayctor_loop_U0_ap_done and (ap_sync_reg_channel_write_palma1_0_V xor ap_const_logic_1));

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_dedo0_0_V <= ((ap_channel_done_dedo0_0_V and dedo0_0_V_full_n) or ap_sync_reg_channel_write_dedo0_0_V);
    ap_sync_channel_write_dedo1_0_V <= ((ap_channel_done_dedo1_0_V and dedo1_0_V_full_n) or ap_sync_reg_channel_write_dedo1_0_V);
    ap_sync_channel_write_palma0_0_V <= ((ap_channel_done_palma0_0_V and palma0_0_V_full_n) or ap_sync_reg_channel_write_palma0_0_V);
    ap_sync_channel_write_palma1_0_V <= ((ap_channel_done_palma1_0_V and palma1_0_V_full_n) or ap_sync_reg_channel_write_palma1_0_V);
    ap_sync_continue <= ap_const_logic_0;
    dato_t_d1 <= ap_const_lv32_0;
    dato_t_we1 <= ap_const_logic_0;
    input_AX_ALG_TREADY <= read_data_U0_input_AX_ALG_TREADY;
    output_AX_ALGdedo0_TDATA <= write_data21_U0_output_AX_ALGdedo0_TDATA;
    output_AX_ALGdedo0_TDEST <= write_data21_U0_output_AX_ALGdedo0_TDEST;
    output_AX_ALGdedo0_TID <= write_data21_U0_output_AX_ALGdedo0_TID;
    output_AX_ALGdedo0_TKEEP <= write_data21_U0_output_AX_ALGdedo0_TKEEP;
    output_AX_ALGdedo0_TLAST <= write_data21_U0_output_AX_ALGdedo0_TLAST;
    output_AX_ALGdedo0_TSTRB <= write_data21_U0_output_AX_ALGdedo0_TSTRB;
    output_AX_ALGdedo0_TUSER <= write_data21_U0_output_AX_ALGdedo0_TUSER;
    output_AX_ALGdedo0_TVALID <= write_data21_U0_output_AX_ALGdedo0_TVALID;
    output_AX_ALGdedo1_TDATA <= write_data23_U0_output_AX_ALGdedo1_TDATA;
    output_AX_ALGdedo1_TDEST <= write_data23_U0_output_AX_ALGdedo1_TDEST;
    output_AX_ALGdedo1_TID <= write_data23_U0_output_AX_ALGdedo1_TID;
    output_AX_ALGdedo1_TKEEP <= write_data23_U0_output_AX_ALGdedo1_TKEEP;
    output_AX_ALGdedo1_TLAST <= write_data23_U0_output_AX_ALGdedo1_TLAST;
    output_AX_ALGdedo1_TSTRB <= write_data23_U0_output_AX_ALGdedo1_TSTRB;
    output_AX_ALGdedo1_TUSER <= write_data23_U0_output_AX_ALGdedo1_TUSER;
    output_AX_ALGdedo1_TVALID <= write_data23_U0_output_AX_ALGdedo1_TVALID;
    output_AX_ALGpalma0_TDATA <= write_data22_U0_output_AX_ALGpalma0_TDATA;
    output_AX_ALGpalma0_TDEST <= write_data22_U0_output_AX_ALGpalma0_TDEST;
    output_AX_ALGpalma0_TID <= write_data22_U0_output_AX_ALGpalma0_TID;
    output_AX_ALGpalma0_TKEEP <= write_data22_U0_output_AX_ALGpalma0_TKEEP;
    output_AX_ALGpalma0_TLAST <= write_data22_U0_output_AX_ALGpalma0_TLAST;
    output_AX_ALGpalma0_TSTRB <= write_data22_U0_output_AX_ALGpalma0_TSTRB;
    output_AX_ALGpalma0_TUSER <= write_data22_U0_output_AX_ALGpalma0_TUSER;
    output_AX_ALGpalma0_TVALID <= write_data22_U0_output_AX_ALGpalma0_TVALID;
    output_AX_ALGpalma1_TDATA <= write_data_U0_output_AX_ALGpalma1_TDATA;
    output_AX_ALGpalma1_TDEST <= write_data_U0_output_AX_ALGpalma1_TDEST;
    output_AX_ALGpalma1_TID <= write_data_U0_output_AX_ALGpalma1_TID;
    output_AX_ALGpalma1_TKEEP <= write_data_U0_output_AX_ALGpalma1_TKEEP;
    output_AX_ALGpalma1_TLAST <= write_data_U0_output_AX_ALGpalma1_TLAST;
    output_AX_ALGpalma1_TSTRB <= write_data_U0_output_AX_ALGpalma1_TSTRB;
    output_AX_ALGpalma1_TUSER <= write_data_U0_output_AX_ALGpalma1_TUSER;
    output_AX_ALGpalma1_TVALID <= write_data_U0_output_AX_ALGpalma1_TVALID;
    read_data_U0_ap_continue <= dato_i_full_n;
    read_data_U0_ap_start <= ap_const_logic_1;
    read_data_U0_buf_V_full_n <= dato_i_full_n;
    read_data_U0_start_full_n <= ap_const_logic_0;
    read_data_U0_start_write <= ap_const_logic_0;
    write_data21_U0_ap_continue <= ap_const_logic_1;
    write_data21_U0_ap_start <= dedo0_0_V_empty_n;
    write_data21_U0_start_full_n <= ap_const_logic_0;
    write_data21_U0_start_write <= ap_const_logic_0;
    write_data22_U0_ap_continue <= ap_const_logic_1;
    write_data22_U0_ap_start <= palma0_0_V_empty_n;
    write_data22_U0_start_full_n <= ap_const_logic_0;
    write_data22_U0_start_write <= ap_const_logic_0;
    write_data23_U0_ap_continue <= ap_const_logic_1;
    write_data23_U0_ap_start <= dedo1_0_V_empty_n;
    write_data23_U0_start_full_n <= ap_const_logic_0;
    write_data23_U0_start_write <= ap_const_logic_0;
    write_data_U0_ap_continue <= ap_const_logic_1;
    write_data_U0_ap_start <= palma1_0_V_empty_n;
    write_data_U0_start_full_n <= ap_const_logic_0;
    write_data_U0_start_write <= ap_const_logic_0;
end behav;
