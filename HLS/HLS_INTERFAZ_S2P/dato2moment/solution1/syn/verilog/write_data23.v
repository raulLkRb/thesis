// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_data23 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        output_AX_ALGdedo1_TREADY,
        p_read,
        output_AX_ALGdedo1_TDATA,
        output_AX_ALGdedo1_TVALID,
        output_AX_ALGdedo1_TKEEP,
        output_AX_ALGdedo1_TSTRB,
        output_AX_ALGdedo1_TUSER,
        output_AX_ALGdedo1_TLAST,
        output_AX_ALGdedo1_TID,
        output_AX_ALGdedo1_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   output_AX_ALGdedo1_TREADY;
input  [31:0] p_read;
output  [31:0] output_AX_ALGdedo1_TDATA;
output   output_AX_ALGdedo1_TVALID;
output  [3:0] output_AX_ALGdedo1_TKEEP;
output  [3:0] output_AX_ALGdedo1_TSTRB;
output  [3:0] output_AX_ALGdedo1_TUSER;
output  [0:0] output_AX_ALGdedo1_TLAST;
output  [4:0] output_AX_ALGdedo1_TID;
output  [4:0] output_AX_ALGdedo1_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    output_data_V_1_ack_in;
wire    output_keep_V_1_ack_in;
wire    output_strb_V_1_ack_in;
wire    output_user_V_1_ack_in;
wire    output_last_V_1_ack_in;
wire    output_id_V_1_ack_in;
wire    output_dest_V_1_ack_in;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_flag00011001;
reg   [31:0] output_data_V_1_data_out;
reg    output_data_V_1_vld_in;
wire    output_data_V_1_vld_out;
wire    output_data_V_1_ack_out;
reg   [31:0] output_data_V_1_payload_A;
reg   [31:0] output_data_V_1_payload_B;
reg    output_data_V_1_sel_rd;
reg    output_data_V_1_sel_wr;
wire    output_data_V_1_sel;
wire    output_data_V_1_load_A;
wire    output_data_V_1_load_B;
reg   [1:0] output_data_V_1_state;
wire    output_data_V_1_state_cmp_full;
wire   [3:0] output_keep_V_1_data_out;
reg    output_keep_V_1_vld_in;
wire    output_keep_V_1_vld_out;
wire    output_keep_V_1_ack_out;
reg    output_keep_V_1_sel_rd;
wire    output_keep_V_1_sel;
reg   [1:0] output_keep_V_1_state;
wire   [3:0] output_strb_V_1_data_out;
reg    output_strb_V_1_vld_in;
wire    output_strb_V_1_vld_out;
wire    output_strb_V_1_ack_out;
reg    output_strb_V_1_sel_rd;
wire    output_strb_V_1_sel;
reg   [1:0] output_strb_V_1_state;
wire   [3:0] output_user_V_1_data_out;
reg    output_user_V_1_vld_in;
wire    output_user_V_1_vld_out;
wire    output_user_V_1_ack_out;
reg    output_user_V_1_sel_rd;
wire    output_user_V_1_sel;
reg   [1:0] output_user_V_1_state;
wire   [0:0] output_last_V_1_data_out;
reg    output_last_V_1_vld_in;
wire    output_last_V_1_vld_out;
wire    output_last_V_1_ack_out;
reg    output_last_V_1_sel_rd;
wire    output_last_V_1_sel;
reg   [1:0] output_last_V_1_state;
wire   [4:0] output_id_V_1_data_out;
reg    output_id_V_1_vld_in;
wire    output_id_V_1_vld_out;
wire    output_id_V_1_ack_out;
reg    output_id_V_1_sel_rd;
wire    output_id_V_1_sel;
reg   [1:0] output_id_V_1_state;
wire   [4:0] output_dest_V_1_data_out;
reg    output_dest_V_1_vld_in;
wire    output_dest_V_1_vld_out;
wire    output_dest_V_1_ack_out;
reg    output_dest_V_1_sel_rd;
wire    output_dest_V_1_sel;
reg   [1:0] output_dest_V_1_state;
reg    output_AX_ALGdedo1_TDATA_blk_n;
wire    ap_block_pp0_stage0_flag00000000;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_block_pp0_stage0_flag00001001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 output_data_V_1_sel_rd = 1'b0;
#0 output_data_V_1_sel_wr = 1'b0;
#0 output_data_V_1_state = 2'd0;
#0 output_keep_V_1_sel_rd = 1'b0;
#0 output_keep_V_1_state = 2'd0;
#0 output_strb_V_1_sel_rd = 1'b0;
#0 output_strb_V_1_state = 2'd0;
#0 output_user_V_1_sel_rd = 1'b0;
#0 output_user_V_1_state = 2'd0;
#0 output_last_V_1_sel_rd = 1'b0;
#0 output_last_V_1_state = 2'd0;
#0 output_id_V_1_sel_rd = 1'b0;
#0 output_id_V_1_state = 2'd0;
#0 output_dest_V_1_sel_rd = 1'b0;
#0 output_dest_V_1_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_data_V_1_ack_out) & (1'b1 == output_data_V_1_vld_out))) begin
            output_data_V_1_sel_rd <= ~output_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == output_data_V_1_vld_in) & (1'b1 == output_data_V_1_ack_in))) begin
            output_data_V_1_sel_wr <= ~output_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_data_V_1_vld_in) & (1'b1 == output_data_V_1_ack_out) & (output_data_V_1_state == 2'd3)) | ((1'b0 == output_data_V_1_vld_in) & (output_data_V_1_state == 2'd2)))) begin
            output_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_data_V_1_vld_in) & (1'b0 == output_data_V_1_ack_out) & (output_data_V_1_state == 2'd3)) | ((1'b0 == output_data_V_1_ack_out) & (output_data_V_1_state == 2'd1)))) begin
            output_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_data_V_1_vld_in) & (output_data_V_1_state == 2'd2)) | ((1'b1 == output_data_V_1_ack_out) & (output_data_V_1_state == 2'd1)) | ((output_data_V_1_state == 2'd3) & ~((1'b1 == output_data_V_1_vld_in) & (1'b0 == output_data_V_1_ack_out)) & ~((1'b0 == output_data_V_1_vld_in) & (1'b1 == output_data_V_1_ack_out))))) begin
            output_data_V_1_state <= 2'd3;
        end else begin
            output_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_dest_V_1_ack_out) & (1'b1 == output_dest_V_1_vld_out))) begin
            output_dest_V_1_sel_rd <= ~output_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_dest_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_dest_V_1_vld_in) & (1'b1 == output_dest_V_1_ack_out) & (2'd3 == output_dest_V_1_state)) | ((1'b0 == output_dest_V_1_vld_in) & (2'd2 == output_dest_V_1_state)))) begin
            output_dest_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_dest_V_1_vld_in) & (1'b0 == output_dest_V_1_ack_out) & (2'd3 == output_dest_V_1_state)) | ((1'b0 == output_dest_V_1_ack_out) & (2'd1 == output_dest_V_1_state)))) begin
            output_dest_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_dest_V_1_vld_in) & (2'd2 == output_dest_V_1_state)) | ((1'b1 == output_dest_V_1_ack_out) & (2'd1 == output_dest_V_1_state)) | ((2'd3 == output_dest_V_1_state) & ~((1'b1 == output_dest_V_1_vld_in) & (1'b0 == output_dest_V_1_ack_out)) & ~((1'b0 == output_dest_V_1_vld_in) & (1'b1 == output_dest_V_1_ack_out))))) begin
            output_dest_V_1_state <= 2'd3;
        end else begin
            output_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_id_V_1_ack_out) & (1'b1 == output_id_V_1_vld_out))) begin
            output_id_V_1_sel_rd <= ~output_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_id_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_id_V_1_vld_in) & (1'b1 == output_id_V_1_ack_out) & (2'd3 == output_id_V_1_state)) | ((1'b0 == output_id_V_1_vld_in) & (2'd2 == output_id_V_1_state)))) begin
            output_id_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_id_V_1_vld_in) & (1'b0 == output_id_V_1_ack_out) & (2'd3 == output_id_V_1_state)) | ((1'b0 == output_id_V_1_ack_out) & (2'd1 == output_id_V_1_state)))) begin
            output_id_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_id_V_1_vld_in) & (2'd2 == output_id_V_1_state)) | ((1'b1 == output_id_V_1_ack_out) & (2'd1 == output_id_V_1_state)) | ((2'd3 == output_id_V_1_state) & ~((1'b1 == output_id_V_1_vld_in) & (1'b0 == output_id_V_1_ack_out)) & ~((1'b0 == output_id_V_1_vld_in) & (1'b1 == output_id_V_1_ack_out))))) begin
            output_id_V_1_state <= 2'd3;
        end else begin
            output_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_keep_V_1_ack_out) & (1'b1 == output_keep_V_1_vld_out))) begin
            output_keep_V_1_sel_rd <= ~output_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_keep_V_1_vld_in) & (1'b1 == output_keep_V_1_ack_out) & (2'd3 == output_keep_V_1_state)) | ((1'b0 == output_keep_V_1_vld_in) & (2'd2 == output_keep_V_1_state)))) begin
            output_keep_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_keep_V_1_vld_in) & (1'b0 == output_keep_V_1_ack_out) & (2'd3 == output_keep_V_1_state)) | ((1'b0 == output_keep_V_1_ack_out) & (2'd1 == output_keep_V_1_state)))) begin
            output_keep_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_keep_V_1_vld_in) & (2'd2 == output_keep_V_1_state)) | ((1'b1 == output_keep_V_1_ack_out) & (2'd1 == output_keep_V_1_state)) | ((2'd3 == output_keep_V_1_state) & ~((1'b1 == output_keep_V_1_vld_in) & (1'b0 == output_keep_V_1_ack_out)) & ~((1'b0 == output_keep_V_1_vld_in) & (1'b1 == output_keep_V_1_ack_out))))) begin
            output_keep_V_1_state <= 2'd3;
        end else begin
            output_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_last_V_1_ack_out) & (1'b1 == output_last_V_1_vld_out))) begin
            output_last_V_1_sel_rd <= ~output_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_last_V_1_vld_in) & (1'b1 == output_last_V_1_ack_out) & (2'd3 == output_last_V_1_state)) | ((1'b0 == output_last_V_1_vld_in) & (2'd2 == output_last_V_1_state)))) begin
            output_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_last_V_1_vld_in) & (1'b0 == output_last_V_1_ack_out) & (2'd3 == output_last_V_1_state)) | ((1'b0 == output_last_V_1_ack_out) & (2'd1 == output_last_V_1_state)))) begin
            output_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_last_V_1_vld_in) & (2'd2 == output_last_V_1_state)) | ((1'b1 == output_last_V_1_ack_out) & (2'd1 == output_last_V_1_state)) | ((2'd3 == output_last_V_1_state) & ~((1'b1 == output_last_V_1_vld_in) & (1'b0 == output_last_V_1_ack_out)) & ~((1'b0 == output_last_V_1_vld_in) & (1'b1 == output_last_V_1_ack_out))))) begin
            output_last_V_1_state <= 2'd3;
        end else begin
            output_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_strb_V_1_ack_out) & (1'b1 == output_strb_V_1_vld_out))) begin
            output_strb_V_1_sel_rd <= ~output_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_strb_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_strb_V_1_vld_in) & (1'b1 == output_strb_V_1_ack_out) & (2'd3 == output_strb_V_1_state)) | ((1'b0 == output_strb_V_1_vld_in) & (2'd2 == output_strb_V_1_state)))) begin
            output_strb_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_strb_V_1_vld_in) & (1'b0 == output_strb_V_1_ack_out) & (2'd3 == output_strb_V_1_state)) | ((1'b0 == output_strb_V_1_ack_out) & (2'd1 == output_strb_V_1_state)))) begin
            output_strb_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_strb_V_1_vld_in) & (2'd2 == output_strb_V_1_state)) | ((1'b1 == output_strb_V_1_ack_out) & (2'd1 == output_strb_V_1_state)) | ((2'd3 == output_strb_V_1_state) & ~((1'b1 == output_strb_V_1_vld_in) & (1'b0 == output_strb_V_1_ack_out)) & ~((1'b0 == output_strb_V_1_vld_in) & (1'b1 == output_strb_V_1_ack_out))))) begin
            output_strb_V_1_state <= 2'd3;
        end else begin
            output_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_user_V_1_ack_out) & (1'b1 == output_user_V_1_vld_out))) begin
            output_user_V_1_sel_rd <= ~output_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_user_V_1_vld_in) & (1'b1 == output_user_V_1_ack_out) & (2'd3 == output_user_V_1_state)) | ((1'b0 == output_user_V_1_vld_in) & (2'd2 == output_user_V_1_state)))) begin
            output_user_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_user_V_1_vld_in) & (1'b0 == output_user_V_1_ack_out) & (2'd3 == output_user_V_1_state)) | ((1'b0 == output_user_V_1_ack_out) & (2'd1 == output_user_V_1_state)))) begin
            output_user_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_user_V_1_vld_in) & (2'd2 == output_user_V_1_state)) | ((1'b1 == output_user_V_1_ack_out) & (2'd1 == output_user_V_1_state)) | ((2'd3 == output_user_V_1_state) & ~((1'b1 == output_user_V_1_vld_in) & (1'b0 == output_user_V_1_ack_out)) & ~((1'b0 == output_user_V_1_vld_in) & (1'b1 == output_user_V_1_ack_out))))) begin
            output_user_V_1_state <= 2'd3;
        end else begin
            output_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_data_V_1_load_A)) begin
        output_data_V_1_payload_A <= p_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_data_V_1_load_B)) begin
        output_data_V_1_payload_B <= p_read;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_idle_pp0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_enable_reg_pp0_iter0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_idle_pp0_0to0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (ap_block_pp0_stage0_flag00000000 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0)))) begin
        output_AX_ALGdedo1_TDATA_blk_n = output_data_V_1_state[1'd1];
    end else begin
        output_AX_ALGdedo1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == output_data_V_1_sel)) begin
        output_data_V_1_data_out = output_data_V_1_payload_B;
    end else begin
        output_data_V_1_data_out = output_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        output_data_V_1_vld_in = 1'b1;
    end else begin
        output_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        output_dest_V_1_vld_in = 1'b1;
    end else begin
        output_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        output_id_V_1_vld_in = 1'b1;
    end else begin
        output_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        output_keep_V_1_vld_in = 1'b1;
    end else begin
        output_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        output_last_V_1_vld_in = 1'b1;
    end else begin
        output_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        output_strb_V_1_vld_in = 1'b1;
    end else begin
        output_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        output_user_V_1_vld_in = 1'b1;
    end else begin
        output_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((ap_done_reg == 1'b1) | (((1'b0 == output_data_V_1_ack_in) | (1'b0 == output_keep_V_1_ack_in) | (1'b0 == output_strb_V_1_ack_in) | (1'b0 == output_user_V_1_ack_in) | (1'b0 == output_last_V_1_ack_in) | (1'b0 == output_id_V_1_ack_in) | (1'b0 == output_dest_V_1_ack_in)) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_start) & ((1'b0 == ap_start) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((ap_done_reg == 1'b1) | ((1'b1 == ap_start) & ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == output_data_V_1_ack_in))) | (((1'b0 == output_data_V_1_ack_in) | (1'b0 == output_keep_V_1_ack_in) | (1'b0 == output_strb_V_1_ack_in) | (1'b0 == output_user_V_1_ack_in) | (1'b0 == output_last_V_1_ack_in) | (1'b0 == output_id_V_1_ack_in) | (1'b0 == output_dest_V_1_ack_in)) & (1'b1 == ap_enable_reg_pp0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((ap_done_reg == 1'b1) | ((1'b1 == ap_start) & ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == output_data_V_1_ack_in))) | (((1'b0 == output_data_V_1_ack_in) | (1'b0 == output_keep_V_1_ack_in) | (1'b0 == output_strb_V_1_ack_in) | (1'b0 == output_user_V_1_ack_in) | (1'b0 == output_last_V_1_ack_in) | (1'b0 == output_id_V_1_ack_in) | (1'b0 == output_dest_V_1_ack_in)) & (1'b1 == ap_enable_reg_pp0_iter1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((1'b0 == output_data_V_1_ack_in) | (1'b0 == output_keep_V_1_ack_in) | (1'b0 == output_strb_V_1_ack_in) | (1'b0 == output_user_V_1_ack_in) | (1'b0 == output_last_V_1_ack_in) | (1'b0 == output_id_V_1_ack_in) | (1'b0 == output_dest_V_1_ack_in));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign output_AX_ALGdedo1_TDATA = output_data_V_1_data_out;

assign output_AX_ALGdedo1_TDEST = output_dest_V_1_data_out;

assign output_AX_ALGdedo1_TID = output_id_V_1_data_out;

assign output_AX_ALGdedo1_TKEEP = output_keep_V_1_data_out;

assign output_AX_ALGdedo1_TLAST = output_last_V_1_data_out;

assign output_AX_ALGdedo1_TSTRB = output_strb_V_1_data_out;

assign output_AX_ALGdedo1_TUSER = output_user_V_1_data_out;

assign output_AX_ALGdedo1_TVALID = output_dest_V_1_state[1'd0];

assign output_data_V_1_ack_in = output_data_V_1_state[1'd1];

assign output_data_V_1_ack_out = output_AX_ALGdedo1_TREADY;

assign output_data_V_1_load_A = (output_data_V_1_state_cmp_full & ~output_data_V_1_sel_wr);

assign output_data_V_1_load_B = (output_data_V_1_sel_wr & output_data_V_1_state_cmp_full);

assign output_data_V_1_sel = output_data_V_1_sel_rd;

assign output_data_V_1_state_cmp_full = ((output_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_V_1_vld_out = output_data_V_1_state[1'd0];

assign output_dest_V_1_ack_in = output_dest_V_1_state[1'd1];

assign output_dest_V_1_ack_out = output_AX_ALGdedo1_TREADY;

assign output_dest_V_1_data_out = 5'd0;

assign output_dest_V_1_sel = output_dest_V_1_sel_rd;

assign output_dest_V_1_vld_out = output_dest_V_1_state[1'd0];

assign output_id_V_1_ack_in = output_id_V_1_state[1'd1];

assign output_id_V_1_ack_out = output_AX_ALGdedo1_TREADY;

assign output_id_V_1_data_out = 5'd0;

assign output_id_V_1_sel = output_id_V_1_sel_rd;

assign output_id_V_1_vld_out = output_id_V_1_state[1'd0];

assign output_keep_V_1_ack_in = output_keep_V_1_state[1'd1];

assign output_keep_V_1_ack_out = output_AX_ALGdedo1_TREADY;

assign output_keep_V_1_data_out = 4'd15;

assign output_keep_V_1_sel = output_keep_V_1_sel_rd;

assign output_keep_V_1_vld_out = output_keep_V_1_state[1'd0];

assign output_last_V_1_ack_in = output_last_V_1_state[1'd1];

assign output_last_V_1_ack_out = output_AX_ALGdedo1_TREADY;

assign output_last_V_1_data_out = 1'd1;

assign output_last_V_1_sel = output_last_V_1_sel_rd;

assign output_last_V_1_vld_out = output_last_V_1_state[1'd0];

assign output_strb_V_1_ack_in = output_strb_V_1_state[1'd1];

assign output_strb_V_1_ack_out = output_AX_ALGdedo1_TREADY;

assign output_strb_V_1_data_out = 4'd15;

assign output_strb_V_1_sel = output_strb_V_1_sel_rd;

assign output_strb_V_1_vld_out = output_strb_V_1_state[1'd0];

assign output_user_V_1_ack_in = output_user_V_1_state[1'd1];

assign output_user_V_1_ack_out = output_AX_ALGdedo1_TREADY;

assign output_user_V_1_data_out = 4'd0;

assign output_user_V_1_sel = output_user_V_1_sel_rd;

assign output_user_V_1_vld_out = output_user_V_1_state[1'd0];

endmodule //write_data23
