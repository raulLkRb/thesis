

================================================================
== Vivado HLS Report for 'Block_arrayctor_loop'
================================================================
* Date:           Mon Feb  1 13:51:17 2021

* Version:        2017.1 (Build 1846317 on Fri Apr 14 19:19:38 MDT 2017)
* Project:        dato2moment
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      2.32|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    2|    2|    2|    2|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 3
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
* FSM state operations: 

 <State 1>: 2.32ns
ST_1: dato_addr (2)  [1/1] 0.00ns  loc: axi_algorithm.cpp:29
newFuncRoot:0  %dato_addr = getelementptr [4 x i32]* %dato, i32 0, i32 0

ST_1: dedo0_0_V (3)  [2/2] 2.32ns  loc: axi_algorithm.cpp:29
newFuncRoot:1  %dedo0_0_V = load i32* %dato_addr, align 4

ST_1: dato_addr_1 (4)  [1/1] 0.00ns  loc: axi_algorithm.cpp:30
newFuncRoot:2  %dato_addr_1 = getelementptr [4 x i32]* %dato, i32 0, i32 1

ST_1: palma0_0_V (5)  [2/2] 2.32ns  loc: axi_algorithm.cpp:30
newFuncRoot:3  %palma0_0_V = load i32* %dato_addr_1, align 4


 <State 2>: 2.32ns
ST_2: dedo0_0_V (3)  [1/2] 2.32ns  loc: axi_algorithm.cpp:29
newFuncRoot:1  %dedo0_0_V = load i32* %dato_addr, align 4

ST_2: palma0_0_V (5)  [1/2] 2.32ns  loc: axi_algorithm.cpp:30
newFuncRoot:3  %palma0_0_V = load i32* %dato_addr_1, align 4

ST_2: dato_addr_2 (6)  [1/1] 0.00ns  loc: axi_algorithm.cpp:31
newFuncRoot:4  %dato_addr_2 = getelementptr [4 x i32]* %dato, i32 0, i32 2

ST_2: dedo1_0_V (7)  [2/2] 2.32ns  loc: axi_algorithm.cpp:31
newFuncRoot:5  %dedo1_0_V = load i32* %dato_addr_2, align 4

ST_2: dato_addr_3 (8)  [1/1] 0.00ns  loc: axi_algorithm.cpp:32
newFuncRoot:6  %dato_addr_3 = getelementptr [4 x i32]* %dato, i32 0, i32 3

ST_2: palma1_0_V (9)  [2/2] 2.32ns  loc: axi_algorithm.cpp:32
newFuncRoot:7  %palma1_0_V = load i32* %dato_addr_3, align 4


 <State 3>: 2.32ns
ST_3: dedo1_0_V (7)  [1/2] 2.32ns  loc: axi_algorithm.cpp:31
newFuncRoot:5  %dedo1_0_V = load i32* %dato_addr_2, align 4

ST_3: palma1_0_V (9)  [1/2] 2.32ns  loc: axi_algorithm.cpp:32
newFuncRoot:7  %palma1_0_V = load i32* %dato_addr_3, align 4

ST_3: mrv (10)  [1/1] 0.00ns  loc: axi_algorithm.cpp:29
newFuncRoot:8  %mrv = insertvalue { i32, i32, i32, i32 } undef, i32 %dedo0_0_V, 0

ST_3: mrv_1 (11)  [1/1] 0.00ns  loc: axi_algorithm.cpp:29
newFuncRoot:9  %mrv_1 = insertvalue { i32, i32, i32, i32 } %mrv, i32 %palma0_0_V, 1

ST_3: mrv_2 (12)  [1/1] 0.00ns  loc: axi_algorithm.cpp:29
newFuncRoot:10  %mrv_2 = insertvalue { i32, i32, i32, i32 } %mrv_1, i32 %dedo1_0_V, 2

ST_3: mrv_3 (13)  [1/1] 0.00ns  loc: axi_algorithm.cpp:29
newFuncRoot:11  %mrv_3 = insertvalue { i32, i32, i32, i32 } %mrv_2, i32 %palma1_0_V, 3

ST_3: StgValue_20 (14)  [1/1] 0.00ns  loc: axi_algorithm.cpp:29
newFuncRoot:12  ret { i32, i32, i32, i32 } %mrv_3



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 2.32ns
The critical path consists of the following:
	'getelementptr' operation ('dato_addr', axi_algorithm.cpp:29) [2]  (0 ns)
	'load' operation ('dedo0[0].V', axi_algorithm.cpp:29) on array 'dato' [3]  (2.32 ns)

 <State 2>: 2.32ns
The critical path consists of the following:
	'load' operation ('dedo0[0].V', axi_algorithm.cpp:29) on array 'dato' [3]  (2.32 ns)

 <State 3>: 2.32ns
The critical path consists of the following:
	'load' operation ('dedo1[0].V', axi_algorithm.cpp:31) on array 'dato' [7]  (2.32 ns)
	'insertvalue' operation ('mrv_2', axi_algorithm.cpp:29) [12]  (0 ns)
	'insertvalue' operation ('mrv_3', axi_algorithm.cpp:29) [13]  (0 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
