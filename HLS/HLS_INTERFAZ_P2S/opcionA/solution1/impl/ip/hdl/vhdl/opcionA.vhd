-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity opcionA is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_AX_ALGdedo0_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_AX_ALGdedo0_TVALID : IN STD_LOGIC;
    input_AX_ALGdedo0_TREADY : OUT STD_LOGIC;
    input_AX_ALGdedo0_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALGdedo0_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALGdedo0_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALGdedo0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_AX_ALGdedo0_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    input_AX_ALGdedo0_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    input_AX_ALGpalma0_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_AX_ALGpalma0_TVALID : IN STD_LOGIC;
    input_AX_ALGpalma0_TREADY : OUT STD_LOGIC;
    input_AX_ALGpalma0_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALGpalma0_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALGpalma0_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALGpalma0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_AX_ALGpalma0_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    input_AX_ALGpalma0_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    input_AX_ALGdedo1_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_AX_ALGdedo1_TVALID : IN STD_LOGIC;
    input_AX_ALGdedo1_TREADY : OUT STD_LOGIC;
    input_AX_ALGdedo1_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALGdedo1_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALGdedo1_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALGdedo1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_AX_ALGdedo1_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    input_AX_ALGdedo1_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    input_AX_ALGpalma1_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_AX_ALGpalma1_TVALID : IN STD_LOGIC;
    input_AX_ALGpalma1_TREADY : OUT STD_LOGIC;
    input_AX_ALGpalma1_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALGpalma1_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALGpalma1_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    input_AX_ALGpalma1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_AX_ALGpalma1_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    input_AX_ALGpalma1_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    output_AX_ALG_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_AX_ALG_TVALID : OUT STD_LOGIC;
    output_AX_ALG_TREADY : IN STD_LOGIC;
    output_AX_ALG_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALG_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALG_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_AX_ALG_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_AX_ALG_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_AX_ALG_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of opcionA is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "opcionA,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.140000,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=955,HLS_SYN_LUT=1243}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal input_AX_ALGdedo0_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal input_AX_ALGdedo0_data_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGdedo0_data_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGdedo0_data_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGdedo0_data_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGdedo0_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal input_AX_ALGdedo0_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal input_AX_ALGdedo0_data_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGdedo0_data_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGdedo0_data_V_0_sel : STD_LOGIC;
    signal input_AX_ALGdedo0_data_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGdedo0_data_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGdedo0_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGdedo0_data_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGdedo0_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo0_keep_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGdedo0_keep_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGdedo0_keep_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGdedo0_keep_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGdedo0_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo0_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo0_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGdedo0_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGdedo0_keep_V_0_sel : STD_LOGIC;
    signal input_AX_ALGdedo0_keep_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGdedo0_keep_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGdedo0_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGdedo0_keep_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGdedo0_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo0_strb_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGdedo0_strb_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGdedo0_strb_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGdedo0_strb_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGdedo0_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo0_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo0_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGdedo0_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGdedo0_strb_V_0_sel : STD_LOGIC;
    signal input_AX_ALGdedo0_strb_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGdedo0_strb_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGdedo0_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGdedo0_strb_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGdedo0_user_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo0_user_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGdedo0_user_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGdedo0_user_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGdedo0_user_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGdedo0_user_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo0_user_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo0_user_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGdedo0_user_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGdedo0_user_V_0_sel : STD_LOGIC;
    signal input_AX_ALGdedo0_user_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGdedo0_user_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGdedo0_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGdedo0_user_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGdedo0_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal input_AX_ALGdedo0_last_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGdedo0_last_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGdedo0_last_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGdedo0_last_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGdedo0_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal input_AX_ALGdedo0_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal input_AX_ALGdedo0_last_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGdedo0_last_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGdedo0_last_V_0_sel : STD_LOGIC;
    signal input_AX_ALGdedo0_last_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGdedo0_last_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGdedo0_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGdedo0_last_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGdedo0_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGdedo0_id_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGdedo0_id_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGdedo0_id_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGdedo0_id_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGdedo0_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGdedo0_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGdedo0_id_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGdedo0_id_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGdedo0_id_V_0_sel : STD_LOGIC;
    signal input_AX_ALGdedo0_id_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGdedo0_id_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGdedo0_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGdedo0_id_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGdedo0_dest_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGdedo0_dest_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGdedo0_dest_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGdedo0_dest_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGdedo0_dest_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGdedo0_dest_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGdedo0_dest_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGdedo0_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGdedo0_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGdedo0_dest_V_0_sel : STD_LOGIC;
    signal input_AX_ALGdedo0_dest_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGdedo0_dest_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGdedo0_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGdedo0_dest_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGpalma0_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal input_AX_ALGpalma0_data_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGpalma0_data_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGpalma0_data_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGpalma0_data_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGpalma0_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal input_AX_ALGpalma0_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal input_AX_ALGpalma0_data_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGpalma0_data_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGpalma0_data_V_0_sel : STD_LOGIC;
    signal input_AX_ALGpalma0_data_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGpalma0_data_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGpalma0_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGpalma0_data_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGpalma0_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma0_keep_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGpalma0_keep_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGpalma0_keep_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGpalma0_keep_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGpalma0_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma0_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma0_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGpalma0_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGpalma0_keep_V_0_sel : STD_LOGIC;
    signal input_AX_ALGpalma0_keep_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGpalma0_keep_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGpalma0_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGpalma0_keep_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGpalma0_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma0_strb_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGpalma0_strb_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGpalma0_strb_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGpalma0_strb_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGpalma0_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma0_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma0_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGpalma0_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGpalma0_strb_V_0_sel : STD_LOGIC;
    signal input_AX_ALGpalma0_strb_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGpalma0_strb_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGpalma0_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGpalma0_strb_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGpalma0_user_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma0_user_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGpalma0_user_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGpalma0_user_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGpalma0_user_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGpalma0_user_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma0_user_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma0_user_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGpalma0_user_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGpalma0_user_V_0_sel : STD_LOGIC;
    signal input_AX_ALGpalma0_user_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGpalma0_user_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGpalma0_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGpalma0_user_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGpalma0_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal input_AX_ALGpalma0_last_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGpalma0_last_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGpalma0_last_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGpalma0_last_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGpalma0_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal input_AX_ALGpalma0_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal input_AX_ALGpalma0_last_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGpalma0_last_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGpalma0_last_V_0_sel : STD_LOGIC;
    signal input_AX_ALGpalma0_last_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGpalma0_last_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGpalma0_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGpalma0_last_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGpalma0_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGpalma0_id_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGpalma0_id_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGpalma0_id_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGpalma0_id_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGpalma0_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGpalma0_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGpalma0_id_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGpalma0_id_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGpalma0_id_V_0_sel : STD_LOGIC;
    signal input_AX_ALGpalma0_id_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGpalma0_id_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGpalma0_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGpalma0_id_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGpalma0_dest_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGpalma0_dest_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGpalma0_dest_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGpalma0_dest_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGpalma0_dest_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGpalma0_dest_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGpalma0_dest_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGpalma0_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGpalma0_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGpalma0_dest_V_0_sel : STD_LOGIC;
    signal input_AX_ALGpalma0_dest_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGpalma0_dest_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGpalma0_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGpalma0_dest_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGdedo1_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal input_AX_ALGdedo1_data_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGdedo1_data_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGdedo1_data_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGdedo1_data_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGdedo1_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal input_AX_ALGdedo1_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal input_AX_ALGdedo1_data_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGdedo1_data_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGdedo1_data_V_0_sel : STD_LOGIC;
    signal input_AX_ALGdedo1_data_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGdedo1_data_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGdedo1_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGdedo1_data_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGdedo1_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo1_keep_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGdedo1_keep_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGdedo1_keep_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGdedo1_keep_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGdedo1_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo1_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo1_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGdedo1_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGdedo1_keep_V_0_sel : STD_LOGIC;
    signal input_AX_ALGdedo1_keep_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGdedo1_keep_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGdedo1_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGdedo1_keep_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGdedo1_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo1_strb_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGdedo1_strb_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGdedo1_strb_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGdedo1_strb_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGdedo1_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo1_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo1_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGdedo1_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGdedo1_strb_V_0_sel : STD_LOGIC;
    signal input_AX_ALGdedo1_strb_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGdedo1_strb_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGdedo1_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGdedo1_strb_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGdedo1_user_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo1_user_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGdedo1_user_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGdedo1_user_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGdedo1_user_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGdedo1_user_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo1_user_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGdedo1_user_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGdedo1_user_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGdedo1_user_V_0_sel : STD_LOGIC;
    signal input_AX_ALGdedo1_user_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGdedo1_user_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGdedo1_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGdedo1_user_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGdedo1_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal input_AX_ALGdedo1_last_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGdedo1_last_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGdedo1_last_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGdedo1_last_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGdedo1_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal input_AX_ALGdedo1_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal input_AX_ALGdedo1_last_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGdedo1_last_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGdedo1_last_V_0_sel : STD_LOGIC;
    signal input_AX_ALGdedo1_last_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGdedo1_last_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGdedo1_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGdedo1_last_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGdedo1_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGdedo1_id_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGdedo1_id_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGdedo1_id_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGdedo1_id_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGdedo1_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGdedo1_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGdedo1_id_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGdedo1_id_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGdedo1_id_V_0_sel : STD_LOGIC;
    signal input_AX_ALGdedo1_id_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGdedo1_id_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGdedo1_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGdedo1_id_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGdedo1_dest_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGdedo1_dest_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGdedo1_dest_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGdedo1_dest_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGdedo1_dest_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGdedo1_dest_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGdedo1_dest_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGdedo1_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGdedo1_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGdedo1_dest_V_0_sel : STD_LOGIC;
    signal input_AX_ALGdedo1_dest_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGdedo1_dest_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGdedo1_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGdedo1_dest_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGpalma1_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal input_AX_ALGpalma1_data_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGpalma1_data_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGpalma1_data_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGpalma1_data_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGpalma1_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal input_AX_ALGpalma1_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal input_AX_ALGpalma1_data_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGpalma1_data_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGpalma1_data_V_0_sel : STD_LOGIC;
    signal input_AX_ALGpalma1_data_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGpalma1_data_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGpalma1_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGpalma1_data_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGpalma1_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma1_keep_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGpalma1_keep_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGpalma1_keep_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGpalma1_keep_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGpalma1_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma1_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma1_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGpalma1_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGpalma1_keep_V_0_sel : STD_LOGIC;
    signal input_AX_ALGpalma1_keep_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGpalma1_keep_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGpalma1_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGpalma1_keep_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGpalma1_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma1_strb_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGpalma1_strb_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGpalma1_strb_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGpalma1_strb_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGpalma1_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma1_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma1_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGpalma1_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGpalma1_strb_V_0_sel : STD_LOGIC;
    signal input_AX_ALGpalma1_strb_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGpalma1_strb_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGpalma1_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGpalma1_strb_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGpalma1_user_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma1_user_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGpalma1_user_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGpalma1_user_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGpalma1_user_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGpalma1_user_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma1_user_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal input_AX_ALGpalma1_user_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGpalma1_user_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGpalma1_user_V_0_sel : STD_LOGIC;
    signal input_AX_ALGpalma1_user_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGpalma1_user_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGpalma1_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGpalma1_user_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGpalma1_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal input_AX_ALGpalma1_last_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGpalma1_last_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGpalma1_last_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGpalma1_last_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGpalma1_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal input_AX_ALGpalma1_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal input_AX_ALGpalma1_last_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGpalma1_last_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGpalma1_last_V_0_sel : STD_LOGIC;
    signal input_AX_ALGpalma1_last_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGpalma1_last_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGpalma1_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGpalma1_last_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGpalma1_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGpalma1_id_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGpalma1_id_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGpalma1_id_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGpalma1_id_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGpalma1_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGpalma1_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGpalma1_id_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGpalma1_id_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGpalma1_id_V_0_sel : STD_LOGIC;
    signal input_AX_ALGpalma1_id_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGpalma1_id_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGpalma1_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGpalma1_id_V_0_state_cmp_full : STD_LOGIC;
    signal input_AX_ALGpalma1_dest_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGpalma1_dest_V_0_vld_in : STD_LOGIC;
    signal input_AX_ALGpalma1_dest_V_0_vld_out : STD_LOGIC;
    signal input_AX_ALGpalma1_dest_V_0_ack_in : STD_LOGIC;
    signal input_AX_ALGpalma1_dest_V_0_ack_out : STD_LOGIC;
    signal input_AX_ALGpalma1_dest_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGpalma1_dest_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal input_AX_ALGpalma1_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal input_AX_ALGpalma1_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal input_AX_ALGpalma1_dest_V_0_sel : STD_LOGIC;
    signal input_AX_ALGpalma1_dest_V_0_load_A : STD_LOGIC;
    signal input_AX_ALGpalma1_dest_V_0_load_B : STD_LOGIC;
    signal input_AX_ALGpalma1_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_AX_ALGpalma1_dest_V_0_state_cmp_full : STD_LOGIC;
    signal output_AX_ALG_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal output_AX_ALG_data_V_1_vld_in : STD_LOGIC;
    signal output_AX_ALG_data_V_1_vld_out : STD_LOGIC;
    signal output_AX_ALG_data_V_1_ack_in : STD_LOGIC;
    signal output_AX_ALG_data_V_1_ack_out : STD_LOGIC;
    signal output_AX_ALG_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal output_AX_ALG_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal output_AX_ALG_data_V_1_sel_rd : STD_LOGIC := '0';
    signal output_AX_ALG_data_V_1_sel_wr : STD_LOGIC := '0';
    signal output_AX_ALG_data_V_1_sel : STD_LOGIC;
    signal output_AX_ALG_data_V_1_load_A : STD_LOGIC;
    signal output_AX_ALG_data_V_1_load_B : STD_LOGIC;
    signal output_AX_ALG_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_AX_ALG_data_V_1_state_cmp_full : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_keep_V_1_vld_in : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_vld_out : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_ack_in : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_ack_out : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal output_AX_ALG_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal output_AX_ALG_keep_V_1_sel : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_load_A : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_load_B : STD_LOGIC;
    signal output_AX_ALG_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_AX_ALG_keep_V_1_state_cmp_full : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_strb_V_1_vld_in : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_vld_out : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_ack_in : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_ack_out : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal output_AX_ALG_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal output_AX_ALG_strb_V_1_sel : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_load_A : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_load_B : STD_LOGIC;
    signal output_AX_ALG_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_AX_ALG_strb_V_1_state_cmp_full : STD_LOGIC;
    signal output_AX_ALG_user_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_user_V_1_vld_in : STD_LOGIC;
    signal output_AX_ALG_user_V_1_vld_out : STD_LOGIC;
    signal output_AX_ALG_user_V_1_ack_in : STD_LOGIC;
    signal output_AX_ALG_user_V_1_ack_out : STD_LOGIC;
    signal output_AX_ALG_user_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_user_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal output_AX_ALG_user_V_1_sel_rd : STD_LOGIC := '0';
    signal output_AX_ALG_user_V_1_sel_wr : STD_LOGIC := '0';
    signal output_AX_ALG_user_V_1_sel : STD_LOGIC;
    signal output_AX_ALG_user_V_1_load_A : STD_LOGIC;
    signal output_AX_ALG_user_V_1_load_B : STD_LOGIC;
    signal output_AX_ALG_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_AX_ALG_user_V_1_state_cmp_full : STD_LOGIC;
    signal output_AX_ALG_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_AX_ALG_last_V_1_vld_in : STD_LOGIC;
    signal output_AX_ALG_last_V_1_vld_out : STD_LOGIC;
    signal output_AX_ALG_last_V_1_ack_in : STD_LOGIC;
    signal output_AX_ALG_last_V_1_ack_out : STD_LOGIC;
    signal output_AX_ALG_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_AX_ALG_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_AX_ALG_last_V_1_sel_rd : STD_LOGIC := '0';
    signal output_AX_ALG_last_V_1_sel_wr : STD_LOGIC := '0';
    signal output_AX_ALG_last_V_1_sel : STD_LOGIC;
    signal output_AX_ALG_last_V_1_load_A : STD_LOGIC;
    signal output_AX_ALG_last_V_1_load_B : STD_LOGIC;
    signal output_AX_ALG_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_AX_ALG_last_V_1_state_cmp_full : STD_LOGIC;
    signal output_AX_ALG_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal output_AX_ALG_id_V_1_vld_in : STD_LOGIC;
    signal output_AX_ALG_id_V_1_vld_out : STD_LOGIC;
    signal output_AX_ALG_id_V_1_ack_in : STD_LOGIC;
    signal output_AX_ALG_id_V_1_ack_out : STD_LOGIC;
    signal output_AX_ALG_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal output_AX_ALG_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal output_AX_ALG_id_V_1_sel_rd : STD_LOGIC := '0';
    signal output_AX_ALG_id_V_1_sel_wr : STD_LOGIC := '0';
    signal output_AX_ALG_id_V_1_sel : STD_LOGIC;
    signal output_AX_ALG_id_V_1_load_A : STD_LOGIC;
    signal output_AX_ALG_id_V_1_load_B : STD_LOGIC;
    signal output_AX_ALG_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_AX_ALG_id_V_1_state_cmp_full : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal output_AX_ALG_dest_V_1_vld_in : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_vld_out : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_ack_in : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_ack_out : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal output_AX_ALG_dest_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal output_AX_ALG_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal output_AX_ALG_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal output_AX_ALG_dest_V_1_sel : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_load_A : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_load_B : STD_LOGIC;
    signal output_AX_ALG_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_AX_ALG_dest_V_1_state_cmp_full : STD_LOGIC;
    signal dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n : STD_LOGIC;
    signal input_AX_ALGdedo0_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n : STD_LOGIC;
    signal input_AX_ALGpalma0_TDATA_blk_n : STD_LOGIC;
    signal dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n : STD_LOGIC;
    signal input_AX_ALGdedo1_TDATA_blk_n : STD_LOGIC;
    signal palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n : STD_LOGIC;
    signal input_AX_ALGpalma1_TDATA_blk_n : STD_LOGIC;
    signal dedo0_0_V_read_data_fu_118_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal dedo0_0_V_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal palma0_0_V_read_data_fu_137_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal palma0_0_V_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal dedo1_0_V_read_data_fu_156_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal dedo1_0_V_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal palma1_0_V_read_data_fu_175_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal palma1_0_V_reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_data_fu_96_ap_start : STD_LOGIC;
    signal grp_write_data_fu_96_ap_done : STD_LOGIC;
    signal grp_write_data_fu_96_ap_idle : STD_LOGIC;
    signal grp_write_data_fu_96_ap_ready : STD_LOGIC;
    signal grp_write_data_fu_96_output_AX_ALG_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_data_fu_96_output_AX_ALG_TVALID : STD_LOGIC;
    signal grp_write_data_fu_96_output_AX_ALG_TREADY : STD_LOGIC;
    signal grp_write_data_fu_96_output_AX_ALG_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_data_fu_96_output_AX_ALG_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_data_fu_96_output_AX_ALG_TUSER : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_data_fu_96_output_AX_ALG_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_data_fu_96_output_AX_ALG_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_write_data_fu_96_output_AX_ALG_TDEST : STD_LOGIC_VECTOR (4 downto 0);
    signal dedo0_0_V_read_data_fu_118_ap_start : STD_LOGIC;
    signal dedo0_0_V_read_data_fu_118_ap_done : STD_LOGIC;
    signal dedo0_0_V_read_data_fu_118_ap_idle : STD_LOGIC;
    signal dedo0_0_V_read_data_fu_118_ap_ready : STD_LOGIC;
    signal dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TVALID : STD_LOGIC;
    signal dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY : STD_LOGIC;
    signal palma0_0_V_read_data_fu_137_ap_start : STD_LOGIC;
    signal palma0_0_V_read_data_fu_137_ap_done : STD_LOGIC;
    signal palma0_0_V_read_data_fu_137_ap_idle : STD_LOGIC;
    signal palma0_0_V_read_data_fu_137_ap_ready : STD_LOGIC;
    signal palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TVALID : STD_LOGIC;
    signal palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY : STD_LOGIC;
    signal dedo1_0_V_read_data_fu_156_ap_start : STD_LOGIC;
    signal dedo1_0_V_read_data_fu_156_ap_done : STD_LOGIC;
    signal dedo1_0_V_read_data_fu_156_ap_idle : STD_LOGIC;
    signal dedo1_0_V_read_data_fu_156_ap_ready : STD_LOGIC;
    signal dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TVALID : STD_LOGIC;
    signal dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY : STD_LOGIC;
    signal palma1_0_V_read_data_fu_175_ap_start : STD_LOGIC;
    signal palma1_0_V_read_data_fu_175_ap_done : STD_LOGIC;
    signal palma1_0_V_read_data_fu_175_ap_idle : STD_LOGIC;
    signal palma1_0_V_read_data_fu_175_ap_ready : STD_LOGIC;
    signal palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TVALID : STD_LOGIC;
    signal palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY : STD_LOGIC;
    signal ap_reg_grp_write_data_fu_96_ap_start : STD_LOGIC := '0';
    signal ap_block_state2_ignore_call46 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state2_ignore_call42 : BOOLEAN;
    signal ap_block_state2_ignore_call43 : BOOLEAN;
    signal ap_block_state2_ignore_call44 : BOOLEAN;
    signal ap_block_state2_ignore_call45 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4 : BOOLEAN;

    component write_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buf_1_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buf_2_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buf_3_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        output_AX_ALG_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_AX_ALG_TVALID : OUT STD_LOGIC;
        output_AX_ALG_TREADY : IN STD_LOGIC;
        output_AX_ALG_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALG_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALG_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_AX_ALG_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_AX_ALG_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_AX_ALG_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component read_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_AX_ALGpalma1_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        input_AX_ALGpalma1_TVALID : IN STD_LOGIC;
        input_AX_ALGpalma1_TREADY : OUT STD_LOGIC;
        input_AX_ALGpalma1_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        input_AX_ALGpalma1_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        input_AX_ALGpalma1_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
        input_AX_ALGpalma1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        input_AX_ALGpalma1_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        input_AX_ALGpalma1_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_AX_ALGpalma1_TDATA_blk_n : OUT STD_LOGIC );
    end component;



begin
    grp_write_data_fu_96 : component write_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_write_data_fu_96_ap_start,
        ap_done => grp_write_data_fu_96_ap_done,
        ap_idle => grp_write_data_fu_96_ap_idle,
        ap_ready => grp_write_data_fu_96_ap_ready,
        buf_0_V_read => dedo0_0_V_reg_194,
        buf_1_V_read => palma0_0_V_reg_199,
        buf_2_V_read => dedo1_0_V_reg_204,
        buf_3_V_read => palma1_0_V_reg_209,
        output_AX_ALG_TDATA => grp_write_data_fu_96_output_AX_ALG_TDATA,
        output_AX_ALG_TVALID => grp_write_data_fu_96_output_AX_ALG_TVALID,
        output_AX_ALG_TREADY => grp_write_data_fu_96_output_AX_ALG_TREADY,
        output_AX_ALG_TKEEP => grp_write_data_fu_96_output_AX_ALG_TKEEP,
        output_AX_ALG_TSTRB => grp_write_data_fu_96_output_AX_ALG_TSTRB,
        output_AX_ALG_TUSER => grp_write_data_fu_96_output_AX_ALG_TUSER,
        output_AX_ALG_TLAST => grp_write_data_fu_96_output_AX_ALG_TLAST,
        output_AX_ALG_TID => grp_write_data_fu_96_output_AX_ALG_TID,
        output_AX_ALG_TDEST => grp_write_data_fu_96_output_AX_ALG_TDEST);

    dedo0_0_V_read_data_fu_118 : component read_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => dedo0_0_V_read_data_fu_118_ap_start,
        ap_done => dedo0_0_V_read_data_fu_118_ap_done,
        ap_idle => dedo0_0_V_read_data_fu_118_ap_idle,
        ap_ready => dedo0_0_V_read_data_fu_118_ap_ready,
        input_AX_ALGpalma1_TDATA => input_AX_ALGdedo0_data_V_0_data_out,
        input_AX_ALGpalma1_TVALID => dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TVALID,
        input_AX_ALGpalma1_TREADY => dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY,
        input_AX_ALGpalma1_TKEEP => input_AX_ALGdedo0_keep_V_0_data_out,
        input_AX_ALGpalma1_TSTRB => input_AX_ALGdedo0_strb_V_0_data_out,
        input_AX_ALGpalma1_TUSER => input_AX_ALGdedo0_user_V_0_data_out,
        input_AX_ALGpalma1_TLAST => input_AX_ALGdedo0_last_V_0_data_out,
        input_AX_ALGpalma1_TID => input_AX_ALGdedo0_id_V_0_data_out,
        input_AX_ALGpalma1_TDEST => input_AX_ALGdedo0_dest_V_0_data_out,
        ap_return => dedo0_0_V_read_data_fu_118_ap_return,
        input_AX_ALGpalma1_TDATA_blk_n => dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n);

    palma0_0_V_read_data_fu_137 : component read_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => palma0_0_V_read_data_fu_137_ap_start,
        ap_done => palma0_0_V_read_data_fu_137_ap_done,
        ap_idle => palma0_0_V_read_data_fu_137_ap_idle,
        ap_ready => palma0_0_V_read_data_fu_137_ap_ready,
        input_AX_ALGpalma1_TDATA => input_AX_ALGpalma0_data_V_0_data_out,
        input_AX_ALGpalma1_TVALID => palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TVALID,
        input_AX_ALGpalma1_TREADY => palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY,
        input_AX_ALGpalma1_TKEEP => input_AX_ALGpalma0_keep_V_0_data_out,
        input_AX_ALGpalma1_TSTRB => input_AX_ALGpalma0_strb_V_0_data_out,
        input_AX_ALGpalma1_TUSER => input_AX_ALGpalma0_user_V_0_data_out,
        input_AX_ALGpalma1_TLAST => input_AX_ALGpalma0_last_V_0_data_out,
        input_AX_ALGpalma1_TID => input_AX_ALGpalma0_id_V_0_data_out,
        input_AX_ALGpalma1_TDEST => input_AX_ALGpalma0_dest_V_0_data_out,
        ap_return => palma0_0_V_read_data_fu_137_ap_return,
        input_AX_ALGpalma1_TDATA_blk_n => palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n);

    dedo1_0_V_read_data_fu_156 : component read_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => dedo1_0_V_read_data_fu_156_ap_start,
        ap_done => dedo1_0_V_read_data_fu_156_ap_done,
        ap_idle => dedo1_0_V_read_data_fu_156_ap_idle,
        ap_ready => dedo1_0_V_read_data_fu_156_ap_ready,
        input_AX_ALGpalma1_TDATA => input_AX_ALGdedo1_data_V_0_data_out,
        input_AX_ALGpalma1_TVALID => dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TVALID,
        input_AX_ALGpalma1_TREADY => dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY,
        input_AX_ALGpalma1_TKEEP => input_AX_ALGdedo1_keep_V_0_data_out,
        input_AX_ALGpalma1_TSTRB => input_AX_ALGdedo1_strb_V_0_data_out,
        input_AX_ALGpalma1_TUSER => input_AX_ALGdedo1_user_V_0_data_out,
        input_AX_ALGpalma1_TLAST => input_AX_ALGdedo1_last_V_0_data_out,
        input_AX_ALGpalma1_TID => input_AX_ALGdedo1_id_V_0_data_out,
        input_AX_ALGpalma1_TDEST => input_AX_ALGdedo1_dest_V_0_data_out,
        ap_return => dedo1_0_V_read_data_fu_156_ap_return,
        input_AX_ALGpalma1_TDATA_blk_n => dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n);

    palma1_0_V_read_data_fu_175 : component read_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => palma1_0_V_read_data_fu_175_ap_start,
        ap_done => palma1_0_V_read_data_fu_175_ap_done,
        ap_idle => palma1_0_V_read_data_fu_175_ap_idle,
        ap_ready => palma1_0_V_read_data_fu_175_ap_ready,
        input_AX_ALGpalma1_TDATA => input_AX_ALGpalma1_data_V_0_data_out,
        input_AX_ALGpalma1_TVALID => palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TVALID,
        input_AX_ALGpalma1_TREADY => palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY,
        input_AX_ALGpalma1_TKEEP => input_AX_ALGpalma1_keep_V_0_data_out,
        input_AX_ALGpalma1_TSTRB => input_AX_ALGpalma1_strb_V_0_data_out,
        input_AX_ALGpalma1_TUSER => input_AX_ALGpalma1_user_V_0_data_out,
        input_AX_ALGpalma1_TLAST => input_AX_ALGpalma1_last_V_0_data_out,
        input_AX_ALGpalma1_TID => input_AX_ALGpalma1_id_V_0_data_out,
        input_AX_ALGpalma1_TDEST => input_AX_ALGpalma1_dest_V_0_data_out,
        ap_return => palma1_0_V_read_data_fu_175_ap_return,
        input_AX_ALGpalma1_TDATA_blk_n => palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_write_data_fu_96_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_write_data_fu_96_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n))))) then 
                    ap_reg_grp_write_data_fu_96_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_write_data_fu_96_ap_ready)) then 
                    ap_reg_grp_write_data_fu_96_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo0_data_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGdedo0_data_V_0_vld_out))) then 
                                        input_AX_ALGdedo0_data_V_0_sel_rd <= not(input_AX_ALGdedo0_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo0_data_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_data_V_0_ack_in))) then 
                                        input_AX_ALGdedo0_data_V_0_sel_wr <= not(input_AX_ALGdedo0_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGdedo0_data_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_data_V_0_ack_out) and (input_AX_ALGdedo0_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = input_AX_ALGdedo0_data_V_0_vld_in) and (input_AX_ALGdedo0_data_V_0_state = ap_const_lv2_2)))) then 
                    input_AX_ALGdedo0_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo0_data_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo0_data_V_0_ack_out) and (input_AX_ALGdedo0_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = input_AX_ALGdedo0_data_V_0_ack_out) and (input_AX_ALGdedo0_data_V_0_state = ap_const_lv2_1)))) then 
                    input_AX_ALGdedo0_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo0_data_V_0_vld_in) and (input_AX_ALGdedo0_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = input_AX_ALGdedo0_data_V_0_ack_out) and (input_AX_ALGdedo0_data_V_0_state = ap_const_lv2_1)) or ((input_AX_ALGdedo0_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = input_AX_ALGdedo0_data_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo0_data_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGdedo0_data_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_data_V_0_ack_out)))))) then 
                    input_AX_ALGdedo0_data_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGdedo0_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo0_dest_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGdedo0_dest_V_0_vld_out))) then 
                                        input_AX_ALGdedo0_dest_V_0_sel_rd <= not(input_AX_ALGdedo0_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo0_dest_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_dest_V_0_ack_in))) then 
                                        input_AX_ALGdedo0_dest_V_0_sel_wr <= not(input_AX_ALGdedo0_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGdedo0_dest_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_dest_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo0_dest_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo0_dest_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo0_dest_V_0_state)))) then 
                    input_AX_ALGdedo0_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo0_dest_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo0_dest_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo0_dest_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo0_dest_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo0_dest_V_0_state)))) then 
                    input_AX_ALGdedo0_dest_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo0_dest_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo0_dest_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGdedo0_dest_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo0_dest_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGdedo0_dest_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGdedo0_dest_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo0_dest_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGdedo0_dest_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_dest_V_0_ack_out)))))) then 
                    input_AX_ALGdedo0_dest_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGdedo0_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo0_id_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGdedo0_id_V_0_vld_out))) then 
                                        input_AX_ALGdedo0_id_V_0_sel_rd <= not(input_AX_ALGdedo0_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo0_id_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_id_V_0_ack_in))) then 
                                        input_AX_ALGdedo0_id_V_0_sel_wr <= not(input_AX_ALGdedo0_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGdedo0_id_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_id_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo0_id_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo0_id_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo0_id_V_0_state)))) then 
                    input_AX_ALGdedo0_id_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo0_id_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo0_id_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo0_id_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo0_id_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo0_id_V_0_state)))) then 
                    input_AX_ALGdedo0_id_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo0_id_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo0_id_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGdedo0_id_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo0_id_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGdedo0_id_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGdedo0_id_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo0_id_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGdedo0_id_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_id_V_0_ack_out)))))) then 
                    input_AX_ALGdedo0_id_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGdedo0_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo0_keep_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGdedo0_keep_V_0_vld_out))) then 
                                        input_AX_ALGdedo0_keep_V_0_sel_rd <= not(input_AX_ALGdedo0_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo0_keep_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_keep_V_0_ack_in))) then 
                                        input_AX_ALGdedo0_keep_V_0_sel_wr <= not(input_AX_ALGdedo0_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGdedo0_keep_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_keep_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo0_keep_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo0_keep_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo0_keep_V_0_state)))) then 
                    input_AX_ALGdedo0_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo0_keep_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo0_keep_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo0_keep_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo0_keep_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo0_keep_V_0_state)))) then 
                    input_AX_ALGdedo0_keep_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo0_keep_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo0_keep_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGdedo0_keep_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo0_keep_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGdedo0_keep_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGdedo0_keep_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo0_keep_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGdedo0_keep_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_keep_V_0_ack_out)))))) then 
                    input_AX_ALGdedo0_keep_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGdedo0_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo0_last_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGdedo0_last_V_0_vld_out))) then 
                                        input_AX_ALGdedo0_last_V_0_sel_rd <= not(input_AX_ALGdedo0_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo0_last_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_last_V_0_ack_in))) then 
                                        input_AX_ALGdedo0_last_V_0_sel_wr <= not(input_AX_ALGdedo0_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGdedo0_last_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_last_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo0_last_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo0_last_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo0_last_V_0_state)))) then 
                    input_AX_ALGdedo0_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo0_last_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo0_last_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo0_last_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo0_last_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo0_last_V_0_state)))) then 
                    input_AX_ALGdedo0_last_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo0_last_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo0_last_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGdedo0_last_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo0_last_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGdedo0_last_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGdedo0_last_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo0_last_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGdedo0_last_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_last_V_0_ack_out)))))) then 
                    input_AX_ALGdedo0_last_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGdedo0_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo0_strb_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGdedo0_strb_V_0_vld_out))) then 
                                        input_AX_ALGdedo0_strb_V_0_sel_rd <= not(input_AX_ALGdedo0_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo0_strb_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_strb_V_0_ack_in))) then 
                                        input_AX_ALGdedo0_strb_V_0_sel_wr <= not(input_AX_ALGdedo0_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGdedo0_strb_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_strb_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo0_strb_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo0_strb_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo0_strb_V_0_state)))) then 
                    input_AX_ALGdedo0_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo0_strb_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo0_strb_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo0_strb_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo0_strb_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo0_strb_V_0_state)))) then 
                    input_AX_ALGdedo0_strb_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo0_strb_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo0_strb_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGdedo0_strb_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo0_strb_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGdedo0_strb_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGdedo0_strb_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo0_strb_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGdedo0_strb_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_strb_V_0_ack_out)))))) then 
                    input_AX_ALGdedo0_strb_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGdedo0_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo0_user_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGdedo0_user_V_0_vld_out))) then 
                                        input_AX_ALGdedo0_user_V_0_sel_rd <= not(input_AX_ALGdedo0_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo0_user_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_user_V_0_ack_in))) then 
                                        input_AX_ALGdedo0_user_V_0_sel_wr <= not(input_AX_ALGdedo0_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo0_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo0_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGdedo0_user_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_user_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo0_user_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo0_user_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo0_user_V_0_state)))) then 
                    input_AX_ALGdedo0_user_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo0_user_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo0_user_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo0_user_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo0_user_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo0_user_V_0_state)))) then 
                    input_AX_ALGdedo0_user_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo0_user_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo0_user_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGdedo0_user_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo0_user_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGdedo0_user_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGdedo0_user_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo0_user_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGdedo0_user_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo0_user_V_0_ack_out)))))) then 
                    input_AX_ALGdedo0_user_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGdedo0_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo1_data_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGdedo1_data_V_0_vld_out))) then 
                                        input_AX_ALGdedo1_data_V_0_sel_rd <= not(input_AX_ALGdedo1_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo1_data_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_data_V_0_ack_in))) then 
                                        input_AX_ALGdedo1_data_V_0_sel_wr <= not(input_AX_ALGdedo1_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGdedo1_data_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_data_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo1_data_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo1_data_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo1_data_V_0_state)))) then 
                    input_AX_ALGdedo1_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo1_data_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo1_data_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo1_data_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo1_data_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo1_data_V_0_state)))) then 
                    input_AX_ALGdedo1_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo1_data_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo1_data_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGdedo1_data_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo1_data_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGdedo1_data_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGdedo1_data_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo1_data_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGdedo1_data_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_data_V_0_ack_out)))))) then 
                    input_AX_ALGdedo1_data_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGdedo1_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo1_dest_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGdedo1_dest_V_0_vld_out))) then 
                                        input_AX_ALGdedo1_dest_V_0_sel_rd <= not(input_AX_ALGdedo1_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo1_dest_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_dest_V_0_ack_in))) then 
                                        input_AX_ALGdedo1_dest_V_0_sel_wr <= not(input_AX_ALGdedo1_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGdedo1_dest_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_dest_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo1_dest_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo1_dest_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo1_dest_V_0_state)))) then 
                    input_AX_ALGdedo1_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo1_dest_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo1_dest_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo1_dest_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo1_dest_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo1_dest_V_0_state)))) then 
                    input_AX_ALGdedo1_dest_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo1_dest_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo1_dest_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGdedo1_dest_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo1_dest_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGdedo1_dest_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGdedo1_dest_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo1_dest_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGdedo1_dest_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_dest_V_0_ack_out)))))) then 
                    input_AX_ALGdedo1_dest_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGdedo1_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo1_id_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGdedo1_id_V_0_vld_out))) then 
                                        input_AX_ALGdedo1_id_V_0_sel_rd <= not(input_AX_ALGdedo1_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo1_id_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_id_V_0_ack_in))) then 
                                        input_AX_ALGdedo1_id_V_0_sel_wr <= not(input_AX_ALGdedo1_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGdedo1_id_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_id_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo1_id_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo1_id_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo1_id_V_0_state)))) then 
                    input_AX_ALGdedo1_id_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo1_id_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo1_id_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo1_id_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo1_id_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo1_id_V_0_state)))) then 
                    input_AX_ALGdedo1_id_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo1_id_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo1_id_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGdedo1_id_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo1_id_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGdedo1_id_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGdedo1_id_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo1_id_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGdedo1_id_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_id_V_0_ack_out)))))) then 
                    input_AX_ALGdedo1_id_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGdedo1_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo1_keep_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGdedo1_keep_V_0_vld_out))) then 
                                        input_AX_ALGdedo1_keep_V_0_sel_rd <= not(input_AX_ALGdedo1_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo1_keep_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_keep_V_0_ack_in))) then 
                                        input_AX_ALGdedo1_keep_V_0_sel_wr <= not(input_AX_ALGdedo1_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGdedo1_keep_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_keep_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo1_keep_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo1_keep_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo1_keep_V_0_state)))) then 
                    input_AX_ALGdedo1_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo1_keep_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo1_keep_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo1_keep_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo1_keep_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo1_keep_V_0_state)))) then 
                    input_AX_ALGdedo1_keep_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo1_keep_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo1_keep_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGdedo1_keep_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo1_keep_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGdedo1_keep_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGdedo1_keep_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo1_keep_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGdedo1_keep_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_keep_V_0_ack_out)))))) then 
                    input_AX_ALGdedo1_keep_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGdedo1_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo1_last_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGdedo1_last_V_0_vld_out))) then 
                                        input_AX_ALGdedo1_last_V_0_sel_rd <= not(input_AX_ALGdedo1_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo1_last_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_last_V_0_ack_in))) then 
                                        input_AX_ALGdedo1_last_V_0_sel_wr <= not(input_AX_ALGdedo1_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGdedo1_last_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_last_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo1_last_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo1_last_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo1_last_V_0_state)))) then 
                    input_AX_ALGdedo1_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo1_last_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo1_last_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo1_last_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo1_last_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo1_last_V_0_state)))) then 
                    input_AX_ALGdedo1_last_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo1_last_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo1_last_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGdedo1_last_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo1_last_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGdedo1_last_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGdedo1_last_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo1_last_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGdedo1_last_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_last_V_0_ack_out)))))) then 
                    input_AX_ALGdedo1_last_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGdedo1_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo1_strb_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGdedo1_strb_V_0_vld_out))) then 
                                        input_AX_ALGdedo1_strb_V_0_sel_rd <= not(input_AX_ALGdedo1_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo1_strb_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_strb_V_0_ack_in))) then 
                                        input_AX_ALGdedo1_strb_V_0_sel_wr <= not(input_AX_ALGdedo1_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGdedo1_strb_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_strb_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo1_strb_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo1_strb_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo1_strb_V_0_state)))) then 
                    input_AX_ALGdedo1_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo1_strb_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo1_strb_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo1_strb_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo1_strb_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo1_strb_V_0_state)))) then 
                    input_AX_ALGdedo1_strb_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo1_strb_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo1_strb_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGdedo1_strb_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo1_strb_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGdedo1_strb_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGdedo1_strb_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo1_strb_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGdedo1_strb_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_strb_V_0_ack_out)))))) then 
                    input_AX_ALGdedo1_strb_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGdedo1_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo1_user_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGdedo1_user_V_0_vld_out))) then 
                                        input_AX_ALGdedo1_user_V_0_sel_rd <= not(input_AX_ALGdedo1_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGdedo1_user_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_user_V_0_ack_in))) then 
                                        input_AX_ALGdedo1_user_V_0_sel_wr <= not(input_AX_ALGdedo1_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGdedo1_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGdedo1_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGdedo1_user_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_user_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo1_user_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo1_user_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo1_user_V_0_state)))) then 
                    input_AX_ALGdedo1_user_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo1_user_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo1_user_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGdedo1_user_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGdedo1_user_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo1_user_V_0_state)))) then 
                    input_AX_ALGdedo1_user_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGdedo1_user_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGdedo1_user_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGdedo1_user_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGdedo1_user_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGdedo1_user_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGdedo1_user_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGdedo1_user_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGdedo1_user_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGdedo1_user_V_0_ack_out)))))) then 
                    input_AX_ALGdedo1_user_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGdedo1_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma0_data_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGpalma0_data_V_0_vld_out))) then 
                                        input_AX_ALGpalma0_data_V_0_sel_rd <= not(input_AX_ALGpalma0_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma0_data_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_data_V_0_ack_in))) then 
                                        input_AX_ALGpalma0_data_V_0_sel_wr <= not(input_AX_ALGpalma0_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGpalma0_data_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_data_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma0_data_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma0_data_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma0_data_V_0_state)))) then 
                    input_AX_ALGpalma0_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma0_data_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma0_data_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma0_data_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma0_data_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma0_data_V_0_state)))) then 
                    input_AX_ALGpalma0_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma0_data_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma0_data_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGpalma0_data_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma0_data_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGpalma0_data_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGpalma0_data_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma0_data_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGpalma0_data_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_data_V_0_ack_out)))))) then 
                    input_AX_ALGpalma0_data_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGpalma0_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma0_dest_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGpalma0_dest_V_0_vld_out))) then 
                                        input_AX_ALGpalma0_dest_V_0_sel_rd <= not(input_AX_ALGpalma0_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma0_dest_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_dest_V_0_ack_in))) then 
                                        input_AX_ALGpalma0_dest_V_0_sel_wr <= not(input_AX_ALGpalma0_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGpalma0_dest_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_dest_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma0_dest_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma0_dest_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma0_dest_V_0_state)))) then 
                    input_AX_ALGpalma0_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma0_dest_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma0_dest_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma0_dest_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma0_dest_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma0_dest_V_0_state)))) then 
                    input_AX_ALGpalma0_dest_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma0_dest_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma0_dest_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGpalma0_dest_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma0_dest_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGpalma0_dest_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGpalma0_dest_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma0_dest_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGpalma0_dest_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_dest_V_0_ack_out)))))) then 
                    input_AX_ALGpalma0_dest_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGpalma0_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma0_id_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGpalma0_id_V_0_vld_out))) then 
                                        input_AX_ALGpalma0_id_V_0_sel_rd <= not(input_AX_ALGpalma0_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma0_id_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_id_V_0_ack_in))) then 
                                        input_AX_ALGpalma0_id_V_0_sel_wr <= not(input_AX_ALGpalma0_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGpalma0_id_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_id_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma0_id_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma0_id_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma0_id_V_0_state)))) then 
                    input_AX_ALGpalma0_id_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma0_id_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma0_id_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma0_id_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma0_id_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma0_id_V_0_state)))) then 
                    input_AX_ALGpalma0_id_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma0_id_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma0_id_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGpalma0_id_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma0_id_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGpalma0_id_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGpalma0_id_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma0_id_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGpalma0_id_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_id_V_0_ack_out)))))) then 
                    input_AX_ALGpalma0_id_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGpalma0_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma0_keep_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGpalma0_keep_V_0_vld_out))) then 
                                        input_AX_ALGpalma0_keep_V_0_sel_rd <= not(input_AX_ALGpalma0_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma0_keep_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_keep_V_0_ack_in))) then 
                                        input_AX_ALGpalma0_keep_V_0_sel_wr <= not(input_AX_ALGpalma0_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGpalma0_keep_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_keep_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma0_keep_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma0_keep_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma0_keep_V_0_state)))) then 
                    input_AX_ALGpalma0_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma0_keep_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma0_keep_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma0_keep_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma0_keep_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma0_keep_V_0_state)))) then 
                    input_AX_ALGpalma0_keep_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma0_keep_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma0_keep_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGpalma0_keep_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma0_keep_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGpalma0_keep_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGpalma0_keep_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma0_keep_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGpalma0_keep_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_keep_V_0_ack_out)))))) then 
                    input_AX_ALGpalma0_keep_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGpalma0_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma0_last_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGpalma0_last_V_0_vld_out))) then 
                                        input_AX_ALGpalma0_last_V_0_sel_rd <= not(input_AX_ALGpalma0_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma0_last_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_last_V_0_ack_in))) then 
                                        input_AX_ALGpalma0_last_V_0_sel_wr <= not(input_AX_ALGpalma0_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGpalma0_last_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_last_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma0_last_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma0_last_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma0_last_V_0_state)))) then 
                    input_AX_ALGpalma0_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma0_last_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma0_last_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma0_last_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma0_last_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma0_last_V_0_state)))) then 
                    input_AX_ALGpalma0_last_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma0_last_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma0_last_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGpalma0_last_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma0_last_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGpalma0_last_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGpalma0_last_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma0_last_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGpalma0_last_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_last_V_0_ack_out)))))) then 
                    input_AX_ALGpalma0_last_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGpalma0_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma0_strb_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGpalma0_strb_V_0_vld_out))) then 
                                        input_AX_ALGpalma0_strb_V_0_sel_rd <= not(input_AX_ALGpalma0_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma0_strb_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_strb_V_0_ack_in))) then 
                                        input_AX_ALGpalma0_strb_V_0_sel_wr <= not(input_AX_ALGpalma0_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGpalma0_strb_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_strb_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma0_strb_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma0_strb_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma0_strb_V_0_state)))) then 
                    input_AX_ALGpalma0_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma0_strb_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma0_strb_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma0_strb_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma0_strb_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma0_strb_V_0_state)))) then 
                    input_AX_ALGpalma0_strb_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma0_strb_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma0_strb_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGpalma0_strb_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma0_strb_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGpalma0_strb_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGpalma0_strb_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma0_strb_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGpalma0_strb_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_strb_V_0_ack_out)))))) then 
                    input_AX_ALGpalma0_strb_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGpalma0_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma0_user_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGpalma0_user_V_0_vld_out))) then 
                                        input_AX_ALGpalma0_user_V_0_sel_rd <= not(input_AX_ALGpalma0_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma0_user_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_user_V_0_ack_in))) then 
                                        input_AX_ALGpalma0_user_V_0_sel_wr <= not(input_AX_ALGpalma0_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma0_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma0_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGpalma0_user_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_user_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma0_user_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma0_user_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma0_user_V_0_state)))) then 
                    input_AX_ALGpalma0_user_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma0_user_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma0_user_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma0_user_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma0_user_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma0_user_V_0_state)))) then 
                    input_AX_ALGpalma0_user_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma0_user_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma0_user_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGpalma0_user_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma0_user_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGpalma0_user_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGpalma0_user_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma0_user_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGpalma0_user_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma0_user_V_0_ack_out)))))) then 
                    input_AX_ALGpalma0_user_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGpalma0_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma1_data_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGpalma1_data_V_0_vld_out))) then 
                                        input_AX_ALGpalma1_data_V_0_sel_rd <= not(input_AX_ALGpalma1_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma1_data_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_data_V_0_ack_in))) then 
                                        input_AX_ALGpalma1_data_V_0_sel_wr <= not(input_AX_ALGpalma1_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGpalma1_data_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_data_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma1_data_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma1_data_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma1_data_V_0_state)))) then 
                    input_AX_ALGpalma1_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma1_data_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma1_data_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma1_data_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma1_data_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma1_data_V_0_state)))) then 
                    input_AX_ALGpalma1_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma1_data_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma1_data_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGpalma1_data_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma1_data_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGpalma1_data_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGpalma1_data_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma1_data_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGpalma1_data_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_data_V_0_ack_out)))))) then 
                    input_AX_ALGpalma1_data_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGpalma1_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma1_dest_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGpalma1_dest_V_0_vld_out))) then 
                                        input_AX_ALGpalma1_dest_V_0_sel_rd <= not(input_AX_ALGpalma1_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma1_dest_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_dest_V_0_ack_in))) then 
                                        input_AX_ALGpalma1_dest_V_0_sel_wr <= not(input_AX_ALGpalma1_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGpalma1_dest_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_dest_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma1_dest_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma1_dest_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma1_dest_V_0_state)))) then 
                    input_AX_ALGpalma1_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma1_dest_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma1_dest_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma1_dest_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma1_dest_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma1_dest_V_0_state)))) then 
                    input_AX_ALGpalma1_dest_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma1_dest_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma1_dest_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGpalma1_dest_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma1_dest_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGpalma1_dest_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGpalma1_dest_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma1_dest_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGpalma1_dest_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_dest_V_0_ack_out)))))) then 
                    input_AX_ALGpalma1_dest_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGpalma1_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma1_id_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGpalma1_id_V_0_vld_out))) then 
                                        input_AX_ALGpalma1_id_V_0_sel_rd <= not(input_AX_ALGpalma1_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma1_id_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_id_V_0_ack_in))) then 
                                        input_AX_ALGpalma1_id_V_0_sel_wr <= not(input_AX_ALGpalma1_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGpalma1_id_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_id_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma1_id_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma1_id_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma1_id_V_0_state)))) then 
                    input_AX_ALGpalma1_id_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma1_id_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma1_id_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma1_id_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma1_id_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma1_id_V_0_state)))) then 
                    input_AX_ALGpalma1_id_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma1_id_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma1_id_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGpalma1_id_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma1_id_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGpalma1_id_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGpalma1_id_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma1_id_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGpalma1_id_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_id_V_0_ack_out)))))) then 
                    input_AX_ALGpalma1_id_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGpalma1_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma1_keep_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGpalma1_keep_V_0_vld_out))) then 
                                        input_AX_ALGpalma1_keep_V_0_sel_rd <= not(input_AX_ALGpalma1_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma1_keep_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_keep_V_0_ack_in))) then 
                                        input_AX_ALGpalma1_keep_V_0_sel_wr <= not(input_AX_ALGpalma1_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGpalma1_keep_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_keep_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma1_keep_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma1_keep_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma1_keep_V_0_state)))) then 
                    input_AX_ALGpalma1_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma1_keep_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma1_keep_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma1_keep_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma1_keep_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma1_keep_V_0_state)))) then 
                    input_AX_ALGpalma1_keep_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma1_keep_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma1_keep_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGpalma1_keep_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma1_keep_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGpalma1_keep_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGpalma1_keep_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma1_keep_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGpalma1_keep_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_keep_V_0_ack_out)))))) then 
                    input_AX_ALGpalma1_keep_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGpalma1_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma1_last_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGpalma1_last_V_0_vld_out))) then 
                                        input_AX_ALGpalma1_last_V_0_sel_rd <= not(input_AX_ALGpalma1_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma1_last_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_last_V_0_ack_in))) then 
                                        input_AX_ALGpalma1_last_V_0_sel_wr <= not(input_AX_ALGpalma1_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGpalma1_last_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_last_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma1_last_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma1_last_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma1_last_V_0_state)))) then 
                    input_AX_ALGpalma1_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma1_last_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma1_last_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma1_last_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma1_last_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma1_last_V_0_state)))) then 
                    input_AX_ALGpalma1_last_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma1_last_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma1_last_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGpalma1_last_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma1_last_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGpalma1_last_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGpalma1_last_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma1_last_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGpalma1_last_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_last_V_0_ack_out)))))) then 
                    input_AX_ALGpalma1_last_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGpalma1_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma1_strb_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGpalma1_strb_V_0_vld_out))) then 
                                        input_AX_ALGpalma1_strb_V_0_sel_rd <= not(input_AX_ALGpalma1_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma1_strb_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_strb_V_0_ack_in))) then 
                                        input_AX_ALGpalma1_strb_V_0_sel_wr <= not(input_AX_ALGpalma1_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGpalma1_strb_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_strb_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma1_strb_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma1_strb_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma1_strb_V_0_state)))) then 
                    input_AX_ALGpalma1_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma1_strb_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma1_strb_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma1_strb_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma1_strb_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma1_strb_V_0_state)))) then 
                    input_AX_ALGpalma1_strb_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma1_strb_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma1_strb_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGpalma1_strb_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma1_strb_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGpalma1_strb_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGpalma1_strb_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma1_strb_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGpalma1_strb_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_strb_V_0_ack_out)))))) then 
                    input_AX_ALGpalma1_strb_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGpalma1_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma1_user_V_0_ack_out) and (ap_const_logic_1 = input_AX_ALGpalma1_user_V_0_vld_out))) then 
                                        input_AX_ALGpalma1_user_V_0_sel_rd <= not(input_AX_ALGpalma1_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_AX_ALGpalma1_user_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_user_V_0_ack_in))) then 
                                        input_AX_ALGpalma1_user_V_0_sel_wr <= not(input_AX_ALGpalma1_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_AX_ALGpalma1_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_AX_ALGpalma1_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_AX_ALGpalma1_user_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_user_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma1_user_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma1_user_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma1_user_V_0_state)))) then 
                    input_AX_ALGpalma1_user_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma1_user_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma1_user_V_0_ack_out) and (ap_const_lv2_3 = input_AX_ALGpalma1_user_V_0_state)) or ((ap_const_logic_0 = input_AX_ALGpalma1_user_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma1_user_V_0_state)))) then 
                    input_AX_ALGpalma1_user_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_AX_ALGpalma1_user_V_0_vld_in) and (ap_const_lv2_2 = input_AX_ALGpalma1_user_V_0_state)) or ((ap_const_logic_1 = input_AX_ALGpalma1_user_V_0_ack_out) and (ap_const_lv2_1 = input_AX_ALGpalma1_user_V_0_state)) or ((ap_const_lv2_3 = input_AX_ALGpalma1_user_V_0_state) and not(((ap_const_logic_1 = input_AX_ALGpalma1_user_V_0_vld_in) and (ap_const_logic_0 = input_AX_ALGpalma1_user_V_0_ack_out))) and not(((ap_const_logic_0 = input_AX_ALGpalma1_user_V_0_vld_in) and (ap_const_logic_1 = input_AX_ALGpalma1_user_V_0_ack_out)))))) then 
                    input_AX_ALGpalma1_user_V_0_state <= ap_const_lv2_3;
                else 
                    input_AX_ALGpalma1_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_data_V_1_ack_out) and (ap_const_logic_1 = output_AX_ALG_data_V_1_vld_out))) then 
                                        output_AX_ALG_data_V_1_sel_rd <= not(output_AX_ALG_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_data_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_data_V_1_ack_in))) then 
                                        output_AX_ALG_data_V_1_sel_wr <= not(output_AX_ALG_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_AX_ALG_data_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_data_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_data_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_data_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_data_V_1_state)))) then 
                    output_AX_ALG_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_AX_ALG_data_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_data_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_data_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_data_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_data_V_1_state)))) then 
                    output_AX_ALG_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_AX_ALG_data_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_data_V_1_state)) or ((ap_const_logic_1 = output_AX_ALG_data_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_data_V_1_state)) or ((ap_const_lv2_3 = output_AX_ALG_data_V_1_state) and not(((ap_const_logic_1 = output_AX_ALG_data_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_data_V_1_ack_out))) and not(((ap_const_logic_0 = output_AX_ALG_data_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_data_V_1_ack_out)))))) then 
                    output_AX_ALG_data_V_1_state <= ap_const_lv2_3;
                else 
                    output_AX_ALG_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_dest_V_1_ack_out) and (ap_const_logic_1 = output_AX_ALG_dest_V_1_vld_out))) then 
                                        output_AX_ALG_dest_V_1_sel_rd <= not(output_AX_ALG_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_dest_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_dest_V_1_ack_in))) then 
                                        output_AX_ALG_dest_V_1_sel_wr <= not(output_AX_ALG_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_AX_ALG_dest_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_dest_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_dest_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_dest_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_dest_V_1_state)))) then 
                    output_AX_ALG_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_AX_ALG_dest_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_dest_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_dest_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_dest_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_dest_V_1_state)))) then 
                    output_AX_ALG_dest_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_AX_ALG_dest_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_dest_V_1_state)) or ((ap_const_logic_1 = output_AX_ALG_dest_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_dest_V_1_state)) or ((ap_const_lv2_3 = output_AX_ALG_dest_V_1_state) and not(((ap_const_logic_1 = output_AX_ALG_dest_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_dest_V_1_ack_out))) and not(((ap_const_logic_0 = output_AX_ALG_dest_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_dest_V_1_ack_out)))))) then 
                    output_AX_ALG_dest_V_1_state <= ap_const_lv2_3;
                else 
                    output_AX_ALG_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_id_V_1_ack_out) and (ap_const_logic_1 = output_AX_ALG_id_V_1_vld_out))) then 
                                        output_AX_ALG_id_V_1_sel_rd <= not(output_AX_ALG_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_id_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_id_V_1_ack_in))) then 
                                        output_AX_ALG_id_V_1_sel_wr <= not(output_AX_ALG_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_AX_ALG_id_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_id_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_id_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_id_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_id_V_1_state)))) then 
                    output_AX_ALG_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_AX_ALG_id_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_id_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_id_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_id_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_id_V_1_state)))) then 
                    output_AX_ALG_id_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_AX_ALG_id_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_id_V_1_state)) or ((ap_const_logic_1 = output_AX_ALG_id_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_id_V_1_state)) or ((ap_const_lv2_3 = output_AX_ALG_id_V_1_state) and not(((ap_const_logic_1 = output_AX_ALG_id_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_id_V_1_ack_out))) and not(((ap_const_logic_0 = output_AX_ALG_id_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_id_V_1_ack_out)))))) then 
                    output_AX_ALG_id_V_1_state <= ap_const_lv2_3;
                else 
                    output_AX_ALG_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_keep_V_1_ack_out) and (ap_const_logic_1 = output_AX_ALG_keep_V_1_vld_out))) then 
                                        output_AX_ALG_keep_V_1_sel_rd <= not(output_AX_ALG_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_keep_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_keep_V_1_ack_in))) then 
                                        output_AX_ALG_keep_V_1_sel_wr <= not(output_AX_ALG_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_AX_ALG_keep_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_keep_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_keep_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_keep_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_keep_V_1_state)))) then 
                    output_AX_ALG_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_AX_ALG_keep_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_keep_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_keep_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_keep_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_keep_V_1_state)))) then 
                    output_AX_ALG_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_AX_ALG_keep_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_keep_V_1_state)) or ((ap_const_logic_1 = output_AX_ALG_keep_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_keep_V_1_state)) or ((ap_const_lv2_3 = output_AX_ALG_keep_V_1_state) and not(((ap_const_logic_1 = output_AX_ALG_keep_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_keep_V_1_ack_out))) and not(((ap_const_logic_0 = output_AX_ALG_keep_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_keep_V_1_ack_out)))))) then 
                    output_AX_ALG_keep_V_1_state <= ap_const_lv2_3;
                else 
                    output_AX_ALG_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_last_V_1_ack_out) and (ap_const_logic_1 = output_AX_ALG_last_V_1_vld_out))) then 
                                        output_AX_ALG_last_V_1_sel_rd <= not(output_AX_ALG_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_last_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_last_V_1_ack_in))) then 
                                        output_AX_ALG_last_V_1_sel_wr <= not(output_AX_ALG_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_AX_ALG_last_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_last_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_last_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_last_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_last_V_1_state)))) then 
                    output_AX_ALG_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_AX_ALG_last_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_last_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_last_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_last_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_last_V_1_state)))) then 
                    output_AX_ALG_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_AX_ALG_last_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_last_V_1_state)) or ((ap_const_logic_1 = output_AX_ALG_last_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_last_V_1_state)) or ((ap_const_lv2_3 = output_AX_ALG_last_V_1_state) and not(((ap_const_logic_1 = output_AX_ALG_last_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_last_V_1_ack_out))) and not(((ap_const_logic_0 = output_AX_ALG_last_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_last_V_1_ack_out)))))) then 
                    output_AX_ALG_last_V_1_state <= ap_const_lv2_3;
                else 
                    output_AX_ALG_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_strb_V_1_ack_out) and (ap_const_logic_1 = output_AX_ALG_strb_V_1_vld_out))) then 
                                        output_AX_ALG_strb_V_1_sel_rd <= not(output_AX_ALG_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_strb_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_strb_V_1_ack_in))) then 
                                        output_AX_ALG_strb_V_1_sel_wr <= not(output_AX_ALG_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_AX_ALG_strb_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_strb_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_strb_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_strb_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_strb_V_1_state)))) then 
                    output_AX_ALG_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_AX_ALG_strb_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_strb_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_strb_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_strb_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_strb_V_1_state)))) then 
                    output_AX_ALG_strb_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_AX_ALG_strb_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_strb_V_1_state)) or ((ap_const_logic_1 = output_AX_ALG_strb_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_strb_V_1_state)) or ((ap_const_lv2_3 = output_AX_ALG_strb_V_1_state) and not(((ap_const_logic_1 = output_AX_ALG_strb_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_strb_V_1_ack_out))) and not(((ap_const_logic_0 = output_AX_ALG_strb_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_strb_V_1_ack_out)))))) then 
                    output_AX_ALG_strb_V_1_state <= ap_const_lv2_3;
                else 
                    output_AX_ALG_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_user_V_1_ack_out) and (ap_const_logic_1 = output_AX_ALG_user_V_1_vld_out))) then 
                                        output_AX_ALG_user_V_1_sel_rd <= not(output_AX_ALG_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_AX_ALG_user_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_user_V_1_ack_in))) then 
                                        output_AX_ALG_user_V_1_sel_wr <= not(output_AX_ALG_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_AX_ALG_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_AX_ALG_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_AX_ALG_user_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_user_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_user_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_user_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_user_V_1_state)))) then 
                    output_AX_ALG_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_AX_ALG_user_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_user_V_1_ack_out) and (ap_const_lv2_3 = output_AX_ALG_user_V_1_state)) or ((ap_const_logic_0 = output_AX_ALG_user_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_user_V_1_state)))) then 
                    output_AX_ALG_user_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_AX_ALG_user_V_1_vld_in) and (ap_const_lv2_2 = output_AX_ALG_user_V_1_state)) or ((ap_const_logic_1 = output_AX_ALG_user_V_1_ack_out) and (ap_const_lv2_1 = output_AX_ALG_user_V_1_state)) or ((ap_const_lv2_3 = output_AX_ALG_user_V_1_state) and not(((ap_const_logic_1 = output_AX_ALG_user_V_1_vld_in) and (ap_const_logic_0 = output_AX_ALG_user_V_1_ack_out))) and not(((ap_const_logic_0 = output_AX_ALG_user_V_1_vld_in) and (ap_const_logic_1 = output_AX_ALG_user_V_1_ack_out)))))) then 
                    output_AX_ALG_user_V_1_state <= ap_const_lv2_3;
                else 
                    output_AX_ALG_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n))))) then
                dedo0_0_V_reg_194 <= dedo0_0_V_read_data_fu_118_ap_return;
                dedo1_0_V_reg_204 <= dedo1_0_V_read_data_fu_156_ap_return;
                palma0_0_V_reg_199 <= palma0_0_V_read_data_fu_137_ap_return;
                palma1_0_V_reg_209 <= palma1_0_V_read_data_fu_175_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo0_data_V_0_load_A)) then
                input_AX_ALGdedo0_data_V_0_payload_A <= input_AX_ALGdedo0_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo0_data_V_0_load_B)) then
                input_AX_ALGdedo0_data_V_0_payload_B <= input_AX_ALGdedo0_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo0_dest_V_0_load_A)) then
                input_AX_ALGdedo0_dest_V_0_payload_A <= input_AX_ALGdedo0_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo0_dest_V_0_load_B)) then
                input_AX_ALGdedo0_dest_V_0_payload_B <= input_AX_ALGdedo0_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo0_id_V_0_load_A)) then
                input_AX_ALGdedo0_id_V_0_payload_A <= input_AX_ALGdedo0_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo0_id_V_0_load_B)) then
                input_AX_ALGdedo0_id_V_0_payload_B <= input_AX_ALGdedo0_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo0_keep_V_0_load_A)) then
                input_AX_ALGdedo0_keep_V_0_payload_A <= input_AX_ALGdedo0_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo0_keep_V_0_load_B)) then
                input_AX_ALGdedo0_keep_V_0_payload_B <= input_AX_ALGdedo0_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo0_last_V_0_load_A)) then
                input_AX_ALGdedo0_last_V_0_payload_A <= input_AX_ALGdedo0_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo0_last_V_0_load_B)) then
                input_AX_ALGdedo0_last_V_0_payload_B <= input_AX_ALGdedo0_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo0_strb_V_0_load_A)) then
                input_AX_ALGdedo0_strb_V_0_payload_A <= input_AX_ALGdedo0_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo0_strb_V_0_load_B)) then
                input_AX_ALGdedo0_strb_V_0_payload_B <= input_AX_ALGdedo0_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo0_user_V_0_load_A)) then
                input_AX_ALGdedo0_user_V_0_payload_A <= input_AX_ALGdedo0_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo0_user_V_0_load_B)) then
                input_AX_ALGdedo0_user_V_0_payload_B <= input_AX_ALGdedo0_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo1_data_V_0_load_A)) then
                input_AX_ALGdedo1_data_V_0_payload_A <= input_AX_ALGdedo1_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo1_data_V_0_load_B)) then
                input_AX_ALGdedo1_data_V_0_payload_B <= input_AX_ALGdedo1_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo1_dest_V_0_load_A)) then
                input_AX_ALGdedo1_dest_V_0_payload_A <= input_AX_ALGdedo1_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo1_dest_V_0_load_B)) then
                input_AX_ALGdedo1_dest_V_0_payload_B <= input_AX_ALGdedo1_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo1_id_V_0_load_A)) then
                input_AX_ALGdedo1_id_V_0_payload_A <= input_AX_ALGdedo1_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo1_id_V_0_load_B)) then
                input_AX_ALGdedo1_id_V_0_payload_B <= input_AX_ALGdedo1_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo1_keep_V_0_load_A)) then
                input_AX_ALGdedo1_keep_V_0_payload_A <= input_AX_ALGdedo1_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo1_keep_V_0_load_B)) then
                input_AX_ALGdedo1_keep_V_0_payload_B <= input_AX_ALGdedo1_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo1_last_V_0_load_A)) then
                input_AX_ALGdedo1_last_V_0_payload_A <= input_AX_ALGdedo1_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo1_last_V_0_load_B)) then
                input_AX_ALGdedo1_last_V_0_payload_B <= input_AX_ALGdedo1_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo1_strb_V_0_load_A)) then
                input_AX_ALGdedo1_strb_V_0_payload_A <= input_AX_ALGdedo1_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo1_strb_V_0_load_B)) then
                input_AX_ALGdedo1_strb_V_0_payload_B <= input_AX_ALGdedo1_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo1_user_V_0_load_A)) then
                input_AX_ALGdedo1_user_V_0_payload_A <= input_AX_ALGdedo1_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGdedo1_user_V_0_load_B)) then
                input_AX_ALGdedo1_user_V_0_payload_B <= input_AX_ALGdedo1_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma0_data_V_0_load_A)) then
                input_AX_ALGpalma0_data_V_0_payload_A <= input_AX_ALGpalma0_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma0_data_V_0_load_B)) then
                input_AX_ALGpalma0_data_V_0_payload_B <= input_AX_ALGpalma0_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma0_dest_V_0_load_A)) then
                input_AX_ALGpalma0_dest_V_0_payload_A <= input_AX_ALGpalma0_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma0_dest_V_0_load_B)) then
                input_AX_ALGpalma0_dest_V_0_payload_B <= input_AX_ALGpalma0_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma0_id_V_0_load_A)) then
                input_AX_ALGpalma0_id_V_0_payload_A <= input_AX_ALGpalma0_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma0_id_V_0_load_B)) then
                input_AX_ALGpalma0_id_V_0_payload_B <= input_AX_ALGpalma0_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma0_keep_V_0_load_A)) then
                input_AX_ALGpalma0_keep_V_0_payload_A <= input_AX_ALGpalma0_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma0_keep_V_0_load_B)) then
                input_AX_ALGpalma0_keep_V_0_payload_B <= input_AX_ALGpalma0_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma0_last_V_0_load_A)) then
                input_AX_ALGpalma0_last_V_0_payload_A <= input_AX_ALGpalma0_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma0_last_V_0_load_B)) then
                input_AX_ALGpalma0_last_V_0_payload_B <= input_AX_ALGpalma0_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma0_strb_V_0_load_A)) then
                input_AX_ALGpalma0_strb_V_0_payload_A <= input_AX_ALGpalma0_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma0_strb_V_0_load_B)) then
                input_AX_ALGpalma0_strb_V_0_payload_B <= input_AX_ALGpalma0_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma0_user_V_0_load_A)) then
                input_AX_ALGpalma0_user_V_0_payload_A <= input_AX_ALGpalma0_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma0_user_V_0_load_B)) then
                input_AX_ALGpalma0_user_V_0_payload_B <= input_AX_ALGpalma0_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma1_data_V_0_load_A)) then
                input_AX_ALGpalma1_data_V_0_payload_A <= input_AX_ALGpalma1_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma1_data_V_0_load_B)) then
                input_AX_ALGpalma1_data_V_0_payload_B <= input_AX_ALGpalma1_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma1_dest_V_0_load_A)) then
                input_AX_ALGpalma1_dest_V_0_payload_A <= input_AX_ALGpalma1_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma1_dest_V_0_load_B)) then
                input_AX_ALGpalma1_dest_V_0_payload_B <= input_AX_ALGpalma1_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma1_id_V_0_load_A)) then
                input_AX_ALGpalma1_id_V_0_payload_A <= input_AX_ALGpalma1_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma1_id_V_0_load_B)) then
                input_AX_ALGpalma1_id_V_0_payload_B <= input_AX_ALGpalma1_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma1_keep_V_0_load_A)) then
                input_AX_ALGpalma1_keep_V_0_payload_A <= input_AX_ALGpalma1_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma1_keep_V_0_load_B)) then
                input_AX_ALGpalma1_keep_V_0_payload_B <= input_AX_ALGpalma1_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma1_last_V_0_load_A)) then
                input_AX_ALGpalma1_last_V_0_payload_A <= input_AX_ALGpalma1_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma1_last_V_0_load_B)) then
                input_AX_ALGpalma1_last_V_0_payload_B <= input_AX_ALGpalma1_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma1_strb_V_0_load_A)) then
                input_AX_ALGpalma1_strb_V_0_payload_A <= input_AX_ALGpalma1_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma1_strb_V_0_load_B)) then
                input_AX_ALGpalma1_strb_V_0_payload_B <= input_AX_ALGpalma1_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma1_user_V_0_load_A)) then
                input_AX_ALGpalma1_user_V_0_payload_A <= input_AX_ALGpalma1_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_AX_ALGpalma1_user_V_0_load_B)) then
                input_AX_ALGpalma1_user_V_0_payload_B <= input_AX_ALGpalma1_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_data_V_1_load_A)) then
                output_AX_ALG_data_V_1_payload_A <= grp_write_data_fu_96_output_AX_ALG_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_data_V_1_load_B)) then
                output_AX_ALG_data_V_1_payload_B <= grp_write_data_fu_96_output_AX_ALG_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_dest_V_1_load_A)) then
                output_AX_ALG_dest_V_1_payload_A <= grp_write_data_fu_96_output_AX_ALG_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_dest_V_1_load_B)) then
                output_AX_ALG_dest_V_1_payload_B <= grp_write_data_fu_96_output_AX_ALG_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_id_V_1_load_A)) then
                output_AX_ALG_id_V_1_payload_A <= grp_write_data_fu_96_output_AX_ALG_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_id_V_1_load_B)) then
                output_AX_ALG_id_V_1_payload_B <= grp_write_data_fu_96_output_AX_ALG_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_keep_V_1_load_A)) then
                output_AX_ALG_keep_V_1_payload_A <= grp_write_data_fu_96_output_AX_ALG_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_keep_V_1_load_B)) then
                output_AX_ALG_keep_V_1_payload_B <= grp_write_data_fu_96_output_AX_ALG_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_last_V_1_load_A)) then
                output_AX_ALG_last_V_1_payload_A <= grp_write_data_fu_96_output_AX_ALG_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_last_V_1_load_B)) then
                output_AX_ALG_last_V_1_payload_B <= grp_write_data_fu_96_output_AX_ALG_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_strb_V_1_load_A)) then
                output_AX_ALG_strb_V_1_payload_A <= grp_write_data_fu_96_output_AX_ALG_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_strb_V_1_load_B)) then
                output_AX_ALG_strb_V_1_payload_B <= grp_write_data_fu_96_output_AX_ALG_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_user_V_1_load_A)) then
                output_AX_ALG_user_V_1_payload_A <= grp_write_data_fu_96_output_AX_ALG_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_AX_ALG_user_V_1_load_B)) then
                output_AX_ALG_user_V_1_payload_B <= grp_write_data_fu_96_output_AX_ALG_TUSER;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (output_AX_ALG_data_V_1_ack_in, output_AX_ALG_keep_V_1_ack_in, output_AX_ALG_strb_V_1_ack_in, output_AX_ALG_user_V_1_ack_in, output_AX_ALG_last_V_1_ack_in, output_AX_ALG_id_V_1_ack_in, output_AX_ALG_dest_V_1_ack_in, dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n, ap_CS_fsm, ap_CS_fsm_state2, palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n, dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n, palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n, grp_write_data_fu_96_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n))))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_write_data_fu_96_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and not(((ap_const_logic_0 = output_AX_ALG_data_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_keep_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_strb_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_user_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_last_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_id_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_dest_V_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state2_assign_proc : process(dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n, palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n, dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n, palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n));
    end process;


    ap_block_state2_ignore_call42_assign_proc : process(palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n, dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n, palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)
    begin
                ap_block_state2_ignore_call42 <= ((ap_const_logic_0 = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n));
    end process;


    ap_block_state2_ignore_call43_assign_proc : process(dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n, dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n, palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)
    begin
                ap_block_state2_ignore_call43 <= ((ap_const_logic_0 = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n));
    end process;


    ap_block_state2_ignore_call44_assign_proc : process(dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n, palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n, palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)
    begin
                ap_block_state2_ignore_call44 <= ((ap_const_logic_0 = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n));
    end process;


    ap_block_state2_ignore_call45_assign_proc : process(dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n, palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n, dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n)
    begin
                ap_block_state2_ignore_call45 <= ((ap_const_logic_0 = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n));
    end process;


    ap_block_state2_ignore_call46_assign_proc : process(dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n, palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n, dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n, palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)
    begin
                ap_block_state2_ignore_call46 <= ((ap_const_logic_0 = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n));
    end process;


    ap_block_state4_assign_proc : process(output_AX_ALG_data_V_1_ack_in, output_AX_ALG_keep_V_1_ack_in, output_AX_ALG_strb_V_1_ack_in, output_AX_ALG_user_V_1_ack_in, output_AX_ALG_last_V_1_ack_in, output_AX_ALG_id_V_1_ack_in, output_AX_ALG_dest_V_1_ack_in)
    begin
                ap_block_state4 <= ((ap_const_logic_0 = output_AX_ALG_data_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_keep_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_strb_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_user_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_last_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_id_V_1_ack_in) or (ap_const_logic_0 = output_AX_ALG_dest_V_1_ack_in));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    dedo0_0_V_read_data_fu_118_ap_start_assign_proc : process(ap_CS_fsm_state2, palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n, dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n, palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n))))) then 
            dedo0_0_V_read_data_fu_118_ap_start <= ap_const_logic_1;
        else 
            dedo0_0_V_read_data_fu_118_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TVALID <= input_AX_ALGdedo0_dest_V_0_state(0);

    dedo1_0_V_read_data_fu_156_ap_start_assign_proc : process(dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n, ap_CS_fsm_state2, palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n, palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n))))) then 
            dedo1_0_V_read_data_fu_156_ap_start <= ap_const_logic_1;
        else 
            dedo1_0_V_read_data_fu_156_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TVALID <= input_AX_ALGdedo1_dest_V_0_state(0);
    grp_write_data_fu_96_ap_start <= ap_reg_grp_write_data_fu_96_ap_start;
    grp_write_data_fu_96_output_AX_ALG_TREADY <= output_AX_ALG_dest_V_1_state(1);

    input_AX_ALGdedo0_TDATA_blk_n_assign_proc : process(dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_AX_ALGdedo0_TDATA_blk_n <= dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n;
        else 
            input_AX_ALGdedo0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_AX_ALGdedo0_TREADY <= input_AX_ALGdedo0_dest_V_0_state(1);
    input_AX_ALGdedo0_data_V_0_ack_in <= input_AX_ALGdedo0_data_V_0_state(1);
    input_AX_ALGdedo0_data_V_0_ack_out <= dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY;

    input_AX_ALGdedo0_data_V_0_data_out_assign_proc : process(input_AX_ALGdedo0_data_V_0_payload_A, input_AX_ALGdedo0_data_V_0_payload_B, input_AX_ALGdedo0_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGdedo0_data_V_0_sel)) then 
            input_AX_ALGdedo0_data_V_0_data_out <= input_AX_ALGdedo0_data_V_0_payload_B;
        else 
            input_AX_ALGdedo0_data_V_0_data_out <= input_AX_ALGdedo0_data_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGdedo0_data_V_0_load_A <= (input_AX_ALGdedo0_data_V_0_state_cmp_full and not(input_AX_ALGdedo0_data_V_0_sel_wr));
    input_AX_ALGdedo0_data_V_0_load_B <= (input_AX_ALGdedo0_data_V_0_sel_wr and input_AX_ALGdedo0_data_V_0_state_cmp_full);
    input_AX_ALGdedo0_data_V_0_sel <= input_AX_ALGdedo0_data_V_0_sel_rd;
    input_AX_ALGdedo0_data_V_0_state_cmp_full <= '0' when (input_AX_ALGdedo0_data_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGdedo0_data_V_0_vld_in <= input_AX_ALGdedo0_TVALID;
    input_AX_ALGdedo0_data_V_0_vld_out <= input_AX_ALGdedo0_data_V_0_state(0);
    input_AX_ALGdedo0_dest_V_0_ack_in <= input_AX_ALGdedo0_dest_V_0_state(1);
    input_AX_ALGdedo0_dest_V_0_ack_out <= dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY;

    input_AX_ALGdedo0_dest_V_0_data_out_assign_proc : process(input_AX_ALGdedo0_dest_V_0_payload_A, input_AX_ALGdedo0_dest_V_0_payload_B, input_AX_ALGdedo0_dest_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGdedo0_dest_V_0_sel)) then 
            input_AX_ALGdedo0_dest_V_0_data_out <= input_AX_ALGdedo0_dest_V_0_payload_B;
        else 
            input_AX_ALGdedo0_dest_V_0_data_out <= input_AX_ALGdedo0_dest_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGdedo0_dest_V_0_load_A <= (input_AX_ALGdedo0_dest_V_0_state_cmp_full and not(input_AX_ALGdedo0_dest_V_0_sel_wr));
    input_AX_ALGdedo0_dest_V_0_load_B <= (input_AX_ALGdedo0_dest_V_0_sel_wr and input_AX_ALGdedo0_dest_V_0_state_cmp_full);
    input_AX_ALGdedo0_dest_V_0_sel <= input_AX_ALGdedo0_dest_V_0_sel_rd;
    input_AX_ALGdedo0_dest_V_0_state_cmp_full <= '0' when (input_AX_ALGdedo0_dest_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGdedo0_dest_V_0_vld_in <= input_AX_ALGdedo0_TVALID;
    input_AX_ALGdedo0_dest_V_0_vld_out <= input_AX_ALGdedo0_dest_V_0_state(0);
    input_AX_ALGdedo0_id_V_0_ack_in <= input_AX_ALGdedo0_id_V_0_state(1);
    input_AX_ALGdedo0_id_V_0_ack_out <= dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY;

    input_AX_ALGdedo0_id_V_0_data_out_assign_proc : process(input_AX_ALGdedo0_id_V_0_payload_A, input_AX_ALGdedo0_id_V_0_payload_B, input_AX_ALGdedo0_id_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGdedo0_id_V_0_sel)) then 
            input_AX_ALGdedo0_id_V_0_data_out <= input_AX_ALGdedo0_id_V_0_payload_B;
        else 
            input_AX_ALGdedo0_id_V_0_data_out <= input_AX_ALGdedo0_id_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGdedo0_id_V_0_load_A <= (input_AX_ALGdedo0_id_V_0_state_cmp_full and not(input_AX_ALGdedo0_id_V_0_sel_wr));
    input_AX_ALGdedo0_id_V_0_load_B <= (input_AX_ALGdedo0_id_V_0_sel_wr and input_AX_ALGdedo0_id_V_0_state_cmp_full);
    input_AX_ALGdedo0_id_V_0_sel <= input_AX_ALGdedo0_id_V_0_sel_rd;
    input_AX_ALGdedo0_id_V_0_state_cmp_full <= '0' when (input_AX_ALGdedo0_id_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGdedo0_id_V_0_vld_in <= input_AX_ALGdedo0_TVALID;
    input_AX_ALGdedo0_id_V_0_vld_out <= input_AX_ALGdedo0_id_V_0_state(0);
    input_AX_ALGdedo0_keep_V_0_ack_in <= input_AX_ALGdedo0_keep_V_0_state(1);
    input_AX_ALGdedo0_keep_V_0_ack_out <= dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY;

    input_AX_ALGdedo0_keep_V_0_data_out_assign_proc : process(input_AX_ALGdedo0_keep_V_0_payload_A, input_AX_ALGdedo0_keep_V_0_payload_B, input_AX_ALGdedo0_keep_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGdedo0_keep_V_0_sel)) then 
            input_AX_ALGdedo0_keep_V_0_data_out <= input_AX_ALGdedo0_keep_V_0_payload_B;
        else 
            input_AX_ALGdedo0_keep_V_0_data_out <= input_AX_ALGdedo0_keep_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGdedo0_keep_V_0_load_A <= (input_AX_ALGdedo0_keep_V_0_state_cmp_full and not(input_AX_ALGdedo0_keep_V_0_sel_wr));
    input_AX_ALGdedo0_keep_V_0_load_B <= (input_AX_ALGdedo0_keep_V_0_sel_wr and input_AX_ALGdedo0_keep_V_0_state_cmp_full);
    input_AX_ALGdedo0_keep_V_0_sel <= input_AX_ALGdedo0_keep_V_0_sel_rd;
    input_AX_ALGdedo0_keep_V_0_state_cmp_full <= '0' when (input_AX_ALGdedo0_keep_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGdedo0_keep_V_0_vld_in <= input_AX_ALGdedo0_TVALID;
    input_AX_ALGdedo0_keep_V_0_vld_out <= input_AX_ALGdedo0_keep_V_0_state(0);
    input_AX_ALGdedo0_last_V_0_ack_in <= input_AX_ALGdedo0_last_V_0_state(1);
    input_AX_ALGdedo0_last_V_0_ack_out <= dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY;

    input_AX_ALGdedo0_last_V_0_data_out_assign_proc : process(input_AX_ALGdedo0_last_V_0_payload_A, input_AX_ALGdedo0_last_V_0_payload_B, input_AX_ALGdedo0_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGdedo0_last_V_0_sel)) then 
            input_AX_ALGdedo0_last_V_0_data_out <= input_AX_ALGdedo0_last_V_0_payload_B;
        else 
            input_AX_ALGdedo0_last_V_0_data_out <= input_AX_ALGdedo0_last_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGdedo0_last_V_0_load_A <= (input_AX_ALGdedo0_last_V_0_state_cmp_full and not(input_AX_ALGdedo0_last_V_0_sel_wr));
    input_AX_ALGdedo0_last_V_0_load_B <= (input_AX_ALGdedo0_last_V_0_sel_wr and input_AX_ALGdedo0_last_V_0_state_cmp_full);
    input_AX_ALGdedo0_last_V_0_sel <= input_AX_ALGdedo0_last_V_0_sel_rd;
    input_AX_ALGdedo0_last_V_0_state_cmp_full <= '0' when (input_AX_ALGdedo0_last_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGdedo0_last_V_0_vld_in <= input_AX_ALGdedo0_TVALID;
    input_AX_ALGdedo0_last_V_0_vld_out <= input_AX_ALGdedo0_last_V_0_state(0);
    input_AX_ALGdedo0_strb_V_0_ack_in <= input_AX_ALGdedo0_strb_V_0_state(1);
    input_AX_ALGdedo0_strb_V_0_ack_out <= dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY;

    input_AX_ALGdedo0_strb_V_0_data_out_assign_proc : process(input_AX_ALGdedo0_strb_V_0_payload_A, input_AX_ALGdedo0_strb_V_0_payload_B, input_AX_ALGdedo0_strb_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGdedo0_strb_V_0_sel)) then 
            input_AX_ALGdedo0_strb_V_0_data_out <= input_AX_ALGdedo0_strb_V_0_payload_B;
        else 
            input_AX_ALGdedo0_strb_V_0_data_out <= input_AX_ALGdedo0_strb_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGdedo0_strb_V_0_load_A <= (input_AX_ALGdedo0_strb_V_0_state_cmp_full and not(input_AX_ALGdedo0_strb_V_0_sel_wr));
    input_AX_ALGdedo0_strb_V_0_load_B <= (input_AX_ALGdedo0_strb_V_0_sel_wr and input_AX_ALGdedo0_strb_V_0_state_cmp_full);
    input_AX_ALGdedo0_strb_V_0_sel <= input_AX_ALGdedo0_strb_V_0_sel_rd;
    input_AX_ALGdedo0_strb_V_0_state_cmp_full <= '0' when (input_AX_ALGdedo0_strb_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGdedo0_strb_V_0_vld_in <= input_AX_ALGdedo0_TVALID;
    input_AX_ALGdedo0_strb_V_0_vld_out <= input_AX_ALGdedo0_strb_V_0_state(0);
    input_AX_ALGdedo0_user_V_0_ack_in <= input_AX_ALGdedo0_user_V_0_state(1);
    input_AX_ALGdedo0_user_V_0_ack_out <= dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY;

    input_AX_ALGdedo0_user_V_0_data_out_assign_proc : process(input_AX_ALGdedo0_user_V_0_payload_A, input_AX_ALGdedo0_user_V_0_payload_B, input_AX_ALGdedo0_user_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGdedo0_user_V_0_sel)) then 
            input_AX_ALGdedo0_user_V_0_data_out <= input_AX_ALGdedo0_user_V_0_payload_B;
        else 
            input_AX_ALGdedo0_user_V_0_data_out <= input_AX_ALGdedo0_user_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGdedo0_user_V_0_load_A <= (input_AX_ALGdedo0_user_V_0_state_cmp_full and not(input_AX_ALGdedo0_user_V_0_sel_wr));
    input_AX_ALGdedo0_user_V_0_load_B <= (input_AX_ALGdedo0_user_V_0_sel_wr and input_AX_ALGdedo0_user_V_0_state_cmp_full);
    input_AX_ALGdedo0_user_V_0_sel <= input_AX_ALGdedo0_user_V_0_sel_rd;
    input_AX_ALGdedo0_user_V_0_state_cmp_full <= '0' when (input_AX_ALGdedo0_user_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGdedo0_user_V_0_vld_in <= input_AX_ALGdedo0_TVALID;
    input_AX_ALGdedo0_user_V_0_vld_out <= input_AX_ALGdedo0_user_V_0_state(0);

    input_AX_ALGdedo1_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_AX_ALGdedo1_TDATA_blk_n <= dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n;
        else 
            input_AX_ALGdedo1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_AX_ALGdedo1_TREADY <= input_AX_ALGdedo1_dest_V_0_state(1);
    input_AX_ALGdedo1_data_V_0_ack_in <= input_AX_ALGdedo1_data_V_0_state(1);
    input_AX_ALGdedo1_data_V_0_ack_out <= dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY;

    input_AX_ALGdedo1_data_V_0_data_out_assign_proc : process(input_AX_ALGdedo1_data_V_0_payload_A, input_AX_ALGdedo1_data_V_0_payload_B, input_AX_ALGdedo1_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGdedo1_data_V_0_sel)) then 
            input_AX_ALGdedo1_data_V_0_data_out <= input_AX_ALGdedo1_data_V_0_payload_B;
        else 
            input_AX_ALGdedo1_data_V_0_data_out <= input_AX_ALGdedo1_data_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGdedo1_data_V_0_load_A <= (input_AX_ALGdedo1_data_V_0_state_cmp_full and not(input_AX_ALGdedo1_data_V_0_sel_wr));
    input_AX_ALGdedo1_data_V_0_load_B <= (input_AX_ALGdedo1_data_V_0_sel_wr and input_AX_ALGdedo1_data_V_0_state_cmp_full);
    input_AX_ALGdedo1_data_V_0_sel <= input_AX_ALGdedo1_data_V_0_sel_rd;
    input_AX_ALGdedo1_data_V_0_state_cmp_full <= '0' when (input_AX_ALGdedo1_data_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGdedo1_data_V_0_vld_in <= input_AX_ALGdedo1_TVALID;
    input_AX_ALGdedo1_data_V_0_vld_out <= input_AX_ALGdedo1_data_V_0_state(0);
    input_AX_ALGdedo1_dest_V_0_ack_in <= input_AX_ALGdedo1_dest_V_0_state(1);
    input_AX_ALGdedo1_dest_V_0_ack_out <= dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY;

    input_AX_ALGdedo1_dest_V_0_data_out_assign_proc : process(input_AX_ALGdedo1_dest_V_0_payload_A, input_AX_ALGdedo1_dest_V_0_payload_B, input_AX_ALGdedo1_dest_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGdedo1_dest_V_0_sel)) then 
            input_AX_ALGdedo1_dest_V_0_data_out <= input_AX_ALGdedo1_dest_V_0_payload_B;
        else 
            input_AX_ALGdedo1_dest_V_0_data_out <= input_AX_ALGdedo1_dest_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGdedo1_dest_V_0_load_A <= (input_AX_ALGdedo1_dest_V_0_state_cmp_full and not(input_AX_ALGdedo1_dest_V_0_sel_wr));
    input_AX_ALGdedo1_dest_V_0_load_B <= (input_AX_ALGdedo1_dest_V_0_sel_wr and input_AX_ALGdedo1_dest_V_0_state_cmp_full);
    input_AX_ALGdedo1_dest_V_0_sel <= input_AX_ALGdedo1_dest_V_0_sel_rd;
    input_AX_ALGdedo1_dest_V_0_state_cmp_full <= '0' when (input_AX_ALGdedo1_dest_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGdedo1_dest_V_0_vld_in <= input_AX_ALGdedo1_TVALID;
    input_AX_ALGdedo1_dest_V_0_vld_out <= input_AX_ALGdedo1_dest_V_0_state(0);
    input_AX_ALGdedo1_id_V_0_ack_in <= input_AX_ALGdedo1_id_V_0_state(1);
    input_AX_ALGdedo1_id_V_0_ack_out <= dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY;

    input_AX_ALGdedo1_id_V_0_data_out_assign_proc : process(input_AX_ALGdedo1_id_V_0_payload_A, input_AX_ALGdedo1_id_V_0_payload_B, input_AX_ALGdedo1_id_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGdedo1_id_V_0_sel)) then 
            input_AX_ALGdedo1_id_V_0_data_out <= input_AX_ALGdedo1_id_V_0_payload_B;
        else 
            input_AX_ALGdedo1_id_V_0_data_out <= input_AX_ALGdedo1_id_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGdedo1_id_V_0_load_A <= (input_AX_ALGdedo1_id_V_0_state_cmp_full and not(input_AX_ALGdedo1_id_V_0_sel_wr));
    input_AX_ALGdedo1_id_V_0_load_B <= (input_AX_ALGdedo1_id_V_0_sel_wr and input_AX_ALGdedo1_id_V_0_state_cmp_full);
    input_AX_ALGdedo1_id_V_0_sel <= input_AX_ALGdedo1_id_V_0_sel_rd;
    input_AX_ALGdedo1_id_V_0_state_cmp_full <= '0' when (input_AX_ALGdedo1_id_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGdedo1_id_V_0_vld_in <= input_AX_ALGdedo1_TVALID;
    input_AX_ALGdedo1_id_V_0_vld_out <= input_AX_ALGdedo1_id_V_0_state(0);
    input_AX_ALGdedo1_keep_V_0_ack_in <= input_AX_ALGdedo1_keep_V_0_state(1);
    input_AX_ALGdedo1_keep_V_0_ack_out <= dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY;

    input_AX_ALGdedo1_keep_V_0_data_out_assign_proc : process(input_AX_ALGdedo1_keep_V_0_payload_A, input_AX_ALGdedo1_keep_V_0_payload_B, input_AX_ALGdedo1_keep_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGdedo1_keep_V_0_sel)) then 
            input_AX_ALGdedo1_keep_V_0_data_out <= input_AX_ALGdedo1_keep_V_0_payload_B;
        else 
            input_AX_ALGdedo1_keep_V_0_data_out <= input_AX_ALGdedo1_keep_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGdedo1_keep_V_0_load_A <= (input_AX_ALGdedo1_keep_V_0_state_cmp_full and not(input_AX_ALGdedo1_keep_V_0_sel_wr));
    input_AX_ALGdedo1_keep_V_0_load_B <= (input_AX_ALGdedo1_keep_V_0_sel_wr and input_AX_ALGdedo1_keep_V_0_state_cmp_full);
    input_AX_ALGdedo1_keep_V_0_sel <= input_AX_ALGdedo1_keep_V_0_sel_rd;
    input_AX_ALGdedo1_keep_V_0_state_cmp_full <= '0' when (input_AX_ALGdedo1_keep_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGdedo1_keep_V_0_vld_in <= input_AX_ALGdedo1_TVALID;
    input_AX_ALGdedo1_keep_V_0_vld_out <= input_AX_ALGdedo1_keep_V_0_state(0);
    input_AX_ALGdedo1_last_V_0_ack_in <= input_AX_ALGdedo1_last_V_0_state(1);
    input_AX_ALGdedo1_last_V_0_ack_out <= dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY;

    input_AX_ALGdedo1_last_V_0_data_out_assign_proc : process(input_AX_ALGdedo1_last_V_0_payload_A, input_AX_ALGdedo1_last_V_0_payload_B, input_AX_ALGdedo1_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGdedo1_last_V_0_sel)) then 
            input_AX_ALGdedo1_last_V_0_data_out <= input_AX_ALGdedo1_last_V_0_payload_B;
        else 
            input_AX_ALGdedo1_last_V_0_data_out <= input_AX_ALGdedo1_last_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGdedo1_last_V_0_load_A <= (input_AX_ALGdedo1_last_V_0_state_cmp_full and not(input_AX_ALGdedo1_last_V_0_sel_wr));
    input_AX_ALGdedo1_last_V_0_load_B <= (input_AX_ALGdedo1_last_V_0_sel_wr and input_AX_ALGdedo1_last_V_0_state_cmp_full);
    input_AX_ALGdedo1_last_V_0_sel <= input_AX_ALGdedo1_last_V_0_sel_rd;
    input_AX_ALGdedo1_last_V_0_state_cmp_full <= '0' when (input_AX_ALGdedo1_last_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGdedo1_last_V_0_vld_in <= input_AX_ALGdedo1_TVALID;
    input_AX_ALGdedo1_last_V_0_vld_out <= input_AX_ALGdedo1_last_V_0_state(0);
    input_AX_ALGdedo1_strb_V_0_ack_in <= input_AX_ALGdedo1_strb_V_0_state(1);
    input_AX_ALGdedo1_strb_V_0_ack_out <= dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY;

    input_AX_ALGdedo1_strb_V_0_data_out_assign_proc : process(input_AX_ALGdedo1_strb_V_0_payload_A, input_AX_ALGdedo1_strb_V_0_payload_B, input_AX_ALGdedo1_strb_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGdedo1_strb_V_0_sel)) then 
            input_AX_ALGdedo1_strb_V_0_data_out <= input_AX_ALGdedo1_strb_V_0_payload_B;
        else 
            input_AX_ALGdedo1_strb_V_0_data_out <= input_AX_ALGdedo1_strb_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGdedo1_strb_V_0_load_A <= (input_AX_ALGdedo1_strb_V_0_state_cmp_full and not(input_AX_ALGdedo1_strb_V_0_sel_wr));
    input_AX_ALGdedo1_strb_V_0_load_B <= (input_AX_ALGdedo1_strb_V_0_sel_wr and input_AX_ALGdedo1_strb_V_0_state_cmp_full);
    input_AX_ALGdedo1_strb_V_0_sel <= input_AX_ALGdedo1_strb_V_0_sel_rd;
    input_AX_ALGdedo1_strb_V_0_state_cmp_full <= '0' when (input_AX_ALGdedo1_strb_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGdedo1_strb_V_0_vld_in <= input_AX_ALGdedo1_TVALID;
    input_AX_ALGdedo1_strb_V_0_vld_out <= input_AX_ALGdedo1_strb_V_0_state(0);
    input_AX_ALGdedo1_user_V_0_ack_in <= input_AX_ALGdedo1_user_V_0_state(1);
    input_AX_ALGdedo1_user_V_0_ack_out <= dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY;

    input_AX_ALGdedo1_user_V_0_data_out_assign_proc : process(input_AX_ALGdedo1_user_V_0_payload_A, input_AX_ALGdedo1_user_V_0_payload_B, input_AX_ALGdedo1_user_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGdedo1_user_V_0_sel)) then 
            input_AX_ALGdedo1_user_V_0_data_out <= input_AX_ALGdedo1_user_V_0_payload_B;
        else 
            input_AX_ALGdedo1_user_V_0_data_out <= input_AX_ALGdedo1_user_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGdedo1_user_V_0_load_A <= (input_AX_ALGdedo1_user_V_0_state_cmp_full and not(input_AX_ALGdedo1_user_V_0_sel_wr));
    input_AX_ALGdedo1_user_V_0_load_B <= (input_AX_ALGdedo1_user_V_0_sel_wr and input_AX_ALGdedo1_user_V_0_state_cmp_full);
    input_AX_ALGdedo1_user_V_0_sel <= input_AX_ALGdedo1_user_V_0_sel_rd;
    input_AX_ALGdedo1_user_V_0_state_cmp_full <= '0' when (input_AX_ALGdedo1_user_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGdedo1_user_V_0_vld_in <= input_AX_ALGdedo1_TVALID;
    input_AX_ALGdedo1_user_V_0_vld_out <= input_AX_ALGdedo1_user_V_0_state(0);

    input_AX_ALGpalma0_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_AX_ALGpalma0_TDATA_blk_n <= palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n;
        else 
            input_AX_ALGpalma0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_AX_ALGpalma0_TREADY <= input_AX_ALGpalma0_dest_V_0_state(1);
    input_AX_ALGpalma0_data_V_0_ack_in <= input_AX_ALGpalma0_data_V_0_state(1);
    input_AX_ALGpalma0_data_V_0_ack_out <= palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY;

    input_AX_ALGpalma0_data_V_0_data_out_assign_proc : process(input_AX_ALGpalma0_data_V_0_payload_A, input_AX_ALGpalma0_data_V_0_payload_B, input_AX_ALGpalma0_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGpalma0_data_V_0_sel)) then 
            input_AX_ALGpalma0_data_V_0_data_out <= input_AX_ALGpalma0_data_V_0_payload_B;
        else 
            input_AX_ALGpalma0_data_V_0_data_out <= input_AX_ALGpalma0_data_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGpalma0_data_V_0_load_A <= (input_AX_ALGpalma0_data_V_0_state_cmp_full and not(input_AX_ALGpalma0_data_V_0_sel_wr));
    input_AX_ALGpalma0_data_V_0_load_B <= (input_AX_ALGpalma0_data_V_0_sel_wr and input_AX_ALGpalma0_data_V_0_state_cmp_full);
    input_AX_ALGpalma0_data_V_0_sel <= input_AX_ALGpalma0_data_V_0_sel_rd;
    input_AX_ALGpalma0_data_V_0_state_cmp_full <= '0' when (input_AX_ALGpalma0_data_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGpalma0_data_V_0_vld_in <= input_AX_ALGpalma0_TVALID;
    input_AX_ALGpalma0_data_V_0_vld_out <= input_AX_ALGpalma0_data_V_0_state(0);
    input_AX_ALGpalma0_dest_V_0_ack_in <= input_AX_ALGpalma0_dest_V_0_state(1);
    input_AX_ALGpalma0_dest_V_0_ack_out <= palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY;

    input_AX_ALGpalma0_dest_V_0_data_out_assign_proc : process(input_AX_ALGpalma0_dest_V_0_payload_A, input_AX_ALGpalma0_dest_V_0_payload_B, input_AX_ALGpalma0_dest_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGpalma0_dest_V_0_sel)) then 
            input_AX_ALGpalma0_dest_V_0_data_out <= input_AX_ALGpalma0_dest_V_0_payload_B;
        else 
            input_AX_ALGpalma0_dest_V_0_data_out <= input_AX_ALGpalma0_dest_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGpalma0_dest_V_0_load_A <= (input_AX_ALGpalma0_dest_V_0_state_cmp_full and not(input_AX_ALGpalma0_dest_V_0_sel_wr));
    input_AX_ALGpalma0_dest_V_0_load_B <= (input_AX_ALGpalma0_dest_V_0_sel_wr and input_AX_ALGpalma0_dest_V_0_state_cmp_full);
    input_AX_ALGpalma0_dest_V_0_sel <= input_AX_ALGpalma0_dest_V_0_sel_rd;
    input_AX_ALGpalma0_dest_V_0_state_cmp_full <= '0' when (input_AX_ALGpalma0_dest_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGpalma0_dest_V_0_vld_in <= input_AX_ALGpalma0_TVALID;
    input_AX_ALGpalma0_dest_V_0_vld_out <= input_AX_ALGpalma0_dest_V_0_state(0);
    input_AX_ALGpalma0_id_V_0_ack_in <= input_AX_ALGpalma0_id_V_0_state(1);
    input_AX_ALGpalma0_id_V_0_ack_out <= palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY;

    input_AX_ALGpalma0_id_V_0_data_out_assign_proc : process(input_AX_ALGpalma0_id_V_0_payload_A, input_AX_ALGpalma0_id_V_0_payload_B, input_AX_ALGpalma0_id_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGpalma0_id_V_0_sel)) then 
            input_AX_ALGpalma0_id_V_0_data_out <= input_AX_ALGpalma0_id_V_0_payload_B;
        else 
            input_AX_ALGpalma0_id_V_0_data_out <= input_AX_ALGpalma0_id_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGpalma0_id_V_0_load_A <= (input_AX_ALGpalma0_id_V_0_state_cmp_full and not(input_AX_ALGpalma0_id_V_0_sel_wr));
    input_AX_ALGpalma0_id_V_0_load_B <= (input_AX_ALGpalma0_id_V_0_sel_wr and input_AX_ALGpalma0_id_V_0_state_cmp_full);
    input_AX_ALGpalma0_id_V_0_sel <= input_AX_ALGpalma0_id_V_0_sel_rd;
    input_AX_ALGpalma0_id_V_0_state_cmp_full <= '0' when (input_AX_ALGpalma0_id_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGpalma0_id_V_0_vld_in <= input_AX_ALGpalma0_TVALID;
    input_AX_ALGpalma0_id_V_0_vld_out <= input_AX_ALGpalma0_id_V_0_state(0);
    input_AX_ALGpalma0_keep_V_0_ack_in <= input_AX_ALGpalma0_keep_V_0_state(1);
    input_AX_ALGpalma0_keep_V_0_ack_out <= palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY;

    input_AX_ALGpalma0_keep_V_0_data_out_assign_proc : process(input_AX_ALGpalma0_keep_V_0_payload_A, input_AX_ALGpalma0_keep_V_0_payload_B, input_AX_ALGpalma0_keep_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGpalma0_keep_V_0_sel)) then 
            input_AX_ALGpalma0_keep_V_0_data_out <= input_AX_ALGpalma0_keep_V_0_payload_B;
        else 
            input_AX_ALGpalma0_keep_V_0_data_out <= input_AX_ALGpalma0_keep_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGpalma0_keep_V_0_load_A <= (input_AX_ALGpalma0_keep_V_0_state_cmp_full and not(input_AX_ALGpalma0_keep_V_0_sel_wr));
    input_AX_ALGpalma0_keep_V_0_load_B <= (input_AX_ALGpalma0_keep_V_0_sel_wr and input_AX_ALGpalma0_keep_V_0_state_cmp_full);
    input_AX_ALGpalma0_keep_V_0_sel <= input_AX_ALGpalma0_keep_V_0_sel_rd;
    input_AX_ALGpalma0_keep_V_0_state_cmp_full <= '0' when (input_AX_ALGpalma0_keep_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGpalma0_keep_V_0_vld_in <= input_AX_ALGpalma0_TVALID;
    input_AX_ALGpalma0_keep_V_0_vld_out <= input_AX_ALGpalma0_keep_V_0_state(0);
    input_AX_ALGpalma0_last_V_0_ack_in <= input_AX_ALGpalma0_last_V_0_state(1);
    input_AX_ALGpalma0_last_V_0_ack_out <= palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY;

    input_AX_ALGpalma0_last_V_0_data_out_assign_proc : process(input_AX_ALGpalma0_last_V_0_payload_A, input_AX_ALGpalma0_last_V_0_payload_B, input_AX_ALGpalma0_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGpalma0_last_V_0_sel)) then 
            input_AX_ALGpalma0_last_V_0_data_out <= input_AX_ALGpalma0_last_V_0_payload_B;
        else 
            input_AX_ALGpalma0_last_V_0_data_out <= input_AX_ALGpalma0_last_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGpalma0_last_V_0_load_A <= (input_AX_ALGpalma0_last_V_0_state_cmp_full and not(input_AX_ALGpalma0_last_V_0_sel_wr));
    input_AX_ALGpalma0_last_V_0_load_B <= (input_AX_ALGpalma0_last_V_0_sel_wr and input_AX_ALGpalma0_last_V_0_state_cmp_full);
    input_AX_ALGpalma0_last_V_0_sel <= input_AX_ALGpalma0_last_V_0_sel_rd;
    input_AX_ALGpalma0_last_V_0_state_cmp_full <= '0' when (input_AX_ALGpalma0_last_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGpalma0_last_V_0_vld_in <= input_AX_ALGpalma0_TVALID;
    input_AX_ALGpalma0_last_V_0_vld_out <= input_AX_ALGpalma0_last_V_0_state(0);
    input_AX_ALGpalma0_strb_V_0_ack_in <= input_AX_ALGpalma0_strb_V_0_state(1);
    input_AX_ALGpalma0_strb_V_0_ack_out <= palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY;

    input_AX_ALGpalma0_strb_V_0_data_out_assign_proc : process(input_AX_ALGpalma0_strb_V_0_payload_A, input_AX_ALGpalma0_strb_V_0_payload_B, input_AX_ALGpalma0_strb_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGpalma0_strb_V_0_sel)) then 
            input_AX_ALGpalma0_strb_V_0_data_out <= input_AX_ALGpalma0_strb_V_0_payload_B;
        else 
            input_AX_ALGpalma0_strb_V_0_data_out <= input_AX_ALGpalma0_strb_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGpalma0_strb_V_0_load_A <= (input_AX_ALGpalma0_strb_V_0_state_cmp_full and not(input_AX_ALGpalma0_strb_V_0_sel_wr));
    input_AX_ALGpalma0_strb_V_0_load_B <= (input_AX_ALGpalma0_strb_V_0_sel_wr and input_AX_ALGpalma0_strb_V_0_state_cmp_full);
    input_AX_ALGpalma0_strb_V_0_sel <= input_AX_ALGpalma0_strb_V_0_sel_rd;
    input_AX_ALGpalma0_strb_V_0_state_cmp_full <= '0' when (input_AX_ALGpalma0_strb_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGpalma0_strb_V_0_vld_in <= input_AX_ALGpalma0_TVALID;
    input_AX_ALGpalma0_strb_V_0_vld_out <= input_AX_ALGpalma0_strb_V_0_state(0);
    input_AX_ALGpalma0_user_V_0_ack_in <= input_AX_ALGpalma0_user_V_0_state(1);
    input_AX_ALGpalma0_user_V_0_ack_out <= palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY;

    input_AX_ALGpalma0_user_V_0_data_out_assign_proc : process(input_AX_ALGpalma0_user_V_0_payload_A, input_AX_ALGpalma0_user_V_0_payload_B, input_AX_ALGpalma0_user_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGpalma0_user_V_0_sel)) then 
            input_AX_ALGpalma0_user_V_0_data_out <= input_AX_ALGpalma0_user_V_0_payload_B;
        else 
            input_AX_ALGpalma0_user_V_0_data_out <= input_AX_ALGpalma0_user_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGpalma0_user_V_0_load_A <= (input_AX_ALGpalma0_user_V_0_state_cmp_full and not(input_AX_ALGpalma0_user_V_0_sel_wr));
    input_AX_ALGpalma0_user_V_0_load_B <= (input_AX_ALGpalma0_user_V_0_sel_wr and input_AX_ALGpalma0_user_V_0_state_cmp_full);
    input_AX_ALGpalma0_user_V_0_sel <= input_AX_ALGpalma0_user_V_0_sel_rd;
    input_AX_ALGpalma0_user_V_0_state_cmp_full <= '0' when (input_AX_ALGpalma0_user_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGpalma0_user_V_0_vld_in <= input_AX_ALGpalma0_TVALID;
    input_AX_ALGpalma0_user_V_0_vld_out <= input_AX_ALGpalma0_user_V_0_state(0);

    input_AX_ALGpalma1_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_AX_ALGpalma1_TDATA_blk_n <= palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n;
        else 
            input_AX_ALGpalma1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_AX_ALGpalma1_TREADY <= input_AX_ALGpalma1_dest_V_0_state(1);
    input_AX_ALGpalma1_data_V_0_ack_in <= input_AX_ALGpalma1_data_V_0_state(1);
    input_AX_ALGpalma1_data_V_0_ack_out <= palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY;

    input_AX_ALGpalma1_data_V_0_data_out_assign_proc : process(input_AX_ALGpalma1_data_V_0_payload_A, input_AX_ALGpalma1_data_V_0_payload_B, input_AX_ALGpalma1_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGpalma1_data_V_0_sel)) then 
            input_AX_ALGpalma1_data_V_0_data_out <= input_AX_ALGpalma1_data_V_0_payload_B;
        else 
            input_AX_ALGpalma1_data_V_0_data_out <= input_AX_ALGpalma1_data_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGpalma1_data_V_0_load_A <= (input_AX_ALGpalma1_data_V_0_state_cmp_full and not(input_AX_ALGpalma1_data_V_0_sel_wr));
    input_AX_ALGpalma1_data_V_0_load_B <= (input_AX_ALGpalma1_data_V_0_sel_wr and input_AX_ALGpalma1_data_V_0_state_cmp_full);
    input_AX_ALGpalma1_data_V_0_sel <= input_AX_ALGpalma1_data_V_0_sel_rd;
    input_AX_ALGpalma1_data_V_0_state_cmp_full <= '0' when (input_AX_ALGpalma1_data_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGpalma1_data_V_0_vld_in <= input_AX_ALGpalma1_TVALID;
    input_AX_ALGpalma1_data_V_0_vld_out <= input_AX_ALGpalma1_data_V_0_state(0);
    input_AX_ALGpalma1_dest_V_0_ack_in <= input_AX_ALGpalma1_dest_V_0_state(1);
    input_AX_ALGpalma1_dest_V_0_ack_out <= palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY;

    input_AX_ALGpalma1_dest_V_0_data_out_assign_proc : process(input_AX_ALGpalma1_dest_V_0_payload_A, input_AX_ALGpalma1_dest_V_0_payload_B, input_AX_ALGpalma1_dest_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGpalma1_dest_V_0_sel)) then 
            input_AX_ALGpalma1_dest_V_0_data_out <= input_AX_ALGpalma1_dest_V_0_payload_B;
        else 
            input_AX_ALGpalma1_dest_V_0_data_out <= input_AX_ALGpalma1_dest_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGpalma1_dest_V_0_load_A <= (input_AX_ALGpalma1_dest_V_0_state_cmp_full and not(input_AX_ALGpalma1_dest_V_0_sel_wr));
    input_AX_ALGpalma1_dest_V_0_load_B <= (input_AX_ALGpalma1_dest_V_0_sel_wr and input_AX_ALGpalma1_dest_V_0_state_cmp_full);
    input_AX_ALGpalma1_dest_V_0_sel <= input_AX_ALGpalma1_dest_V_0_sel_rd;
    input_AX_ALGpalma1_dest_V_0_state_cmp_full <= '0' when (input_AX_ALGpalma1_dest_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGpalma1_dest_V_0_vld_in <= input_AX_ALGpalma1_TVALID;
    input_AX_ALGpalma1_dest_V_0_vld_out <= input_AX_ALGpalma1_dest_V_0_state(0);
    input_AX_ALGpalma1_id_V_0_ack_in <= input_AX_ALGpalma1_id_V_0_state(1);
    input_AX_ALGpalma1_id_V_0_ack_out <= palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY;

    input_AX_ALGpalma1_id_V_0_data_out_assign_proc : process(input_AX_ALGpalma1_id_V_0_payload_A, input_AX_ALGpalma1_id_V_0_payload_B, input_AX_ALGpalma1_id_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGpalma1_id_V_0_sel)) then 
            input_AX_ALGpalma1_id_V_0_data_out <= input_AX_ALGpalma1_id_V_0_payload_B;
        else 
            input_AX_ALGpalma1_id_V_0_data_out <= input_AX_ALGpalma1_id_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGpalma1_id_V_0_load_A <= (input_AX_ALGpalma1_id_V_0_state_cmp_full and not(input_AX_ALGpalma1_id_V_0_sel_wr));
    input_AX_ALGpalma1_id_V_0_load_B <= (input_AX_ALGpalma1_id_V_0_sel_wr and input_AX_ALGpalma1_id_V_0_state_cmp_full);
    input_AX_ALGpalma1_id_V_0_sel <= input_AX_ALGpalma1_id_V_0_sel_rd;
    input_AX_ALGpalma1_id_V_0_state_cmp_full <= '0' when (input_AX_ALGpalma1_id_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGpalma1_id_V_0_vld_in <= input_AX_ALGpalma1_TVALID;
    input_AX_ALGpalma1_id_V_0_vld_out <= input_AX_ALGpalma1_id_V_0_state(0);
    input_AX_ALGpalma1_keep_V_0_ack_in <= input_AX_ALGpalma1_keep_V_0_state(1);
    input_AX_ALGpalma1_keep_V_0_ack_out <= palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY;

    input_AX_ALGpalma1_keep_V_0_data_out_assign_proc : process(input_AX_ALGpalma1_keep_V_0_payload_A, input_AX_ALGpalma1_keep_V_0_payload_B, input_AX_ALGpalma1_keep_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGpalma1_keep_V_0_sel)) then 
            input_AX_ALGpalma1_keep_V_0_data_out <= input_AX_ALGpalma1_keep_V_0_payload_B;
        else 
            input_AX_ALGpalma1_keep_V_0_data_out <= input_AX_ALGpalma1_keep_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGpalma1_keep_V_0_load_A <= (input_AX_ALGpalma1_keep_V_0_state_cmp_full and not(input_AX_ALGpalma1_keep_V_0_sel_wr));
    input_AX_ALGpalma1_keep_V_0_load_B <= (input_AX_ALGpalma1_keep_V_0_sel_wr and input_AX_ALGpalma1_keep_V_0_state_cmp_full);
    input_AX_ALGpalma1_keep_V_0_sel <= input_AX_ALGpalma1_keep_V_0_sel_rd;
    input_AX_ALGpalma1_keep_V_0_state_cmp_full <= '0' when (input_AX_ALGpalma1_keep_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGpalma1_keep_V_0_vld_in <= input_AX_ALGpalma1_TVALID;
    input_AX_ALGpalma1_keep_V_0_vld_out <= input_AX_ALGpalma1_keep_V_0_state(0);
    input_AX_ALGpalma1_last_V_0_ack_in <= input_AX_ALGpalma1_last_V_0_state(1);
    input_AX_ALGpalma1_last_V_0_ack_out <= palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY;

    input_AX_ALGpalma1_last_V_0_data_out_assign_proc : process(input_AX_ALGpalma1_last_V_0_payload_A, input_AX_ALGpalma1_last_V_0_payload_B, input_AX_ALGpalma1_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGpalma1_last_V_0_sel)) then 
            input_AX_ALGpalma1_last_V_0_data_out <= input_AX_ALGpalma1_last_V_0_payload_B;
        else 
            input_AX_ALGpalma1_last_V_0_data_out <= input_AX_ALGpalma1_last_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGpalma1_last_V_0_load_A <= (input_AX_ALGpalma1_last_V_0_state_cmp_full and not(input_AX_ALGpalma1_last_V_0_sel_wr));
    input_AX_ALGpalma1_last_V_0_load_B <= (input_AX_ALGpalma1_last_V_0_sel_wr and input_AX_ALGpalma1_last_V_0_state_cmp_full);
    input_AX_ALGpalma1_last_V_0_sel <= input_AX_ALGpalma1_last_V_0_sel_rd;
    input_AX_ALGpalma1_last_V_0_state_cmp_full <= '0' when (input_AX_ALGpalma1_last_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGpalma1_last_V_0_vld_in <= input_AX_ALGpalma1_TVALID;
    input_AX_ALGpalma1_last_V_0_vld_out <= input_AX_ALGpalma1_last_V_0_state(0);
    input_AX_ALGpalma1_strb_V_0_ack_in <= input_AX_ALGpalma1_strb_V_0_state(1);
    input_AX_ALGpalma1_strb_V_0_ack_out <= palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY;

    input_AX_ALGpalma1_strb_V_0_data_out_assign_proc : process(input_AX_ALGpalma1_strb_V_0_payload_A, input_AX_ALGpalma1_strb_V_0_payload_B, input_AX_ALGpalma1_strb_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGpalma1_strb_V_0_sel)) then 
            input_AX_ALGpalma1_strb_V_0_data_out <= input_AX_ALGpalma1_strb_V_0_payload_B;
        else 
            input_AX_ALGpalma1_strb_V_0_data_out <= input_AX_ALGpalma1_strb_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGpalma1_strb_V_0_load_A <= (input_AX_ALGpalma1_strb_V_0_state_cmp_full and not(input_AX_ALGpalma1_strb_V_0_sel_wr));
    input_AX_ALGpalma1_strb_V_0_load_B <= (input_AX_ALGpalma1_strb_V_0_sel_wr and input_AX_ALGpalma1_strb_V_0_state_cmp_full);
    input_AX_ALGpalma1_strb_V_0_sel <= input_AX_ALGpalma1_strb_V_0_sel_rd;
    input_AX_ALGpalma1_strb_V_0_state_cmp_full <= '0' when (input_AX_ALGpalma1_strb_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGpalma1_strb_V_0_vld_in <= input_AX_ALGpalma1_TVALID;
    input_AX_ALGpalma1_strb_V_0_vld_out <= input_AX_ALGpalma1_strb_V_0_state(0);
    input_AX_ALGpalma1_user_V_0_ack_in <= input_AX_ALGpalma1_user_V_0_state(1);
    input_AX_ALGpalma1_user_V_0_ack_out <= palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY;

    input_AX_ALGpalma1_user_V_0_data_out_assign_proc : process(input_AX_ALGpalma1_user_V_0_payload_A, input_AX_ALGpalma1_user_V_0_payload_B, input_AX_ALGpalma1_user_V_0_sel)
    begin
        if ((ap_const_logic_1 = input_AX_ALGpalma1_user_V_0_sel)) then 
            input_AX_ALGpalma1_user_V_0_data_out <= input_AX_ALGpalma1_user_V_0_payload_B;
        else 
            input_AX_ALGpalma1_user_V_0_data_out <= input_AX_ALGpalma1_user_V_0_payload_A;
        end if; 
    end process;

    input_AX_ALGpalma1_user_V_0_load_A <= (input_AX_ALGpalma1_user_V_0_state_cmp_full and not(input_AX_ALGpalma1_user_V_0_sel_wr));
    input_AX_ALGpalma1_user_V_0_load_B <= (input_AX_ALGpalma1_user_V_0_sel_wr and input_AX_ALGpalma1_user_V_0_state_cmp_full);
    input_AX_ALGpalma1_user_V_0_sel <= input_AX_ALGpalma1_user_V_0_sel_rd;
    input_AX_ALGpalma1_user_V_0_state_cmp_full <= '0' when (input_AX_ALGpalma1_user_V_0_state = ap_const_lv2_1) else '1';
    input_AX_ALGpalma1_user_V_0_vld_in <= input_AX_ALGpalma1_TVALID;
    input_AX_ALGpalma1_user_V_0_vld_out <= input_AX_ALGpalma1_user_V_0_state(0);
    output_AX_ALG_TDATA <= output_AX_ALG_data_V_1_data_out;
    output_AX_ALG_TDEST <= output_AX_ALG_dest_V_1_data_out;
    output_AX_ALG_TID <= output_AX_ALG_id_V_1_data_out;
    output_AX_ALG_TKEEP <= output_AX_ALG_keep_V_1_data_out;
    output_AX_ALG_TLAST <= output_AX_ALG_last_V_1_data_out;
    output_AX_ALG_TSTRB <= output_AX_ALG_strb_V_1_data_out;
    output_AX_ALG_TUSER <= output_AX_ALG_user_V_1_data_out;
    output_AX_ALG_TVALID <= output_AX_ALG_dest_V_1_state(0);
    output_AX_ALG_data_V_1_ack_in <= output_AX_ALG_data_V_1_state(1);
    output_AX_ALG_data_V_1_ack_out <= output_AX_ALG_TREADY;

    output_AX_ALG_data_V_1_data_out_assign_proc : process(output_AX_ALG_data_V_1_payload_A, output_AX_ALG_data_V_1_payload_B, output_AX_ALG_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_AX_ALG_data_V_1_sel)) then 
            output_AX_ALG_data_V_1_data_out <= output_AX_ALG_data_V_1_payload_B;
        else 
            output_AX_ALG_data_V_1_data_out <= output_AX_ALG_data_V_1_payload_A;
        end if; 
    end process;

    output_AX_ALG_data_V_1_load_A <= (output_AX_ALG_data_V_1_state_cmp_full and not(output_AX_ALG_data_V_1_sel_wr));
    output_AX_ALG_data_V_1_load_B <= (output_AX_ALG_data_V_1_sel_wr and output_AX_ALG_data_V_1_state_cmp_full);
    output_AX_ALG_data_V_1_sel <= output_AX_ALG_data_V_1_sel_rd;
    output_AX_ALG_data_V_1_state_cmp_full <= '0' when (output_AX_ALG_data_V_1_state = ap_const_lv2_1) else '1';
    output_AX_ALG_data_V_1_vld_in <= grp_write_data_fu_96_output_AX_ALG_TVALID;
    output_AX_ALG_data_V_1_vld_out <= output_AX_ALG_data_V_1_state(0);
    output_AX_ALG_dest_V_1_ack_in <= output_AX_ALG_dest_V_1_state(1);
    output_AX_ALG_dest_V_1_ack_out <= output_AX_ALG_TREADY;

    output_AX_ALG_dest_V_1_data_out_assign_proc : process(output_AX_ALG_dest_V_1_payload_A, output_AX_ALG_dest_V_1_payload_B, output_AX_ALG_dest_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_AX_ALG_dest_V_1_sel)) then 
            output_AX_ALG_dest_V_1_data_out <= output_AX_ALG_dest_V_1_payload_B;
        else 
            output_AX_ALG_dest_V_1_data_out <= output_AX_ALG_dest_V_1_payload_A;
        end if; 
    end process;

    output_AX_ALG_dest_V_1_load_A <= (output_AX_ALG_dest_V_1_state_cmp_full and not(output_AX_ALG_dest_V_1_sel_wr));
    output_AX_ALG_dest_V_1_load_B <= (output_AX_ALG_dest_V_1_sel_wr and output_AX_ALG_dest_V_1_state_cmp_full);
    output_AX_ALG_dest_V_1_sel <= output_AX_ALG_dest_V_1_sel_rd;
    output_AX_ALG_dest_V_1_state_cmp_full <= '0' when (output_AX_ALG_dest_V_1_state = ap_const_lv2_1) else '1';
    output_AX_ALG_dest_V_1_vld_in <= grp_write_data_fu_96_output_AX_ALG_TVALID;
    output_AX_ALG_dest_V_1_vld_out <= output_AX_ALG_dest_V_1_state(0);
    output_AX_ALG_id_V_1_ack_in <= output_AX_ALG_id_V_1_state(1);
    output_AX_ALG_id_V_1_ack_out <= output_AX_ALG_TREADY;

    output_AX_ALG_id_V_1_data_out_assign_proc : process(output_AX_ALG_id_V_1_payload_A, output_AX_ALG_id_V_1_payload_B, output_AX_ALG_id_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_AX_ALG_id_V_1_sel)) then 
            output_AX_ALG_id_V_1_data_out <= output_AX_ALG_id_V_1_payload_B;
        else 
            output_AX_ALG_id_V_1_data_out <= output_AX_ALG_id_V_1_payload_A;
        end if; 
    end process;

    output_AX_ALG_id_V_1_load_A <= (output_AX_ALG_id_V_1_state_cmp_full and not(output_AX_ALG_id_V_1_sel_wr));
    output_AX_ALG_id_V_1_load_B <= (output_AX_ALG_id_V_1_sel_wr and output_AX_ALG_id_V_1_state_cmp_full);
    output_AX_ALG_id_V_1_sel <= output_AX_ALG_id_V_1_sel_rd;
    output_AX_ALG_id_V_1_state_cmp_full <= '0' when (output_AX_ALG_id_V_1_state = ap_const_lv2_1) else '1';
    output_AX_ALG_id_V_1_vld_in <= grp_write_data_fu_96_output_AX_ALG_TVALID;
    output_AX_ALG_id_V_1_vld_out <= output_AX_ALG_id_V_1_state(0);
    output_AX_ALG_keep_V_1_ack_in <= output_AX_ALG_keep_V_1_state(1);
    output_AX_ALG_keep_V_1_ack_out <= output_AX_ALG_TREADY;

    output_AX_ALG_keep_V_1_data_out_assign_proc : process(output_AX_ALG_keep_V_1_payload_A, output_AX_ALG_keep_V_1_payload_B, output_AX_ALG_keep_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_AX_ALG_keep_V_1_sel)) then 
            output_AX_ALG_keep_V_1_data_out <= output_AX_ALG_keep_V_1_payload_B;
        else 
            output_AX_ALG_keep_V_1_data_out <= output_AX_ALG_keep_V_1_payload_A;
        end if; 
    end process;

    output_AX_ALG_keep_V_1_load_A <= (output_AX_ALG_keep_V_1_state_cmp_full and not(output_AX_ALG_keep_V_1_sel_wr));
    output_AX_ALG_keep_V_1_load_B <= (output_AX_ALG_keep_V_1_sel_wr and output_AX_ALG_keep_V_1_state_cmp_full);
    output_AX_ALG_keep_V_1_sel <= output_AX_ALG_keep_V_1_sel_rd;
    output_AX_ALG_keep_V_1_state_cmp_full <= '0' when (output_AX_ALG_keep_V_1_state = ap_const_lv2_1) else '1';
    output_AX_ALG_keep_V_1_vld_in <= grp_write_data_fu_96_output_AX_ALG_TVALID;
    output_AX_ALG_keep_V_1_vld_out <= output_AX_ALG_keep_V_1_state(0);
    output_AX_ALG_last_V_1_ack_in <= output_AX_ALG_last_V_1_state(1);
    output_AX_ALG_last_V_1_ack_out <= output_AX_ALG_TREADY;

    output_AX_ALG_last_V_1_data_out_assign_proc : process(output_AX_ALG_last_V_1_payload_A, output_AX_ALG_last_V_1_payload_B, output_AX_ALG_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_AX_ALG_last_V_1_sel)) then 
            output_AX_ALG_last_V_1_data_out <= output_AX_ALG_last_V_1_payload_B;
        else 
            output_AX_ALG_last_V_1_data_out <= output_AX_ALG_last_V_1_payload_A;
        end if; 
    end process;

    output_AX_ALG_last_V_1_load_A <= (output_AX_ALG_last_V_1_state_cmp_full and not(output_AX_ALG_last_V_1_sel_wr));
    output_AX_ALG_last_V_1_load_B <= (output_AX_ALG_last_V_1_sel_wr and output_AX_ALG_last_V_1_state_cmp_full);
    output_AX_ALG_last_V_1_sel <= output_AX_ALG_last_V_1_sel_rd;
    output_AX_ALG_last_V_1_state_cmp_full <= '0' when (output_AX_ALG_last_V_1_state = ap_const_lv2_1) else '1';
    output_AX_ALG_last_V_1_vld_in <= grp_write_data_fu_96_output_AX_ALG_TVALID;
    output_AX_ALG_last_V_1_vld_out <= output_AX_ALG_last_V_1_state(0);
    output_AX_ALG_strb_V_1_ack_in <= output_AX_ALG_strb_V_1_state(1);
    output_AX_ALG_strb_V_1_ack_out <= output_AX_ALG_TREADY;

    output_AX_ALG_strb_V_1_data_out_assign_proc : process(output_AX_ALG_strb_V_1_payload_A, output_AX_ALG_strb_V_1_payload_B, output_AX_ALG_strb_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_AX_ALG_strb_V_1_sel)) then 
            output_AX_ALG_strb_V_1_data_out <= output_AX_ALG_strb_V_1_payload_B;
        else 
            output_AX_ALG_strb_V_1_data_out <= output_AX_ALG_strb_V_1_payload_A;
        end if; 
    end process;

    output_AX_ALG_strb_V_1_load_A <= (output_AX_ALG_strb_V_1_state_cmp_full and not(output_AX_ALG_strb_V_1_sel_wr));
    output_AX_ALG_strb_V_1_load_B <= (output_AX_ALG_strb_V_1_sel_wr and output_AX_ALG_strb_V_1_state_cmp_full);
    output_AX_ALG_strb_V_1_sel <= output_AX_ALG_strb_V_1_sel_rd;
    output_AX_ALG_strb_V_1_state_cmp_full <= '0' when (output_AX_ALG_strb_V_1_state = ap_const_lv2_1) else '1';
    output_AX_ALG_strb_V_1_vld_in <= grp_write_data_fu_96_output_AX_ALG_TVALID;
    output_AX_ALG_strb_V_1_vld_out <= output_AX_ALG_strb_V_1_state(0);
    output_AX_ALG_user_V_1_ack_in <= output_AX_ALG_user_V_1_state(1);
    output_AX_ALG_user_V_1_ack_out <= output_AX_ALG_TREADY;

    output_AX_ALG_user_V_1_data_out_assign_proc : process(output_AX_ALG_user_V_1_payload_A, output_AX_ALG_user_V_1_payload_B, output_AX_ALG_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = output_AX_ALG_user_V_1_sel)) then 
            output_AX_ALG_user_V_1_data_out <= output_AX_ALG_user_V_1_payload_B;
        else 
            output_AX_ALG_user_V_1_data_out <= output_AX_ALG_user_V_1_payload_A;
        end if; 
    end process;

    output_AX_ALG_user_V_1_load_A <= (output_AX_ALG_user_V_1_state_cmp_full and not(output_AX_ALG_user_V_1_sel_wr));
    output_AX_ALG_user_V_1_load_B <= (output_AX_ALG_user_V_1_sel_wr and output_AX_ALG_user_V_1_state_cmp_full);
    output_AX_ALG_user_V_1_sel <= output_AX_ALG_user_V_1_sel_rd;
    output_AX_ALG_user_V_1_state_cmp_full <= '0' when (output_AX_ALG_user_V_1_state = ap_const_lv2_1) else '1';
    output_AX_ALG_user_V_1_vld_in <= grp_write_data_fu_96_output_AX_ALG_TVALID;
    output_AX_ALG_user_V_1_vld_out <= output_AX_ALG_user_V_1_state(0);

    palma0_0_V_read_data_fu_137_ap_start_assign_proc : process(dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n, ap_CS_fsm_state2, dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n, palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n))))) then 
            palma0_0_V_read_data_fu_137_ap_start <= ap_const_logic_1;
        else 
            palma0_0_V_read_data_fu_137_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TVALID <= input_AX_ALGpalma0_dest_V_0_state(0);

    palma1_0_V_read_data_fu_175_ap_start_assign_proc : process(dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n, ap_CS_fsm_state2, palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n, dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) or (ap_const_logic_0 = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n))))) then 
            palma1_0_V_read_data_fu_175_ap_start <= ap_const_logic_1;
        else 
            palma1_0_V_read_data_fu_175_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TVALID <= input_AX_ALGpalma1_dest_V_0_state(0);
end behav;
