// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="opcionA,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.140000,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=955,HLS_SYN_LUT=1243}" *)

module opcionA (
        ap_clk,
        ap_rst_n,
        input_AX_ALGdedo0_TDATA,
        input_AX_ALGdedo0_TVALID,
        input_AX_ALGdedo0_TREADY,
        input_AX_ALGdedo0_TKEEP,
        input_AX_ALGdedo0_TSTRB,
        input_AX_ALGdedo0_TUSER,
        input_AX_ALGdedo0_TLAST,
        input_AX_ALGdedo0_TID,
        input_AX_ALGdedo0_TDEST,
        input_AX_ALGpalma0_TDATA,
        input_AX_ALGpalma0_TVALID,
        input_AX_ALGpalma0_TREADY,
        input_AX_ALGpalma0_TKEEP,
        input_AX_ALGpalma0_TSTRB,
        input_AX_ALGpalma0_TUSER,
        input_AX_ALGpalma0_TLAST,
        input_AX_ALGpalma0_TID,
        input_AX_ALGpalma0_TDEST,
        input_AX_ALGdedo1_TDATA,
        input_AX_ALGdedo1_TVALID,
        input_AX_ALGdedo1_TREADY,
        input_AX_ALGdedo1_TKEEP,
        input_AX_ALGdedo1_TSTRB,
        input_AX_ALGdedo1_TUSER,
        input_AX_ALGdedo1_TLAST,
        input_AX_ALGdedo1_TID,
        input_AX_ALGdedo1_TDEST,
        input_AX_ALGpalma1_TDATA,
        input_AX_ALGpalma1_TVALID,
        input_AX_ALGpalma1_TREADY,
        input_AX_ALGpalma1_TKEEP,
        input_AX_ALGpalma1_TSTRB,
        input_AX_ALGpalma1_TUSER,
        input_AX_ALGpalma1_TLAST,
        input_AX_ALGpalma1_TID,
        input_AX_ALGpalma1_TDEST,
        output_AX_ALG_TDATA,
        output_AX_ALG_TVALID,
        output_AX_ALG_TREADY,
        output_AX_ALG_TKEEP,
        output_AX_ALG_TSTRB,
        output_AX_ALG_TUSER,
        output_AX_ALG_TLAST,
        output_AX_ALG_TID,
        output_AX_ALG_TDEST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input  [31:0] input_AX_ALGdedo0_TDATA;
input   input_AX_ALGdedo0_TVALID;
output   input_AX_ALGdedo0_TREADY;
input  [3:0] input_AX_ALGdedo0_TKEEP;
input  [3:0] input_AX_ALGdedo0_TSTRB;
input  [3:0] input_AX_ALGdedo0_TUSER;
input  [0:0] input_AX_ALGdedo0_TLAST;
input  [4:0] input_AX_ALGdedo0_TID;
input  [4:0] input_AX_ALGdedo0_TDEST;
input  [31:0] input_AX_ALGpalma0_TDATA;
input   input_AX_ALGpalma0_TVALID;
output   input_AX_ALGpalma0_TREADY;
input  [3:0] input_AX_ALGpalma0_TKEEP;
input  [3:0] input_AX_ALGpalma0_TSTRB;
input  [3:0] input_AX_ALGpalma0_TUSER;
input  [0:0] input_AX_ALGpalma0_TLAST;
input  [4:0] input_AX_ALGpalma0_TID;
input  [4:0] input_AX_ALGpalma0_TDEST;
input  [31:0] input_AX_ALGdedo1_TDATA;
input   input_AX_ALGdedo1_TVALID;
output   input_AX_ALGdedo1_TREADY;
input  [3:0] input_AX_ALGdedo1_TKEEP;
input  [3:0] input_AX_ALGdedo1_TSTRB;
input  [3:0] input_AX_ALGdedo1_TUSER;
input  [0:0] input_AX_ALGdedo1_TLAST;
input  [4:0] input_AX_ALGdedo1_TID;
input  [4:0] input_AX_ALGdedo1_TDEST;
input  [31:0] input_AX_ALGpalma1_TDATA;
input   input_AX_ALGpalma1_TVALID;
output   input_AX_ALGpalma1_TREADY;
input  [3:0] input_AX_ALGpalma1_TKEEP;
input  [3:0] input_AX_ALGpalma1_TSTRB;
input  [3:0] input_AX_ALGpalma1_TUSER;
input  [0:0] input_AX_ALGpalma1_TLAST;
input  [4:0] input_AX_ALGpalma1_TID;
input  [4:0] input_AX_ALGpalma1_TDEST;
output  [31:0] output_AX_ALG_TDATA;
output   output_AX_ALG_TVALID;
input   output_AX_ALG_TREADY;
output  [3:0] output_AX_ALG_TKEEP;
output  [3:0] output_AX_ALG_TSTRB;
output  [3:0] output_AX_ALG_TUSER;
output  [0:0] output_AX_ALG_TLAST;
output  [4:0] output_AX_ALG_TID;
output  [4:0] output_AX_ALG_TDEST;

reg    ap_rst_n_inv;
reg   [31:0] input_AX_ALGdedo0_data_V_0_data_out;
wire    input_AX_ALGdedo0_data_V_0_vld_in;
wire    input_AX_ALGdedo0_data_V_0_vld_out;
wire    input_AX_ALGdedo0_data_V_0_ack_in;
wire    input_AX_ALGdedo0_data_V_0_ack_out;
reg   [31:0] input_AX_ALGdedo0_data_V_0_payload_A;
reg   [31:0] input_AX_ALGdedo0_data_V_0_payload_B;
reg    input_AX_ALGdedo0_data_V_0_sel_rd;
reg    input_AX_ALGdedo0_data_V_0_sel_wr;
wire    input_AX_ALGdedo0_data_V_0_sel;
wire    input_AX_ALGdedo0_data_V_0_load_A;
wire    input_AX_ALGdedo0_data_V_0_load_B;
reg   [1:0] input_AX_ALGdedo0_data_V_0_state;
wire    input_AX_ALGdedo0_data_V_0_state_cmp_full;
reg   [3:0] input_AX_ALGdedo0_keep_V_0_data_out;
wire    input_AX_ALGdedo0_keep_V_0_vld_in;
wire    input_AX_ALGdedo0_keep_V_0_vld_out;
wire    input_AX_ALGdedo0_keep_V_0_ack_in;
wire    input_AX_ALGdedo0_keep_V_0_ack_out;
reg   [3:0] input_AX_ALGdedo0_keep_V_0_payload_A;
reg   [3:0] input_AX_ALGdedo0_keep_V_0_payload_B;
reg    input_AX_ALGdedo0_keep_V_0_sel_rd;
reg    input_AX_ALGdedo0_keep_V_0_sel_wr;
wire    input_AX_ALGdedo0_keep_V_0_sel;
wire    input_AX_ALGdedo0_keep_V_0_load_A;
wire    input_AX_ALGdedo0_keep_V_0_load_B;
reg   [1:0] input_AX_ALGdedo0_keep_V_0_state;
wire    input_AX_ALGdedo0_keep_V_0_state_cmp_full;
reg   [3:0] input_AX_ALGdedo0_strb_V_0_data_out;
wire    input_AX_ALGdedo0_strb_V_0_vld_in;
wire    input_AX_ALGdedo0_strb_V_0_vld_out;
wire    input_AX_ALGdedo0_strb_V_0_ack_in;
wire    input_AX_ALGdedo0_strb_V_0_ack_out;
reg   [3:0] input_AX_ALGdedo0_strb_V_0_payload_A;
reg   [3:0] input_AX_ALGdedo0_strb_V_0_payload_B;
reg    input_AX_ALGdedo0_strb_V_0_sel_rd;
reg    input_AX_ALGdedo0_strb_V_0_sel_wr;
wire    input_AX_ALGdedo0_strb_V_0_sel;
wire    input_AX_ALGdedo0_strb_V_0_load_A;
wire    input_AX_ALGdedo0_strb_V_0_load_B;
reg   [1:0] input_AX_ALGdedo0_strb_V_0_state;
wire    input_AX_ALGdedo0_strb_V_0_state_cmp_full;
reg   [3:0] input_AX_ALGdedo0_user_V_0_data_out;
wire    input_AX_ALGdedo0_user_V_0_vld_in;
wire    input_AX_ALGdedo0_user_V_0_vld_out;
wire    input_AX_ALGdedo0_user_V_0_ack_in;
wire    input_AX_ALGdedo0_user_V_0_ack_out;
reg   [3:0] input_AX_ALGdedo0_user_V_0_payload_A;
reg   [3:0] input_AX_ALGdedo0_user_V_0_payload_B;
reg    input_AX_ALGdedo0_user_V_0_sel_rd;
reg    input_AX_ALGdedo0_user_V_0_sel_wr;
wire    input_AX_ALGdedo0_user_V_0_sel;
wire    input_AX_ALGdedo0_user_V_0_load_A;
wire    input_AX_ALGdedo0_user_V_0_load_B;
reg   [1:0] input_AX_ALGdedo0_user_V_0_state;
wire    input_AX_ALGdedo0_user_V_0_state_cmp_full;
reg   [0:0] input_AX_ALGdedo0_last_V_0_data_out;
wire    input_AX_ALGdedo0_last_V_0_vld_in;
wire    input_AX_ALGdedo0_last_V_0_vld_out;
wire    input_AX_ALGdedo0_last_V_0_ack_in;
wire    input_AX_ALGdedo0_last_V_0_ack_out;
reg   [0:0] input_AX_ALGdedo0_last_V_0_payload_A;
reg   [0:0] input_AX_ALGdedo0_last_V_0_payload_B;
reg    input_AX_ALGdedo0_last_V_0_sel_rd;
reg    input_AX_ALGdedo0_last_V_0_sel_wr;
wire    input_AX_ALGdedo0_last_V_0_sel;
wire    input_AX_ALGdedo0_last_V_0_load_A;
wire    input_AX_ALGdedo0_last_V_0_load_B;
reg   [1:0] input_AX_ALGdedo0_last_V_0_state;
wire    input_AX_ALGdedo0_last_V_0_state_cmp_full;
reg   [4:0] input_AX_ALGdedo0_id_V_0_data_out;
wire    input_AX_ALGdedo0_id_V_0_vld_in;
wire    input_AX_ALGdedo0_id_V_0_vld_out;
wire    input_AX_ALGdedo0_id_V_0_ack_in;
wire    input_AX_ALGdedo0_id_V_0_ack_out;
reg   [4:0] input_AX_ALGdedo0_id_V_0_payload_A;
reg   [4:0] input_AX_ALGdedo0_id_V_0_payload_B;
reg    input_AX_ALGdedo0_id_V_0_sel_rd;
reg    input_AX_ALGdedo0_id_V_0_sel_wr;
wire    input_AX_ALGdedo0_id_V_0_sel;
wire    input_AX_ALGdedo0_id_V_0_load_A;
wire    input_AX_ALGdedo0_id_V_0_load_B;
reg   [1:0] input_AX_ALGdedo0_id_V_0_state;
wire    input_AX_ALGdedo0_id_V_0_state_cmp_full;
reg   [4:0] input_AX_ALGdedo0_dest_V_0_data_out;
wire    input_AX_ALGdedo0_dest_V_0_vld_in;
wire    input_AX_ALGdedo0_dest_V_0_vld_out;
wire    input_AX_ALGdedo0_dest_V_0_ack_in;
wire    input_AX_ALGdedo0_dest_V_0_ack_out;
reg   [4:0] input_AX_ALGdedo0_dest_V_0_payload_A;
reg   [4:0] input_AX_ALGdedo0_dest_V_0_payload_B;
reg    input_AX_ALGdedo0_dest_V_0_sel_rd;
reg    input_AX_ALGdedo0_dest_V_0_sel_wr;
wire    input_AX_ALGdedo0_dest_V_0_sel;
wire    input_AX_ALGdedo0_dest_V_0_load_A;
wire    input_AX_ALGdedo0_dest_V_0_load_B;
reg   [1:0] input_AX_ALGdedo0_dest_V_0_state;
wire    input_AX_ALGdedo0_dest_V_0_state_cmp_full;
reg   [31:0] input_AX_ALGpalma0_data_V_0_data_out;
wire    input_AX_ALGpalma0_data_V_0_vld_in;
wire    input_AX_ALGpalma0_data_V_0_vld_out;
wire    input_AX_ALGpalma0_data_V_0_ack_in;
wire    input_AX_ALGpalma0_data_V_0_ack_out;
reg   [31:0] input_AX_ALGpalma0_data_V_0_payload_A;
reg   [31:0] input_AX_ALGpalma0_data_V_0_payload_B;
reg    input_AX_ALGpalma0_data_V_0_sel_rd;
reg    input_AX_ALGpalma0_data_V_0_sel_wr;
wire    input_AX_ALGpalma0_data_V_0_sel;
wire    input_AX_ALGpalma0_data_V_0_load_A;
wire    input_AX_ALGpalma0_data_V_0_load_B;
reg   [1:0] input_AX_ALGpalma0_data_V_0_state;
wire    input_AX_ALGpalma0_data_V_0_state_cmp_full;
reg   [3:0] input_AX_ALGpalma0_keep_V_0_data_out;
wire    input_AX_ALGpalma0_keep_V_0_vld_in;
wire    input_AX_ALGpalma0_keep_V_0_vld_out;
wire    input_AX_ALGpalma0_keep_V_0_ack_in;
wire    input_AX_ALGpalma0_keep_V_0_ack_out;
reg   [3:0] input_AX_ALGpalma0_keep_V_0_payload_A;
reg   [3:0] input_AX_ALGpalma0_keep_V_0_payload_B;
reg    input_AX_ALGpalma0_keep_V_0_sel_rd;
reg    input_AX_ALGpalma0_keep_V_0_sel_wr;
wire    input_AX_ALGpalma0_keep_V_0_sel;
wire    input_AX_ALGpalma0_keep_V_0_load_A;
wire    input_AX_ALGpalma0_keep_V_0_load_B;
reg   [1:0] input_AX_ALGpalma0_keep_V_0_state;
wire    input_AX_ALGpalma0_keep_V_0_state_cmp_full;
reg   [3:0] input_AX_ALGpalma0_strb_V_0_data_out;
wire    input_AX_ALGpalma0_strb_V_0_vld_in;
wire    input_AX_ALGpalma0_strb_V_0_vld_out;
wire    input_AX_ALGpalma0_strb_V_0_ack_in;
wire    input_AX_ALGpalma0_strb_V_0_ack_out;
reg   [3:0] input_AX_ALGpalma0_strb_V_0_payload_A;
reg   [3:0] input_AX_ALGpalma0_strb_V_0_payload_B;
reg    input_AX_ALGpalma0_strb_V_0_sel_rd;
reg    input_AX_ALGpalma0_strb_V_0_sel_wr;
wire    input_AX_ALGpalma0_strb_V_0_sel;
wire    input_AX_ALGpalma0_strb_V_0_load_A;
wire    input_AX_ALGpalma0_strb_V_0_load_B;
reg   [1:0] input_AX_ALGpalma0_strb_V_0_state;
wire    input_AX_ALGpalma0_strb_V_0_state_cmp_full;
reg   [3:0] input_AX_ALGpalma0_user_V_0_data_out;
wire    input_AX_ALGpalma0_user_V_0_vld_in;
wire    input_AX_ALGpalma0_user_V_0_vld_out;
wire    input_AX_ALGpalma0_user_V_0_ack_in;
wire    input_AX_ALGpalma0_user_V_0_ack_out;
reg   [3:0] input_AX_ALGpalma0_user_V_0_payload_A;
reg   [3:0] input_AX_ALGpalma0_user_V_0_payload_B;
reg    input_AX_ALGpalma0_user_V_0_sel_rd;
reg    input_AX_ALGpalma0_user_V_0_sel_wr;
wire    input_AX_ALGpalma0_user_V_0_sel;
wire    input_AX_ALGpalma0_user_V_0_load_A;
wire    input_AX_ALGpalma0_user_V_0_load_B;
reg   [1:0] input_AX_ALGpalma0_user_V_0_state;
wire    input_AX_ALGpalma0_user_V_0_state_cmp_full;
reg   [0:0] input_AX_ALGpalma0_last_V_0_data_out;
wire    input_AX_ALGpalma0_last_V_0_vld_in;
wire    input_AX_ALGpalma0_last_V_0_vld_out;
wire    input_AX_ALGpalma0_last_V_0_ack_in;
wire    input_AX_ALGpalma0_last_V_0_ack_out;
reg   [0:0] input_AX_ALGpalma0_last_V_0_payload_A;
reg   [0:0] input_AX_ALGpalma0_last_V_0_payload_B;
reg    input_AX_ALGpalma0_last_V_0_sel_rd;
reg    input_AX_ALGpalma0_last_V_0_sel_wr;
wire    input_AX_ALGpalma0_last_V_0_sel;
wire    input_AX_ALGpalma0_last_V_0_load_A;
wire    input_AX_ALGpalma0_last_V_0_load_B;
reg   [1:0] input_AX_ALGpalma0_last_V_0_state;
wire    input_AX_ALGpalma0_last_V_0_state_cmp_full;
reg   [4:0] input_AX_ALGpalma0_id_V_0_data_out;
wire    input_AX_ALGpalma0_id_V_0_vld_in;
wire    input_AX_ALGpalma0_id_V_0_vld_out;
wire    input_AX_ALGpalma0_id_V_0_ack_in;
wire    input_AX_ALGpalma0_id_V_0_ack_out;
reg   [4:0] input_AX_ALGpalma0_id_V_0_payload_A;
reg   [4:0] input_AX_ALGpalma0_id_V_0_payload_B;
reg    input_AX_ALGpalma0_id_V_0_sel_rd;
reg    input_AX_ALGpalma0_id_V_0_sel_wr;
wire    input_AX_ALGpalma0_id_V_0_sel;
wire    input_AX_ALGpalma0_id_V_0_load_A;
wire    input_AX_ALGpalma0_id_V_0_load_B;
reg   [1:0] input_AX_ALGpalma0_id_V_0_state;
wire    input_AX_ALGpalma0_id_V_0_state_cmp_full;
reg   [4:0] input_AX_ALGpalma0_dest_V_0_data_out;
wire    input_AX_ALGpalma0_dest_V_0_vld_in;
wire    input_AX_ALGpalma0_dest_V_0_vld_out;
wire    input_AX_ALGpalma0_dest_V_0_ack_in;
wire    input_AX_ALGpalma0_dest_V_0_ack_out;
reg   [4:0] input_AX_ALGpalma0_dest_V_0_payload_A;
reg   [4:0] input_AX_ALGpalma0_dest_V_0_payload_B;
reg    input_AX_ALGpalma0_dest_V_0_sel_rd;
reg    input_AX_ALGpalma0_dest_V_0_sel_wr;
wire    input_AX_ALGpalma0_dest_V_0_sel;
wire    input_AX_ALGpalma0_dest_V_0_load_A;
wire    input_AX_ALGpalma0_dest_V_0_load_B;
reg   [1:0] input_AX_ALGpalma0_dest_V_0_state;
wire    input_AX_ALGpalma0_dest_V_0_state_cmp_full;
reg   [31:0] input_AX_ALGdedo1_data_V_0_data_out;
wire    input_AX_ALGdedo1_data_V_0_vld_in;
wire    input_AX_ALGdedo1_data_V_0_vld_out;
wire    input_AX_ALGdedo1_data_V_0_ack_in;
wire    input_AX_ALGdedo1_data_V_0_ack_out;
reg   [31:0] input_AX_ALGdedo1_data_V_0_payload_A;
reg   [31:0] input_AX_ALGdedo1_data_V_0_payload_B;
reg    input_AX_ALGdedo1_data_V_0_sel_rd;
reg    input_AX_ALGdedo1_data_V_0_sel_wr;
wire    input_AX_ALGdedo1_data_V_0_sel;
wire    input_AX_ALGdedo1_data_V_0_load_A;
wire    input_AX_ALGdedo1_data_V_0_load_B;
reg   [1:0] input_AX_ALGdedo1_data_V_0_state;
wire    input_AX_ALGdedo1_data_V_0_state_cmp_full;
reg   [3:0] input_AX_ALGdedo1_keep_V_0_data_out;
wire    input_AX_ALGdedo1_keep_V_0_vld_in;
wire    input_AX_ALGdedo1_keep_V_0_vld_out;
wire    input_AX_ALGdedo1_keep_V_0_ack_in;
wire    input_AX_ALGdedo1_keep_V_0_ack_out;
reg   [3:0] input_AX_ALGdedo1_keep_V_0_payload_A;
reg   [3:0] input_AX_ALGdedo1_keep_V_0_payload_B;
reg    input_AX_ALGdedo1_keep_V_0_sel_rd;
reg    input_AX_ALGdedo1_keep_V_0_sel_wr;
wire    input_AX_ALGdedo1_keep_V_0_sel;
wire    input_AX_ALGdedo1_keep_V_0_load_A;
wire    input_AX_ALGdedo1_keep_V_0_load_B;
reg   [1:0] input_AX_ALGdedo1_keep_V_0_state;
wire    input_AX_ALGdedo1_keep_V_0_state_cmp_full;
reg   [3:0] input_AX_ALGdedo1_strb_V_0_data_out;
wire    input_AX_ALGdedo1_strb_V_0_vld_in;
wire    input_AX_ALGdedo1_strb_V_0_vld_out;
wire    input_AX_ALGdedo1_strb_V_0_ack_in;
wire    input_AX_ALGdedo1_strb_V_0_ack_out;
reg   [3:0] input_AX_ALGdedo1_strb_V_0_payload_A;
reg   [3:0] input_AX_ALGdedo1_strb_V_0_payload_B;
reg    input_AX_ALGdedo1_strb_V_0_sel_rd;
reg    input_AX_ALGdedo1_strb_V_0_sel_wr;
wire    input_AX_ALGdedo1_strb_V_0_sel;
wire    input_AX_ALGdedo1_strb_V_0_load_A;
wire    input_AX_ALGdedo1_strb_V_0_load_B;
reg   [1:0] input_AX_ALGdedo1_strb_V_0_state;
wire    input_AX_ALGdedo1_strb_V_0_state_cmp_full;
reg   [3:0] input_AX_ALGdedo1_user_V_0_data_out;
wire    input_AX_ALGdedo1_user_V_0_vld_in;
wire    input_AX_ALGdedo1_user_V_0_vld_out;
wire    input_AX_ALGdedo1_user_V_0_ack_in;
wire    input_AX_ALGdedo1_user_V_0_ack_out;
reg   [3:0] input_AX_ALGdedo1_user_V_0_payload_A;
reg   [3:0] input_AX_ALGdedo1_user_V_0_payload_B;
reg    input_AX_ALGdedo1_user_V_0_sel_rd;
reg    input_AX_ALGdedo1_user_V_0_sel_wr;
wire    input_AX_ALGdedo1_user_V_0_sel;
wire    input_AX_ALGdedo1_user_V_0_load_A;
wire    input_AX_ALGdedo1_user_V_0_load_B;
reg   [1:0] input_AX_ALGdedo1_user_V_0_state;
wire    input_AX_ALGdedo1_user_V_0_state_cmp_full;
reg   [0:0] input_AX_ALGdedo1_last_V_0_data_out;
wire    input_AX_ALGdedo1_last_V_0_vld_in;
wire    input_AX_ALGdedo1_last_V_0_vld_out;
wire    input_AX_ALGdedo1_last_V_0_ack_in;
wire    input_AX_ALGdedo1_last_V_0_ack_out;
reg   [0:0] input_AX_ALGdedo1_last_V_0_payload_A;
reg   [0:0] input_AX_ALGdedo1_last_V_0_payload_B;
reg    input_AX_ALGdedo1_last_V_0_sel_rd;
reg    input_AX_ALGdedo1_last_V_0_sel_wr;
wire    input_AX_ALGdedo1_last_V_0_sel;
wire    input_AX_ALGdedo1_last_V_0_load_A;
wire    input_AX_ALGdedo1_last_V_0_load_B;
reg   [1:0] input_AX_ALGdedo1_last_V_0_state;
wire    input_AX_ALGdedo1_last_V_0_state_cmp_full;
reg   [4:0] input_AX_ALGdedo1_id_V_0_data_out;
wire    input_AX_ALGdedo1_id_V_0_vld_in;
wire    input_AX_ALGdedo1_id_V_0_vld_out;
wire    input_AX_ALGdedo1_id_V_0_ack_in;
wire    input_AX_ALGdedo1_id_V_0_ack_out;
reg   [4:0] input_AX_ALGdedo1_id_V_0_payload_A;
reg   [4:0] input_AX_ALGdedo1_id_V_0_payload_B;
reg    input_AX_ALGdedo1_id_V_0_sel_rd;
reg    input_AX_ALGdedo1_id_V_0_sel_wr;
wire    input_AX_ALGdedo1_id_V_0_sel;
wire    input_AX_ALGdedo1_id_V_0_load_A;
wire    input_AX_ALGdedo1_id_V_0_load_B;
reg   [1:0] input_AX_ALGdedo1_id_V_0_state;
wire    input_AX_ALGdedo1_id_V_0_state_cmp_full;
reg   [4:0] input_AX_ALGdedo1_dest_V_0_data_out;
wire    input_AX_ALGdedo1_dest_V_0_vld_in;
wire    input_AX_ALGdedo1_dest_V_0_vld_out;
wire    input_AX_ALGdedo1_dest_V_0_ack_in;
wire    input_AX_ALGdedo1_dest_V_0_ack_out;
reg   [4:0] input_AX_ALGdedo1_dest_V_0_payload_A;
reg   [4:0] input_AX_ALGdedo1_dest_V_0_payload_B;
reg    input_AX_ALGdedo1_dest_V_0_sel_rd;
reg    input_AX_ALGdedo1_dest_V_0_sel_wr;
wire    input_AX_ALGdedo1_dest_V_0_sel;
wire    input_AX_ALGdedo1_dest_V_0_load_A;
wire    input_AX_ALGdedo1_dest_V_0_load_B;
reg   [1:0] input_AX_ALGdedo1_dest_V_0_state;
wire    input_AX_ALGdedo1_dest_V_0_state_cmp_full;
reg   [31:0] input_AX_ALGpalma1_data_V_0_data_out;
wire    input_AX_ALGpalma1_data_V_0_vld_in;
wire    input_AX_ALGpalma1_data_V_0_vld_out;
wire    input_AX_ALGpalma1_data_V_0_ack_in;
wire    input_AX_ALGpalma1_data_V_0_ack_out;
reg   [31:0] input_AX_ALGpalma1_data_V_0_payload_A;
reg   [31:0] input_AX_ALGpalma1_data_V_0_payload_B;
reg    input_AX_ALGpalma1_data_V_0_sel_rd;
reg    input_AX_ALGpalma1_data_V_0_sel_wr;
wire    input_AX_ALGpalma1_data_V_0_sel;
wire    input_AX_ALGpalma1_data_V_0_load_A;
wire    input_AX_ALGpalma1_data_V_0_load_B;
reg   [1:0] input_AX_ALGpalma1_data_V_0_state;
wire    input_AX_ALGpalma1_data_V_0_state_cmp_full;
reg   [3:0] input_AX_ALGpalma1_keep_V_0_data_out;
wire    input_AX_ALGpalma1_keep_V_0_vld_in;
wire    input_AX_ALGpalma1_keep_V_0_vld_out;
wire    input_AX_ALGpalma1_keep_V_0_ack_in;
wire    input_AX_ALGpalma1_keep_V_0_ack_out;
reg   [3:0] input_AX_ALGpalma1_keep_V_0_payload_A;
reg   [3:0] input_AX_ALGpalma1_keep_V_0_payload_B;
reg    input_AX_ALGpalma1_keep_V_0_sel_rd;
reg    input_AX_ALGpalma1_keep_V_0_sel_wr;
wire    input_AX_ALGpalma1_keep_V_0_sel;
wire    input_AX_ALGpalma1_keep_V_0_load_A;
wire    input_AX_ALGpalma1_keep_V_0_load_B;
reg   [1:0] input_AX_ALGpalma1_keep_V_0_state;
wire    input_AX_ALGpalma1_keep_V_0_state_cmp_full;
reg   [3:0] input_AX_ALGpalma1_strb_V_0_data_out;
wire    input_AX_ALGpalma1_strb_V_0_vld_in;
wire    input_AX_ALGpalma1_strb_V_0_vld_out;
wire    input_AX_ALGpalma1_strb_V_0_ack_in;
wire    input_AX_ALGpalma1_strb_V_0_ack_out;
reg   [3:0] input_AX_ALGpalma1_strb_V_0_payload_A;
reg   [3:0] input_AX_ALGpalma1_strb_V_0_payload_B;
reg    input_AX_ALGpalma1_strb_V_0_sel_rd;
reg    input_AX_ALGpalma1_strb_V_0_sel_wr;
wire    input_AX_ALGpalma1_strb_V_0_sel;
wire    input_AX_ALGpalma1_strb_V_0_load_A;
wire    input_AX_ALGpalma1_strb_V_0_load_B;
reg   [1:0] input_AX_ALGpalma1_strb_V_0_state;
wire    input_AX_ALGpalma1_strb_V_0_state_cmp_full;
reg   [3:0] input_AX_ALGpalma1_user_V_0_data_out;
wire    input_AX_ALGpalma1_user_V_0_vld_in;
wire    input_AX_ALGpalma1_user_V_0_vld_out;
wire    input_AX_ALGpalma1_user_V_0_ack_in;
wire    input_AX_ALGpalma1_user_V_0_ack_out;
reg   [3:0] input_AX_ALGpalma1_user_V_0_payload_A;
reg   [3:0] input_AX_ALGpalma1_user_V_0_payload_B;
reg    input_AX_ALGpalma1_user_V_0_sel_rd;
reg    input_AX_ALGpalma1_user_V_0_sel_wr;
wire    input_AX_ALGpalma1_user_V_0_sel;
wire    input_AX_ALGpalma1_user_V_0_load_A;
wire    input_AX_ALGpalma1_user_V_0_load_B;
reg   [1:0] input_AX_ALGpalma1_user_V_0_state;
wire    input_AX_ALGpalma1_user_V_0_state_cmp_full;
reg   [0:0] input_AX_ALGpalma1_last_V_0_data_out;
wire    input_AX_ALGpalma1_last_V_0_vld_in;
wire    input_AX_ALGpalma1_last_V_0_vld_out;
wire    input_AX_ALGpalma1_last_V_0_ack_in;
wire    input_AX_ALGpalma1_last_V_0_ack_out;
reg   [0:0] input_AX_ALGpalma1_last_V_0_payload_A;
reg   [0:0] input_AX_ALGpalma1_last_V_0_payload_B;
reg    input_AX_ALGpalma1_last_V_0_sel_rd;
reg    input_AX_ALGpalma1_last_V_0_sel_wr;
wire    input_AX_ALGpalma1_last_V_0_sel;
wire    input_AX_ALGpalma1_last_V_0_load_A;
wire    input_AX_ALGpalma1_last_V_0_load_B;
reg   [1:0] input_AX_ALGpalma1_last_V_0_state;
wire    input_AX_ALGpalma1_last_V_0_state_cmp_full;
reg   [4:0] input_AX_ALGpalma1_id_V_0_data_out;
wire    input_AX_ALGpalma1_id_V_0_vld_in;
wire    input_AX_ALGpalma1_id_V_0_vld_out;
wire    input_AX_ALGpalma1_id_V_0_ack_in;
wire    input_AX_ALGpalma1_id_V_0_ack_out;
reg   [4:0] input_AX_ALGpalma1_id_V_0_payload_A;
reg   [4:0] input_AX_ALGpalma1_id_V_0_payload_B;
reg    input_AX_ALGpalma1_id_V_0_sel_rd;
reg    input_AX_ALGpalma1_id_V_0_sel_wr;
wire    input_AX_ALGpalma1_id_V_0_sel;
wire    input_AX_ALGpalma1_id_V_0_load_A;
wire    input_AX_ALGpalma1_id_V_0_load_B;
reg   [1:0] input_AX_ALGpalma1_id_V_0_state;
wire    input_AX_ALGpalma1_id_V_0_state_cmp_full;
reg   [4:0] input_AX_ALGpalma1_dest_V_0_data_out;
wire    input_AX_ALGpalma1_dest_V_0_vld_in;
wire    input_AX_ALGpalma1_dest_V_0_vld_out;
wire    input_AX_ALGpalma1_dest_V_0_ack_in;
wire    input_AX_ALGpalma1_dest_V_0_ack_out;
reg   [4:0] input_AX_ALGpalma1_dest_V_0_payload_A;
reg   [4:0] input_AX_ALGpalma1_dest_V_0_payload_B;
reg    input_AX_ALGpalma1_dest_V_0_sel_rd;
reg    input_AX_ALGpalma1_dest_V_0_sel_wr;
wire    input_AX_ALGpalma1_dest_V_0_sel;
wire    input_AX_ALGpalma1_dest_V_0_load_A;
wire    input_AX_ALGpalma1_dest_V_0_load_B;
reg   [1:0] input_AX_ALGpalma1_dest_V_0_state;
wire    input_AX_ALGpalma1_dest_V_0_state_cmp_full;
reg   [31:0] output_AX_ALG_data_V_1_data_out;
wire    output_AX_ALG_data_V_1_vld_in;
wire    output_AX_ALG_data_V_1_vld_out;
wire    output_AX_ALG_data_V_1_ack_in;
wire    output_AX_ALG_data_V_1_ack_out;
reg   [31:0] output_AX_ALG_data_V_1_payload_A;
reg   [31:0] output_AX_ALG_data_V_1_payload_B;
reg    output_AX_ALG_data_V_1_sel_rd;
reg    output_AX_ALG_data_V_1_sel_wr;
wire    output_AX_ALG_data_V_1_sel;
wire    output_AX_ALG_data_V_1_load_A;
wire    output_AX_ALG_data_V_1_load_B;
reg   [1:0] output_AX_ALG_data_V_1_state;
wire    output_AX_ALG_data_V_1_state_cmp_full;
reg   [3:0] output_AX_ALG_keep_V_1_data_out;
wire    output_AX_ALG_keep_V_1_vld_in;
wire    output_AX_ALG_keep_V_1_vld_out;
wire    output_AX_ALG_keep_V_1_ack_in;
wire    output_AX_ALG_keep_V_1_ack_out;
reg   [3:0] output_AX_ALG_keep_V_1_payload_A;
reg   [3:0] output_AX_ALG_keep_V_1_payload_B;
reg    output_AX_ALG_keep_V_1_sel_rd;
reg    output_AX_ALG_keep_V_1_sel_wr;
wire    output_AX_ALG_keep_V_1_sel;
wire    output_AX_ALG_keep_V_1_load_A;
wire    output_AX_ALG_keep_V_1_load_B;
reg   [1:0] output_AX_ALG_keep_V_1_state;
wire    output_AX_ALG_keep_V_1_state_cmp_full;
reg   [3:0] output_AX_ALG_strb_V_1_data_out;
wire    output_AX_ALG_strb_V_1_vld_in;
wire    output_AX_ALG_strb_V_1_vld_out;
wire    output_AX_ALG_strb_V_1_ack_in;
wire    output_AX_ALG_strb_V_1_ack_out;
reg   [3:0] output_AX_ALG_strb_V_1_payload_A;
reg   [3:0] output_AX_ALG_strb_V_1_payload_B;
reg    output_AX_ALG_strb_V_1_sel_rd;
reg    output_AX_ALG_strb_V_1_sel_wr;
wire    output_AX_ALG_strb_V_1_sel;
wire    output_AX_ALG_strb_V_1_load_A;
wire    output_AX_ALG_strb_V_1_load_B;
reg   [1:0] output_AX_ALG_strb_V_1_state;
wire    output_AX_ALG_strb_V_1_state_cmp_full;
reg   [3:0] output_AX_ALG_user_V_1_data_out;
wire    output_AX_ALG_user_V_1_vld_in;
wire    output_AX_ALG_user_V_1_vld_out;
wire    output_AX_ALG_user_V_1_ack_in;
wire    output_AX_ALG_user_V_1_ack_out;
reg   [3:0] output_AX_ALG_user_V_1_payload_A;
reg   [3:0] output_AX_ALG_user_V_1_payload_B;
reg    output_AX_ALG_user_V_1_sel_rd;
reg    output_AX_ALG_user_V_1_sel_wr;
wire    output_AX_ALG_user_V_1_sel;
wire    output_AX_ALG_user_V_1_load_A;
wire    output_AX_ALG_user_V_1_load_B;
reg   [1:0] output_AX_ALG_user_V_1_state;
wire    output_AX_ALG_user_V_1_state_cmp_full;
reg   [0:0] output_AX_ALG_last_V_1_data_out;
wire    output_AX_ALG_last_V_1_vld_in;
wire    output_AX_ALG_last_V_1_vld_out;
wire    output_AX_ALG_last_V_1_ack_in;
wire    output_AX_ALG_last_V_1_ack_out;
reg   [0:0] output_AX_ALG_last_V_1_payload_A;
reg   [0:0] output_AX_ALG_last_V_1_payload_B;
reg    output_AX_ALG_last_V_1_sel_rd;
reg    output_AX_ALG_last_V_1_sel_wr;
wire    output_AX_ALG_last_V_1_sel;
wire    output_AX_ALG_last_V_1_load_A;
wire    output_AX_ALG_last_V_1_load_B;
reg   [1:0] output_AX_ALG_last_V_1_state;
wire    output_AX_ALG_last_V_1_state_cmp_full;
reg   [4:0] output_AX_ALG_id_V_1_data_out;
wire    output_AX_ALG_id_V_1_vld_in;
wire    output_AX_ALG_id_V_1_vld_out;
wire    output_AX_ALG_id_V_1_ack_in;
wire    output_AX_ALG_id_V_1_ack_out;
reg   [4:0] output_AX_ALG_id_V_1_payload_A;
reg   [4:0] output_AX_ALG_id_V_1_payload_B;
reg    output_AX_ALG_id_V_1_sel_rd;
reg    output_AX_ALG_id_V_1_sel_wr;
wire    output_AX_ALG_id_V_1_sel;
wire    output_AX_ALG_id_V_1_load_A;
wire    output_AX_ALG_id_V_1_load_B;
reg   [1:0] output_AX_ALG_id_V_1_state;
wire    output_AX_ALG_id_V_1_state_cmp_full;
reg   [4:0] output_AX_ALG_dest_V_1_data_out;
wire    output_AX_ALG_dest_V_1_vld_in;
wire    output_AX_ALG_dest_V_1_vld_out;
wire    output_AX_ALG_dest_V_1_ack_in;
wire    output_AX_ALG_dest_V_1_ack_out;
reg   [4:0] output_AX_ALG_dest_V_1_payload_A;
reg   [4:0] output_AX_ALG_dest_V_1_payload_B;
reg    output_AX_ALG_dest_V_1_sel_rd;
reg    output_AX_ALG_dest_V_1_sel_wr;
wire    output_AX_ALG_dest_V_1_sel;
wire    output_AX_ALG_dest_V_1_load_A;
wire    output_AX_ALG_dest_V_1_load_B;
reg   [1:0] output_AX_ALG_dest_V_1_state;
wire    output_AX_ALG_dest_V_1_state_cmp_full;
wire    dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n;
reg    input_AX_ALGdedo0_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire    palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n;
reg    input_AX_ALGpalma0_TDATA_blk_n;
wire    dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n;
reg    input_AX_ALGdedo1_TDATA_blk_n;
wire    palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n;
reg    input_AX_ALGpalma1_TDATA_blk_n;
wire   [31:0] dedo0_0_V_read_data_fu_118_ap_return;
reg   [31:0] dedo0_0_V_reg_194;
reg    ap_block_state2;
wire   [31:0] palma0_0_V_read_data_fu_137_ap_return;
reg   [31:0] palma0_0_V_reg_199;
wire   [31:0] dedo1_0_V_read_data_fu_156_ap_return;
reg   [31:0] dedo1_0_V_reg_204;
wire   [31:0] palma1_0_V_read_data_fu_175_ap_return;
reg   [31:0] palma1_0_V_reg_209;
wire    grp_write_data_fu_96_ap_start;
wire    grp_write_data_fu_96_ap_done;
wire    grp_write_data_fu_96_ap_idle;
wire    grp_write_data_fu_96_ap_ready;
wire   [31:0] grp_write_data_fu_96_output_AX_ALG_TDATA;
wire    grp_write_data_fu_96_output_AX_ALG_TVALID;
wire    grp_write_data_fu_96_output_AX_ALG_TREADY;
wire   [3:0] grp_write_data_fu_96_output_AX_ALG_TKEEP;
wire   [3:0] grp_write_data_fu_96_output_AX_ALG_TSTRB;
wire   [3:0] grp_write_data_fu_96_output_AX_ALG_TUSER;
wire   [0:0] grp_write_data_fu_96_output_AX_ALG_TLAST;
wire   [4:0] grp_write_data_fu_96_output_AX_ALG_TID;
wire   [4:0] grp_write_data_fu_96_output_AX_ALG_TDEST;
reg    dedo0_0_V_read_data_fu_118_ap_start;
wire    dedo0_0_V_read_data_fu_118_ap_done;
wire    dedo0_0_V_read_data_fu_118_ap_idle;
wire    dedo0_0_V_read_data_fu_118_ap_ready;
wire    dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TVALID;
wire    dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY;
reg    palma0_0_V_read_data_fu_137_ap_start;
wire    palma0_0_V_read_data_fu_137_ap_done;
wire    palma0_0_V_read_data_fu_137_ap_idle;
wire    palma0_0_V_read_data_fu_137_ap_ready;
wire    palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TVALID;
wire    palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY;
reg    dedo1_0_V_read_data_fu_156_ap_start;
wire    dedo1_0_V_read_data_fu_156_ap_done;
wire    dedo1_0_V_read_data_fu_156_ap_idle;
wire    dedo1_0_V_read_data_fu_156_ap_ready;
wire    dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TVALID;
wire    dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY;
reg    palma1_0_V_read_data_fu_175_ap_start;
wire    palma1_0_V_read_data_fu_175_ap_done;
wire    palma1_0_V_read_data_fu_175_ap_idle;
wire    palma1_0_V_read_data_fu_175_ap_ready;
wire    palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TVALID;
wire    palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY;
reg    ap_reg_grp_write_data_fu_96_ap_start;
reg    ap_block_state2_ignore_call46;
wire    ap_CS_fsm_state3;
reg    ap_block_state2_ignore_call42;
reg    ap_block_state2_ignore_call43;
reg    ap_block_state2_ignore_call44;
reg    ap_block_state2_ignore_call45;
reg   [3:0] ap_NS_fsm;
wire    ap_CS_fsm_state4;
reg    ap_block_state4;

// power-on initialization
initial begin
#0 input_AX_ALGdedo0_data_V_0_sel_rd = 1'b0;
#0 input_AX_ALGdedo0_data_V_0_sel_wr = 1'b0;
#0 input_AX_ALGdedo0_data_V_0_state = 2'd0;
#0 input_AX_ALGdedo0_keep_V_0_sel_rd = 1'b0;
#0 input_AX_ALGdedo0_keep_V_0_sel_wr = 1'b0;
#0 input_AX_ALGdedo0_keep_V_0_state = 2'd0;
#0 input_AX_ALGdedo0_strb_V_0_sel_rd = 1'b0;
#0 input_AX_ALGdedo0_strb_V_0_sel_wr = 1'b0;
#0 input_AX_ALGdedo0_strb_V_0_state = 2'd0;
#0 input_AX_ALGdedo0_user_V_0_sel_rd = 1'b0;
#0 input_AX_ALGdedo0_user_V_0_sel_wr = 1'b0;
#0 input_AX_ALGdedo0_user_V_0_state = 2'd0;
#0 input_AX_ALGdedo0_last_V_0_sel_rd = 1'b0;
#0 input_AX_ALGdedo0_last_V_0_sel_wr = 1'b0;
#0 input_AX_ALGdedo0_last_V_0_state = 2'd0;
#0 input_AX_ALGdedo0_id_V_0_sel_rd = 1'b0;
#0 input_AX_ALGdedo0_id_V_0_sel_wr = 1'b0;
#0 input_AX_ALGdedo0_id_V_0_state = 2'd0;
#0 input_AX_ALGdedo0_dest_V_0_sel_rd = 1'b0;
#0 input_AX_ALGdedo0_dest_V_0_sel_wr = 1'b0;
#0 input_AX_ALGdedo0_dest_V_0_state = 2'd0;
#0 input_AX_ALGpalma0_data_V_0_sel_rd = 1'b0;
#0 input_AX_ALGpalma0_data_V_0_sel_wr = 1'b0;
#0 input_AX_ALGpalma0_data_V_0_state = 2'd0;
#0 input_AX_ALGpalma0_keep_V_0_sel_rd = 1'b0;
#0 input_AX_ALGpalma0_keep_V_0_sel_wr = 1'b0;
#0 input_AX_ALGpalma0_keep_V_0_state = 2'd0;
#0 input_AX_ALGpalma0_strb_V_0_sel_rd = 1'b0;
#0 input_AX_ALGpalma0_strb_V_0_sel_wr = 1'b0;
#0 input_AX_ALGpalma0_strb_V_0_state = 2'd0;
#0 input_AX_ALGpalma0_user_V_0_sel_rd = 1'b0;
#0 input_AX_ALGpalma0_user_V_0_sel_wr = 1'b0;
#0 input_AX_ALGpalma0_user_V_0_state = 2'd0;
#0 input_AX_ALGpalma0_last_V_0_sel_rd = 1'b0;
#0 input_AX_ALGpalma0_last_V_0_sel_wr = 1'b0;
#0 input_AX_ALGpalma0_last_V_0_state = 2'd0;
#0 input_AX_ALGpalma0_id_V_0_sel_rd = 1'b0;
#0 input_AX_ALGpalma0_id_V_0_sel_wr = 1'b0;
#0 input_AX_ALGpalma0_id_V_0_state = 2'd0;
#0 input_AX_ALGpalma0_dest_V_0_sel_rd = 1'b0;
#0 input_AX_ALGpalma0_dest_V_0_sel_wr = 1'b0;
#0 input_AX_ALGpalma0_dest_V_0_state = 2'd0;
#0 input_AX_ALGdedo1_data_V_0_sel_rd = 1'b0;
#0 input_AX_ALGdedo1_data_V_0_sel_wr = 1'b0;
#0 input_AX_ALGdedo1_data_V_0_state = 2'd0;
#0 input_AX_ALGdedo1_keep_V_0_sel_rd = 1'b0;
#0 input_AX_ALGdedo1_keep_V_0_sel_wr = 1'b0;
#0 input_AX_ALGdedo1_keep_V_0_state = 2'd0;
#0 input_AX_ALGdedo1_strb_V_0_sel_rd = 1'b0;
#0 input_AX_ALGdedo1_strb_V_0_sel_wr = 1'b0;
#0 input_AX_ALGdedo1_strb_V_0_state = 2'd0;
#0 input_AX_ALGdedo1_user_V_0_sel_rd = 1'b0;
#0 input_AX_ALGdedo1_user_V_0_sel_wr = 1'b0;
#0 input_AX_ALGdedo1_user_V_0_state = 2'd0;
#0 input_AX_ALGdedo1_last_V_0_sel_rd = 1'b0;
#0 input_AX_ALGdedo1_last_V_0_sel_wr = 1'b0;
#0 input_AX_ALGdedo1_last_V_0_state = 2'd0;
#0 input_AX_ALGdedo1_id_V_0_sel_rd = 1'b0;
#0 input_AX_ALGdedo1_id_V_0_sel_wr = 1'b0;
#0 input_AX_ALGdedo1_id_V_0_state = 2'd0;
#0 input_AX_ALGdedo1_dest_V_0_sel_rd = 1'b0;
#0 input_AX_ALGdedo1_dest_V_0_sel_wr = 1'b0;
#0 input_AX_ALGdedo1_dest_V_0_state = 2'd0;
#0 input_AX_ALGpalma1_data_V_0_sel_rd = 1'b0;
#0 input_AX_ALGpalma1_data_V_0_sel_wr = 1'b0;
#0 input_AX_ALGpalma1_data_V_0_state = 2'd0;
#0 input_AX_ALGpalma1_keep_V_0_sel_rd = 1'b0;
#0 input_AX_ALGpalma1_keep_V_0_sel_wr = 1'b0;
#0 input_AX_ALGpalma1_keep_V_0_state = 2'd0;
#0 input_AX_ALGpalma1_strb_V_0_sel_rd = 1'b0;
#0 input_AX_ALGpalma1_strb_V_0_sel_wr = 1'b0;
#0 input_AX_ALGpalma1_strb_V_0_state = 2'd0;
#0 input_AX_ALGpalma1_user_V_0_sel_rd = 1'b0;
#0 input_AX_ALGpalma1_user_V_0_sel_wr = 1'b0;
#0 input_AX_ALGpalma1_user_V_0_state = 2'd0;
#0 input_AX_ALGpalma1_last_V_0_sel_rd = 1'b0;
#0 input_AX_ALGpalma1_last_V_0_sel_wr = 1'b0;
#0 input_AX_ALGpalma1_last_V_0_state = 2'd0;
#0 input_AX_ALGpalma1_id_V_0_sel_rd = 1'b0;
#0 input_AX_ALGpalma1_id_V_0_sel_wr = 1'b0;
#0 input_AX_ALGpalma1_id_V_0_state = 2'd0;
#0 input_AX_ALGpalma1_dest_V_0_sel_rd = 1'b0;
#0 input_AX_ALGpalma1_dest_V_0_sel_wr = 1'b0;
#0 input_AX_ALGpalma1_dest_V_0_state = 2'd0;
#0 output_AX_ALG_data_V_1_sel_rd = 1'b0;
#0 output_AX_ALG_data_V_1_sel_wr = 1'b0;
#0 output_AX_ALG_data_V_1_state = 2'd0;
#0 output_AX_ALG_keep_V_1_sel_rd = 1'b0;
#0 output_AX_ALG_keep_V_1_sel_wr = 1'b0;
#0 output_AX_ALG_keep_V_1_state = 2'd0;
#0 output_AX_ALG_strb_V_1_sel_rd = 1'b0;
#0 output_AX_ALG_strb_V_1_sel_wr = 1'b0;
#0 output_AX_ALG_strb_V_1_state = 2'd0;
#0 output_AX_ALG_user_V_1_sel_rd = 1'b0;
#0 output_AX_ALG_user_V_1_sel_wr = 1'b0;
#0 output_AX_ALG_user_V_1_state = 2'd0;
#0 output_AX_ALG_last_V_1_sel_rd = 1'b0;
#0 output_AX_ALG_last_V_1_sel_wr = 1'b0;
#0 output_AX_ALG_last_V_1_state = 2'd0;
#0 output_AX_ALG_id_V_1_sel_rd = 1'b0;
#0 output_AX_ALG_id_V_1_sel_wr = 1'b0;
#0 output_AX_ALG_id_V_1_state = 2'd0;
#0 output_AX_ALG_dest_V_1_sel_rd = 1'b0;
#0 output_AX_ALG_dest_V_1_sel_wr = 1'b0;
#0 output_AX_ALG_dest_V_1_state = 2'd0;
#0 ap_CS_fsm = 4'd1;
#0 ap_reg_grp_write_data_fu_96_ap_start = 1'b0;
end

write_data grp_write_data_fu_96(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_write_data_fu_96_ap_start),
    .ap_done(grp_write_data_fu_96_ap_done),
    .ap_idle(grp_write_data_fu_96_ap_idle),
    .ap_ready(grp_write_data_fu_96_ap_ready),
    .buf_0_V_read(dedo0_0_V_reg_194),
    .buf_1_V_read(palma0_0_V_reg_199),
    .buf_2_V_read(dedo1_0_V_reg_204),
    .buf_3_V_read(palma1_0_V_reg_209),
    .output_AX_ALG_TDATA(grp_write_data_fu_96_output_AX_ALG_TDATA),
    .output_AX_ALG_TVALID(grp_write_data_fu_96_output_AX_ALG_TVALID),
    .output_AX_ALG_TREADY(grp_write_data_fu_96_output_AX_ALG_TREADY),
    .output_AX_ALG_TKEEP(grp_write_data_fu_96_output_AX_ALG_TKEEP),
    .output_AX_ALG_TSTRB(grp_write_data_fu_96_output_AX_ALG_TSTRB),
    .output_AX_ALG_TUSER(grp_write_data_fu_96_output_AX_ALG_TUSER),
    .output_AX_ALG_TLAST(grp_write_data_fu_96_output_AX_ALG_TLAST),
    .output_AX_ALG_TID(grp_write_data_fu_96_output_AX_ALG_TID),
    .output_AX_ALG_TDEST(grp_write_data_fu_96_output_AX_ALG_TDEST)
);

read_data dedo0_0_V_read_data_fu_118(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(dedo0_0_V_read_data_fu_118_ap_start),
    .ap_done(dedo0_0_V_read_data_fu_118_ap_done),
    .ap_idle(dedo0_0_V_read_data_fu_118_ap_idle),
    .ap_ready(dedo0_0_V_read_data_fu_118_ap_ready),
    .input_AX_ALGpalma1_TDATA(input_AX_ALGdedo0_data_V_0_data_out),
    .input_AX_ALGpalma1_TVALID(dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TVALID),
    .input_AX_ALGpalma1_TREADY(dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY),
    .input_AX_ALGpalma1_TKEEP(input_AX_ALGdedo0_keep_V_0_data_out),
    .input_AX_ALGpalma1_TSTRB(input_AX_ALGdedo0_strb_V_0_data_out),
    .input_AX_ALGpalma1_TUSER(input_AX_ALGdedo0_user_V_0_data_out),
    .input_AX_ALGpalma1_TLAST(input_AX_ALGdedo0_last_V_0_data_out),
    .input_AX_ALGpalma1_TID(input_AX_ALGdedo0_id_V_0_data_out),
    .input_AX_ALGpalma1_TDEST(input_AX_ALGdedo0_dest_V_0_data_out),
    .ap_return(dedo0_0_V_read_data_fu_118_ap_return),
    .input_AX_ALGpalma1_TDATA_blk_n(dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n)
);

read_data palma0_0_V_read_data_fu_137(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(palma0_0_V_read_data_fu_137_ap_start),
    .ap_done(palma0_0_V_read_data_fu_137_ap_done),
    .ap_idle(palma0_0_V_read_data_fu_137_ap_idle),
    .ap_ready(palma0_0_V_read_data_fu_137_ap_ready),
    .input_AX_ALGpalma1_TDATA(input_AX_ALGpalma0_data_V_0_data_out),
    .input_AX_ALGpalma1_TVALID(palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TVALID),
    .input_AX_ALGpalma1_TREADY(palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY),
    .input_AX_ALGpalma1_TKEEP(input_AX_ALGpalma0_keep_V_0_data_out),
    .input_AX_ALGpalma1_TSTRB(input_AX_ALGpalma0_strb_V_0_data_out),
    .input_AX_ALGpalma1_TUSER(input_AX_ALGpalma0_user_V_0_data_out),
    .input_AX_ALGpalma1_TLAST(input_AX_ALGpalma0_last_V_0_data_out),
    .input_AX_ALGpalma1_TID(input_AX_ALGpalma0_id_V_0_data_out),
    .input_AX_ALGpalma1_TDEST(input_AX_ALGpalma0_dest_V_0_data_out),
    .ap_return(palma0_0_V_read_data_fu_137_ap_return),
    .input_AX_ALGpalma1_TDATA_blk_n(palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n)
);

read_data dedo1_0_V_read_data_fu_156(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(dedo1_0_V_read_data_fu_156_ap_start),
    .ap_done(dedo1_0_V_read_data_fu_156_ap_done),
    .ap_idle(dedo1_0_V_read_data_fu_156_ap_idle),
    .ap_ready(dedo1_0_V_read_data_fu_156_ap_ready),
    .input_AX_ALGpalma1_TDATA(input_AX_ALGdedo1_data_V_0_data_out),
    .input_AX_ALGpalma1_TVALID(dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TVALID),
    .input_AX_ALGpalma1_TREADY(dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY),
    .input_AX_ALGpalma1_TKEEP(input_AX_ALGdedo1_keep_V_0_data_out),
    .input_AX_ALGpalma1_TSTRB(input_AX_ALGdedo1_strb_V_0_data_out),
    .input_AX_ALGpalma1_TUSER(input_AX_ALGdedo1_user_V_0_data_out),
    .input_AX_ALGpalma1_TLAST(input_AX_ALGdedo1_last_V_0_data_out),
    .input_AX_ALGpalma1_TID(input_AX_ALGdedo1_id_V_0_data_out),
    .input_AX_ALGpalma1_TDEST(input_AX_ALGdedo1_dest_V_0_data_out),
    .ap_return(dedo1_0_V_read_data_fu_156_ap_return),
    .input_AX_ALGpalma1_TDATA_blk_n(dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n)
);

read_data palma1_0_V_read_data_fu_175(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(palma1_0_V_read_data_fu_175_ap_start),
    .ap_done(palma1_0_V_read_data_fu_175_ap_done),
    .ap_idle(palma1_0_V_read_data_fu_175_ap_idle),
    .ap_ready(palma1_0_V_read_data_fu_175_ap_ready),
    .input_AX_ALGpalma1_TDATA(input_AX_ALGpalma1_data_V_0_data_out),
    .input_AX_ALGpalma1_TVALID(palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TVALID),
    .input_AX_ALGpalma1_TREADY(palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY),
    .input_AX_ALGpalma1_TKEEP(input_AX_ALGpalma1_keep_V_0_data_out),
    .input_AX_ALGpalma1_TSTRB(input_AX_ALGpalma1_strb_V_0_data_out),
    .input_AX_ALGpalma1_TUSER(input_AX_ALGpalma1_user_V_0_data_out),
    .input_AX_ALGpalma1_TLAST(input_AX_ALGpalma1_last_V_0_data_out),
    .input_AX_ALGpalma1_TID(input_AX_ALGpalma1_id_V_0_data_out),
    .input_AX_ALGpalma1_TDEST(input_AX_ALGpalma1_dest_V_0_data_out),
    .ap_return(palma1_0_V_read_data_fu_175_ap_return),
    .input_AX_ALGpalma1_TDATA_blk_n(palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_write_data_fu_96_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)))) begin
            ap_reg_grp_write_data_fu_96_ap_start <= 1'b1;
        end else if ((1'b1 == grp_write_data_fu_96_ap_ready)) begin
            ap_reg_grp_write_data_fu_96_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo0_data_V_0_ack_out) & (1'b1 == input_AX_ALGdedo0_data_V_0_vld_out))) begin
            input_AX_ALGdedo0_data_V_0_sel_rd <= ~input_AX_ALGdedo0_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo0_data_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_data_V_0_ack_in))) begin
            input_AX_ALGdedo0_data_V_0_sel_wr <= ~input_AX_ALGdedo0_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGdedo0_data_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_data_V_0_ack_out) & (input_AX_ALGdedo0_data_V_0_state == 2'd3)) | ((1'b0 == input_AX_ALGdedo0_data_V_0_vld_in) & (input_AX_ALGdedo0_data_V_0_state == 2'd2)))) begin
            input_AX_ALGdedo0_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGdedo0_data_V_0_vld_in) & (1'b0 == input_AX_ALGdedo0_data_V_0_ack_out) & (input_AX_ALGdedo0_data_V_0_state == 2'd3)) | ((1'b0 == input_AX_ALGdedo0_data_V_0_ack_out) & (input_AX_ALGdedo0_data_V_0_state == 2'd1)))) begin
            input_AX_ALGdedo0_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGdedo0_data_V_0_vld_in) & (input_AX_ALGdedo0_data_V_0_state == 2'd2)) | ((1'b1 == input_AX_ALGdedo0_data_V_0_ack_out) & (input_AX_ALGdedo0_data_V_0_state == 2'd1)) | ((input_AX_ALGdedo0_data_V_0_state == 2'd3) & ~((1'b1 == input_AX_ALGdedo0_data_V_0_vld_in) & (1'b0 == input_AX_ALGdedo0_data_V_0_ack_out)) & ~((1'b0 == input_AX_ALGdedo0_data_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_data_V_0_ack_out))))) begin
            input_AX_ALGdedo0_data_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGdedo0_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo0_dest_V_0_ack_out) & (1'b1 == input_AX_ALGdedo0_dest_V_0_vld_out))) begin
            input_AX_ALGdedo0_dest_V_0_sel_rd <= ~input_AX_ALGdedo0_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo0_dest_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_dest_V_0_ack_in))) begin
            input_AX_ALGdedo0_dest_V_0_sel_wr <= ~input_AX_ALGdedo0_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_dest_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGdedo0_dest_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_dest_V_0_ack_out) & (2'd3 == input_AX_ALGdedo0_dest_V_0_state)) | ((1'b0 == input_AX_ALGdedo0_dest_V_0_vld_in) & (2'd2 == input_AX_ALGdedo0_dest_V_0_state)))) begin
            input_AX_ALGdedo0_dest_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGdedo0_dest_V_0_vld_in) & (1'b0 == input_AX_ALGdedo0_dest_V_0_ack_out) & (2'd3 == input_AX_ALGdedo0_dest_V_0_state)) | ((1'b0 == input_AX_ALGdedo0_dest_V_0_ack_out) & (2'd1 == input_AX_ALGdedo0_dest_V_0_state)))) begin
            input_AX_ALGdedo0_dest_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGdedo0_dest_V_0_vld_in) & (2'd2 == input_AX_ALGdedo0_dest_V_0_state)) | ((1'b1 == input_AX_ALGdedo0_dest_V_0_ack_out) & (2'd1 == input_AX_ALGdedo0_dest_V_0_state)) | ((2'd3 == input_AX_ALGdedo0_dest_V_0_state) & ~((1'b1 == input_AX_ALGdedo0_dest_V_0_vld_in) & (1'b0 == input_AX_ALGdedo0_dest_V_0_ack_out)) & ~((1'b0 == input_AX_ALGdedo0_dest_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_dest_V_0_ack_out))))) begin
            input_AX_ALGdedo0_dest_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGdedo0_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo0_id_V_0_ack_out) & (1'b1 == input_AX_ALGdedo0_id_V_0_vld_out))) begin
            input_AX_ALGdedo0_id_V_0_sel_rd <= ~input_AX_ALGdedo0_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo0_id_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_id_V_0_ack_in))) begin
            input_AX_ALGdedo0_id_V_0_sel_wr <= ~input_AX_ALGdedo0_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_id_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGdedo0_id_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_id_V_0_ack_out) & (2'd3 == input_AX_ALGdedo0_id_V_0_state)) | ((1'b0 == input_AX_ALGdedo0_id_V_0_vld_in) & (2'd2 == input_AX_ALGdedo0_id_V_0_state)))) begin
            input_AX_ALGdedo0_id_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGdedo0_id_V_0_vld_in) & (1'b0 == input_AX_ALGdedo0_id_V_0_ack_out) & (2'd3 == input_AX_ALGdedo0_id_V_0_state)) | ((1'b0 == input_AX_ALGdedo0_id_V_0_ack_out) & (2'd1 == input_AX_ALGdedo0_id_V_0_state)))) begin
            input_AX_ALGdedo0_id_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGdedo0_id_V_0_vld_in) & (2'd2 == input_AX_ALGdedo0_id_V_0_state)) | ((1'b1 == input_AX_ALGdedo0_id_V_0_ack_out) & (2'd1 == input_AX_ALGdedo0_id_V_0_state)) | ((2'd3 == input_AX_ALGdedo0_id_V_0_state) & ~((1'b1 == input_AX_ALGdedo0_id_V_0_vld_in) & (1'b0 == input_AX_ALGdedo0_id_V_0_ack_out)) & ~((1'b0 == input_AX_ALGdedo0_id_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_id_V_0_ack_out))))) begin
            input_AX_ALGdedo0_id_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGdedo0_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo0_keep_V_0_ack_out) & (1'b1 == input_AX_ALGdedo0_keep_V_0_vld_out))) begin
            input_AX_ALGdedo0_keep_V_0_sel_rd <= ~input_AX_ALGdedo0_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo0_keep_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_keep_V_0_ack_in))) begin
            input_AX_ALGdedo0_keep_V_0_sel_wr <= ~input_AX_ALGdedo0_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_keep_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGdedo0_keep_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_keep_V_0_ack_out) & (2'd3 == input_AX_ALGdedo0_keep_V_0_state)) | ((1'b0 == input_AX_ALGdedo0_keep_V_0_vld_in) & (2'd2 == input_AX_ALGdedo0_keep_V_0_state)))) begin
            input_AX_ALGdedo0_keep_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGdedo0_keep_V_0_vld_in) & (1'b0 == input_AX_ALGdedo0_keep_V_0_ack_out) & (2'd3 == input_AX_ALGdedo0_keep_V_0_state)) | ((1'b0 == input_AX_ALGdedo0_keep_V_0_ack_out) & (2'd1 == input_AX_ALGdedo0_keep_V_0_state)))) begin
            input_AX_ALGdedo0_keep_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGdedo0_keep_V_0_vld_in) & (2'd2 == input_AX_ALGdedo0_keep_V_0_state)) | ((1'b1 == input_AX_ALGdedo0_keep_V_0_ack_out) & (2'd1 == input_AX_ALGdedo0_keep_V_0_state)) | ((2'd3 == input_AX_ALGdedo0_keep_V_0_state) & ~((1'b1 == input_AX_ALGdedo0_keep_V_0_vld_in) & (1'b0 == input_AX_ALGdedo0_keep_V_0_ack_out)) & ~((1'b0 == input_AX_ALGdedo0_keep_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_keep_V_0_ack_out))))) begin
            input_AX_ALGdedo0_keep_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGdedo0_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo0_last_V_0_ack_out) & (1'b1 == input_AX_ALGdedo0_last_V_0_vld_out))) begin
            input_AX_ALGdedo0_last_V_0_sel_rd <= ~input_AX_ALGdedo0_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo0_last_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_last_V_0_ack_in))) begin
            input_AX_ALGdedo0_last_V_0_sel_wr <= ~input_AX_ALGdedo0_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGdedo0_last_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_last_V_0_ack_out) & (2'd3 == input_AX_ALGdedo0_last_V_0_state)) | ((1'b0 == input_AX_ALGdedo0_last_V_0_vld_in) & (2'd2 == input_AX_ALGdedo0_last_V_0_state)))) begin
            input_AX_ALGdedo0_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGdedo0_last_V_0_vld_in) & (1'b0 == input_AX_ALGdedo0_last_V_0_ack_out) & (2'd3 == input_AX_ALGdedo0_last_V_0_state)) | ((1'b0 == input_AX_ALGdedo0_last_V_0_ack_out) & (2'd1 == input_AX_ALGdedo0_last_V_0_state)))) begin
            input_AX_ALGdedo0_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGdedo0_last_V_0_vld_in) & (2'd2 == input_AX_ALGdedo0_last_V_0_state)) | ((1'b1 == input_AX_ALGdedo0_last_V_0_ack_out) & (2'd1 == input_AX_ALGdedo0_last_V_0_state)) | ((2'd3 == input_AX_ALGdedo0_last_V_0_state) & ~((1'b1 == input_AX_ALGdedo0_last_V_0_vld_in) & (1'b0 == input_AX_ALGdedo0_last_V_0_ack_out)) & ~((1'b0 == input_AX_ALGdedo0_last_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_last_V_0_ack_out))))) begin
            input_AX_ALGdedo0_last_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGdedo0_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo0_strb_V_0_ack_out) & (1'b1 == input_AX_ALGdedo0_strb_V_0_vld_out))) begin
            input_AX_ALGdedo0_strb_V_0_sel_rd <= ~input_AX_ALGdedo0_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo0_strb_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_strb_V_0_ack_in))) begin
            input_AX_ALGdedo0_strb_V_0_sel_wr <= ~input_AX_ALGdedo0_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_strb_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGdedo0_strb_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_strb_V_0_ack_out) & (2'd3 == input_AX_ALGdedo0_strb_V_0_state)) | ((1'b0 == input_AX_ALGdedo0_strb_V_0_vld_in) & (2'd2 == input_AX_ALGdedo0_strb_V_0_state)))) begin
            input_AX_ALGdedo0_strb_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGdedo0_strb_V_0_vld_in) & (1'b0 == input_AX_ALGdedo0_strb_V_0_ack_out) & (2'd3 == input_AX_ALGdedo0_strb_V_0_state)) | ((1'b0 == input_AX_ALGdedo0_strb_V_0_ack_out) & (2'd1 == input_AX_ALGdedo0_strb_V_0_state)))) begin
            input_AX_ALGdedo0_strb_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGdedo0_strb_V_0_vld_in) & (2'd2 == input_AX_ALGdedo0_strb_V_0_state)) | ((1'b1 == input_AX_ALGdedo0_strb_V_0_ack_out) & (2'd1 == input_AX_ALGdedo0_strb_V_0_state)) | ((2'd3 == input_AX_ALGdedo0_strb_V_0_state) & ~((1'b1 == input_AX_ALGdedo0_strb_V_0_vld_in) & (1'b0 == input_AX_ALGdedo0_strb_V_0_ack_out)) & ~((1'b0 == input_AX_ALGdedo0_strb_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_strb_V_0_ack_out))))) begin
            input_AX_ALGdedo0_strb_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGdedo0_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo0_user_V_0_ack_out) & (1'b1 == input_AX_ALGdedo0_user_V_0_vld_out))) begin
            input_AX_ALGdedo0_user_V_0_sel_rd <= ~input_AX_ALGdedo0_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo0_user_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_user_V_0_ack_in))) begin
            input_AX_ALGdedo0_user_V_0_sel_wr <= ~input_AX_ALGdedo0_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo0_user_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGdedo0_user_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_user_V_0_ack_out) & (2'd3 == input_AX_ALGdedo0_user_V_0_state)) | ((1'b0 == input_AX_ALGdedo0_user_V_0_vld_in) & (2'd2 == input_AX_ALGdedo0_user_V_0_state)))) begin
            input_AX_ALGdedo0_user_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGdedo0_user_V_0_vld_in) & (1'b0 == input_AX_ALGdedo0_user_V_0_ack_out) & (2'd3 == input_AX_ALGdedo0_user_V_0_state)) | ((1'b0 == input_AX_ALGdedo0_user_V_0_ack_out) & (2'd1 == input_AX_ALGdedo0_user_V_0_state)))) begin
            input_AX_ALGdedo0_user_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGdedo0_user_V_0_vld_in) & (2'd2 == input_AX_ALGdedo0_user_V_0_state)) | ((1'b1 == input_AX_ALGdedo0_user_V_0_ack_out) & (2'd1 == input_AX_ALGdedo0_user_V_0_state)) | ((2'd3 == input_AX_ALGdedo0_user_V_0_state) & ~((1'b1 == input_AX_ALGdedo0_user_V_0_vld_in) & (1'b0 == input_AX_ALGdedo0_user_V_0_ack_out)) & ~((1'b0 == input_AX_ALGdedo0_user_V_0_vld_in) & (1'b1 == input_AX_ALGdedo0_user_V_0_ack_out))))) begin
            input_AX_ALGdedo0_user_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGdedo0_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo1_data_V_0_ack_out) & (1'b1 == input_AX_ALGdedo1_data_V_0_vld_out))) begin
            input_AX_ALGdedo1_data_V_0_sel_rd <= ~input_AX_ALGdedo1_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo1_data_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_data_V_0_ack_in))) begin
            input_AX_ALGdedo1_data_V_0_sel_wr <= ~input_AX_ALGdedo1_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGdedo1_data_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_data_V_0_ack_out) & (2'd3 == input_AX_ALGdedo1_data_V_0_state)) | ((1'b0 == input_AX_ALGdedo1_data_V_0_vld_in) & (2'd2 == input_AX_ALGdedo1_data_V_0_state)))) begin
            input_AX_ALGdedo1_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGdedo1_data_V_0_vld_in) & (1'b0 == input_AX_ALGdedo1_data_V_0_ack_out) & (2'd3 == input_AX_ALGdedo1_data_V_0_state)) | ((1'b0 == input_AX_ALGdedo1_data_V_0_ack_out) & (2'd1 == input_AX_ALGdedo1_data_V_0_state)))) begin
            input_AX_ALGdedo1_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGdedo1_data_V_0_vld_in) & (2'd2 == input_AX_ALGdedo1_data_V_0_state)) | ((1'b1 == input_AX_ALGdedo1_data_V_0_ack_out) & (2'd1 == input_AX_ALGdedo1_data_V_0_state)) | ((2'd3 == input_AX_ALGdedo1_data_V_0_state) & ~((1'b1 == input_AX_ALGdedo1_data_V_0_vld_in) & (1'b0 == input_AX_ALGdedo1_data_V_0_ack_out)) & ~((1'b0 == input_AX_ALGdedo1_data_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_data_V_0_ack_out))))) begin
            input_AX_ALGdedo1_data_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGdedo1_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo1_dest_V_0_ack_out) & (1'b1 == input_AX_ALGdedo1_dest_V_0_vld_out))) begin
            input_AX_ALGdedo1_dest_V_0_sel_rd <= ~input_AX_ALGdedo1_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo1_dest_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_dest_V_0_ack_in))) begin
            input_AX_ALGdedo1_dest_V_0_sel_wr <= ~input_AX_ALGdedo1_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_dest_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGdedo1_dest_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_dest_V_0_ack_out) & (2'd3 == input_AX_ALGdedo1_dest_V_0_state)) | ((1'b0 == input_AX_ALGdedo1_dest_V_0_vld_in) & (2'd2 == input_AX_ALGdedo1_dest_V_0_state)))) begin
            input_AX_ALGdedo1_dest_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGdedo1_dest_V_0_vld_in) & (1'b0 == input_AX_ALGdedo1_dest_V_0_ack_out) & (2'd3 == input_AX_ALGdedo1_dest_V_0_state)) | ((1'b0 == input_AX_ALGdedo1_dest_V_0_ack_out) & (2'd1 == input_AX_ALGdedo1_dest_V_0_state)))) begin
            input_AX_ALGdedo1_dest_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGdedo1_dest_V_0_vld_in) & (2'd2 == input_AX_ALGdedo1_dest_V_0_state)) | ((1'b1 == input_AX_ALGdedo1_dest_V_0_ack_out) & (2'd1 == input_AX_ALGdedo1_dest_V_0_state)) | ((2'd3 == input_AX_ALGdedo1_dest_V_0_state) & ~((1'b1 == input_AX_ALGdedo1_dest_V_0_vld_in) & (1'b0 == input_AX_ALGdedo1_dest_V_0_ack_out)) & ~((1'b0 == input_AX_ALGdedo1_dest_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_dest_V_0_ack_out))))) begin
            input_AX_ALGdedo1_dest_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGdedo1_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo1_id_V_0_ack_out) & (1'b1 == input_AX_ALGdedo1_id_V_0_vld_out))) begin
            input_AX_ALGdedo1_id_V_0_sel_rd <= ~input_AX_ALGdedo1_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo1_id_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_id_V_0_ack_in))) begin
            input_AX_ALGdedo1_id_V_0_sel_wr <= ~input_AX_ALGdedo1_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_id_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGdedo1_id_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_id_V_0_ack_out) & (2'd3 == input_AX_ALGdedo1_id_V_0_state)) | ((1'b0 == input_AX_ALGdedo1_id_V_0_vld_in) & (2'd2 == input_AX_ALGdedo1_id_V_0_state)))) begin
            input_AX_ALGdedo1_id_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGdedo1_id_V_0_vld_in) & (1'b0 == input_AX_ALGdedo1_id_V_0_ack_out) & (2'd3 == input_AX_ALGdedo1_id_V_0_state)) | ((1'b0 == input_AX_ALGdedo1_id_V_0_ack_out) & (2'd1 == input_AX_ALGdedo1_id_V_0_state)))) begin
            input_AX_ALGdedo1_id_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGdedo1_id_V_0_vld_in) & (2'd2 == input_AX_ALGdedo1_id_V_0_state)) | ((1'b1 == input_AX_ALGdedo1_id_V_0_ack_out) & (2'd1 == input_AX_ALGdedo1_id_V_0_state)) | ((2'd3 == input_AX_ALGdedo1_id_V_0_state) & ~((1'b1 == input_AX_ALGdedo1_id_V_0_vld_in) & (1'b0 == input_AX_ALGdedo1_id_V_0_ack_out)) & ~((1'b0 == input_AX_ALGdedo1_id_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_id_V_0_ack_out))))) begin
            input_AX_ALGdedo1_id_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGdedo1_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo1_keep_V_0_ack_out) & (1'b1 == input_AX_ALGdedo1_keep_V_0_vld_out))) begin
            input_AX_ALGdedo1_keep_V_0_sel_rd <= ~input_AX_ALGdedo1_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo1_keep_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_keep_V_0_ack_in))) begin
            input_AX_ALGdedo1_keep_V_0_sel_wr <= ~input_AX_ALGdedo1_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_keep_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGdedo1_keep_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_keep_V_0_ack_out) & (2'd3 == input_AX_ALGdedo1_keep_V_0_state)) | ((1'b0 == input_AX_ALGdedo1_keep_V_0_vld_in) & (2'd2 == input_AX_ALGdedo1_keep_V_0_state)))) begin
            input_AX_ALGdedo1_keep_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGdedo1_keep_V_0_vld_in) & (1'b0 == input_AX_ALGdedo1_keep_V_0_ack_out) & (2'd3 == input_AX_ALGdedo1_keep_V_0_state)) | ((1'b0 == input_AX_ALGdedo1_keep_V_0_ack_out) & (2'd1 == input_AX_ALGdedo1_keep_V_0_state)))) begin
            input_AX_ALGdedo1_keep_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGdedo1_keep_V_0_vld_in) & (2'd2 == input_AX_ALGdedo1_keep_V_0_state)) | ((1'b1 == input_AX_ALGdedo1_keep_V_0_ack_out) & (2'd1 == input_AX_ALGdedo1_keep_V_0_state)) | ((2'd3 == input_AX_ALGdedo1_keep_V_0_state) & ~((1'b1 == input_AX_ALGdedo1_keep_V_0_vld_in) & (1'b0 == input_AX_ALGdedo1_keep_V_0_ack_out)) & ~((1'b0 == input_AX_ALGdedo1_keep_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_keep_V_0_ack_out))))) begin
            input_AX_ALGdedo1_keep_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGdedo1_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo1_last_V_0_ack_out) & (1'b1 == input_AX_ALGdedo1_last_V_0_vld_out))) begin
            input_AX_ALGdedo1_last_V_0_sel_rd <= ~input_AX_ALGdedo1_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo1_last_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_last_V_0_ack_in))) begin
            input_AX_ALGdedo1_last_V_0_sel_wr <= ~input_AX_ALGdedo1_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGdedo1_last_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_last_V_0_ack_out) & (2'd3 == input_AX_ALGdedo1_last_V_0_state)) | ((1'b0 == input_AX_ALGdedo1_last_V_0_vld_in) & (2'd2 == input_AX_ALGdedo1_last_V_0_state)))) begin
            input_AX_ALGdedo1_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGdedo1_last_V_0_vld_in) & (1'b0 == input_AX_ALGdedo1_last_V_0_ack_out) & (2'd3 == input_AX_ALGdedo1_last_V_0_state)) | ((1'b0 == input_AX_ALGdedo1_last_V_0_ack_out) & (2'd1 == input_AX_ALGdedo1_last_V_0_state)))) begin
            input_AX_ALGdedo1_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGdedo1_last_V_0_vld_in) & (2'd2 == input_AX_ALGdedo1_last_V_0_state)) | ((1'b1 == input_AX_ALGdedo1_last_V_0_ack_out) & (2'd1 == input_AX_ALGdedo1_last_V_0_state)) | ((2'd3 == input_AX_ALGdedo1_last_V_0_state) & ~((1'b1 == input_AX_ALGdedo1_last_V_0_vld_in) & (1'b0 == input_AX_ALGdedo1_last_V_0_ack_out)) & ~((1'b0 == input_AX_ALGdedo1_last_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_last_V_0_ack_out))))) begin
            input_AX_ALGdedo1_last_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGdedo1_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo1_strb_V_0_ack_out) & (1'b1 == input_AX_ALGdedo1_strb_V_0_vld_out))) begin
            input_AX_ALGdedo1_strb_V_0_sel_rd <= ~input_AX_ALGdedo1_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo1_strb_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_strb_V_0_ack_in))) begin
            input_AX_ALGdedo1_strb_V_0_sel_wr <= ~input_AX_ALGdedo1_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_strb_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGdedo1_strb_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_strb_V_0_ack_out) & (2'd3 == input_AX_ALGdedo1_strb_V_0_state)) | ((1'b0 == input_AX_ALGdedo1_strb_V_0_vld_in) & (2'd2 == input_AX_ALGdedo1_strb_V_0_state)))) begin
            input_AX_ALGdedo1_strb_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGdedo1_strb_V_0_vld_in) & (1'b0 == input_AX_ALGdedo1_strb_V_0_ack_out) & (2'd3 == input_AX_ALGdedo1_strb_V_0_state)) | ((1'b0 == input_AX_ALGdedo1_strb_V_0_ack_out) & (2'd1 == input_AX_ALGdedo1_strb_V_0_state)))) begin
            input_AX_ALGdedo1_strb_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGdedo1_strb_V_0_vld_in) & (2'd2 == input_AX_ALGdedo1_strb_V_0_state)) | ((1'b1 == input_AX_ALGdedo1_strb_V_0_ack_out) & (2'd1 == input_AX_ALGdedo1_strb_V_0_state)) | ((2'd3 == input_AX_ALGdedo1_strb_V_0_state) & ~((1'b1 == input_AX_ALGdedo1_strb_V_0_vld_in) & (1'b0 == input_AX_ALGdedo1_strb_V_0_ack_out)) & ~((1'b0 == input_AX_ALGdedo1_strb_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_strb_V_0_ack_out))))) begin
            input_AX_ALGdedo1_strb_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGdedo1_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo1_user_V_0_ack_out) & (1'b1 == input_AX_ALGdedo1_user_V_0_vld_out))) begin
            input_AX_ALGdedo1_user_V_0_sel_rd <= ~input_AX_ALGdedo1_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGdedo1_user_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_user_V_0_ack_in))) begin
            input_AX_ALGdedo1_user_V_0_sel_wr <= ~input_AX_ALGdedo1_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGdedo1_user_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGdedo1_user_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_user_V_0_ack_out) & (2'd3 == input_AX_ALGdedo1_user_V_0_state)) | ((1'b0 == input_AX_ALGdedo1_user_V_0_vld_in) & (2'd2 == input_AX_ALGdedo1_user_V_0_state)))) begin
            input_AX_ALGdedo1_user_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGdedo1_user_V_0_vld_in) & (1'b0 == input_AX_ALGdedo1_user_V_0_ack_out) & (2'd3 == input_AX_ALGdedo1_user_V_0_state)) | ((1'b0 == input_AX_ALGdedo1_user_V_0_ack_out) & (2'd1 == input_AX_ALGdedo1_user_V_0_state)))) begin
            input_AX_ALGdedo1_user_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGdedo1_user_V_0_vld_in) & (2'd2 == input_AX_ALGdedo1_user_V_0_state)) | ((1'b1 == input_AX_ALGdedo1_user_V_0_ack_out) & (2'd1 == input_AX_ALGdedo1_user_V_0_state)) | ((2'd3 == input_AX_ALGdedo1_user_V_0_state) & ~((1'b1 == input_AX_ALGdedo1_user_V_0_vld_in) & (1'b0 == input_AX_ALGdedo1_user_V_0_ack_out)) & ~((1'b0 == input_AX_ALGdedo1_user_V_0_vld_in) & (1'b1 == input_AX_ALGdedo1_user_V_0_ack_out))))) begin
            input_AX_ALGdedo1_user_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGdedo1_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma0_data_V_0_ack_out) & (1'b1 == input_AX_ALGpalma0_data_V_0_vld_out))) begin
            input_AX_ALGpalma0_data_V_0_sel_rd <= ~input_AX_ALGpalma0_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma0_data_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_data_V_0_ack_in))) begin
            input_AX_ALGpalma0_data_V_0_sel_wr <= ~input_AX_ALGpalma0_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGpalma0_data_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_data_V_0_ack_out) & (2'd3 == input_AX_ALGpalma0_data_V_0_state)) | ((1'b0 == input_AX_ALGpalma0_data_V_0_vld_in) & (2'd2 == input_AX_ALGpalma0_data_V_0_state)))) begin
            input_AX_ALGpalma0_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGpalma0_data_V_0_vld_in) & (1'b0 == input_AX_ALGpalma0_data_V_0_ack_out) & (2'd3 == input_AX_ALGpalma0_data_V_0_state)) | ((1'b0 == input_AX_ALGpalma0_data_V_0_ack_out) & (2'd1 == input_AX_ALGpalma0_data_V_0_state)))) begin
            input_AX_ALGpalma0_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGpalma0_data_V_0_vld_in) & (2'd2 == input_AX_ALGpalma0_data_V_0_state)) | ((1'b1 == input_AX_ALGpalma0_data_V_0_ack_out) & (2'd1 == input_AX_ALGpalma0_data_V_0_state)) | ((2'd3 == input_AX_ALGpalma0_data_V_0_state) & ~((1'b1 == input_AX_ALGpalma0_data_V_0_vld_in) & (1'b0 == input_AX_ALGpalma0_data_V_0_ack_out)) & ~((1'b0 == input_AX_ALGpalma0_data_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_data_V_0_ack_out))))) begin
            input_AX_ALGpalma0_data_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGpalma0_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma0_dest_V_0_ack_out) & (1'b1 == input_AX_ALGpalma0_dest_V_0_vld_out))) begin
            input_AX_ALGpalma0_dest_V_0_sel_rd <= ~input_AX_ALGpalma0_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma0_dest_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_dest_V_0_ack_in))) begin
            input_AX_ALGpalma0_dest_V_0_sel_wr <= ~input_AX_ALGpalma0_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_dest_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGpalma0_dest_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_dest_V_0_ack_out) & (2'd3 == input_AX_ALGpalma0_dest_V_0_state)) | ((1'b0 == input_AX_ALGpalma0_dest_V_0_vld_in) & (2'd2 == input_AX_ALGpalma0_dest_V_0_state)))) begin
            input_AX_ALGpalma0_dest_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGpalma0_dest_V_0_vld_in) & (1'b0 == input_AX_ALGpalma0_dest_V_0_ack_out) & (2'd3 == input_AX_ALGpalma0_dest_V_0_state)) | ((1'b0 == input_AX_ALGpalma0_dest_V_0_ack_out) & (2'd1 == input_AX_ALGpalma0_dest_V_0_state)))) begin
            input_AX_ALGpalma0_dest_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGpalma0_dest_V_0_vld_in) & (2'd2 == input_AX_ALGpalma0_dest_V_0_state)) | ((1'b1 == input_AX_ALGpalma0_dest_V_0_ack_out) & (2'd1 == input_AX_ALGpalma0_dest_V_0_state)) | ((2'd3 == input_AX_ALGpalma0_dest_V_0_state) & ~((1'b1 == input_AX_ALGpalma0_dest_V_0_vld_in) & (1'b0 == input_AX_ALGpalma0_dest_V_0_ack_out)) & ~((1'b0 == input_AX_ALGpalma0_dest_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_dest_V_0_ack_out))))) begin
            input_AX_ALGpalma0_dest_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGpalma0_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma0_id_V_0_ack_out) & (1'b1 == input_AX_ALGpalma0_id_V_0_vld_out))) begin
            input_AX_ALGpalma0_id_V_0_sel_rd <= ~input_AX_ALGpalma0_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma0_id_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_id_V_0_ack_in))) begin
            input_AX_ALGpalma0_id_V_0_sel_wr <= ~input_AX_ALGpalma0_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_id_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGpalma0_id_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_id_V_0_ack_out) & (2'd3 == input_AX_ALGpalma0_id_V_0_state)) | ((1'b0 == input_AX_ALGpalma0_id_V_0_vld_in) & (2'd2 == input_AX_ALGpalma0_id_V_0_state)))) begin
            input_AX_ALGpalma0_id_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGpalma0_id_V_0_vld_in) & (1'b0 == input_AX_ALGpalma0_id_V_0_ack_out) & (2'd3 == input_AX_ALGpalma0_id_V_0_state)) | ((1'b0 == input_AX_ALGpalma0_id_V_0_ack_out) & (2'd1 == input_AX_ALGpalma0_id_V_0_state)))) begin
            input_AX_ALGpalma0_id_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGpalma0_id_V_0_vld_in) & (2'd2 == input_AX_ALGpalma0_id_V_0_state)) | ((1'b1 == input_AX_ALGpalma0_id_V_0_ack_out) & (2'd1 == input_AX_ALGpalma0_id_V_0_state)) | ((2'd3 == input_AX_ALGpalma0_id_V_0_state) & ~((1'b1 == input_AX_ALGpalma0_id_V_0_vld_in) & (1'b0 == input_AX_ALGpalma0_id_V_0_ack_out)) & ~((1'b0 == input_AX_ALGpalma0_id_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_id_V_0_ack_out))))) begin
            input_AX_ALGpalma0_id_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGpalma0_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma0_keep_V_0_ack_out) & (1'b1 == input_AX_ALGpalma0_keep_V_0_vld_out))) begin
            input_AX_ALGpalma0_keep_V_0_sel_rd <= ~input_AX_ALGpalma0_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma0_keep_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_keep_V_0_ack_in))) begin
            input_AX_ALGpalma0_keep_V_0_sel_wr <= ~input_AX_ALGpalma0_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_keep_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGpalma0_keep_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_keep_V_0_ack_out) & (2'd3 == input_AX_ALGpalma0_keep_V_0_state)) | ((1'b0 == input_AX_ALGpalma0_keep_V_0_vld_in) & (2'd2 == input_AX_ALGpalma0_keep_V_0_state)))) begin
            input_AX_ALGpalma0_keep_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGpalma0_keep_V_0_vld_in) & (1'b0 == input_AX_ALGpalma0_keep_V_0_ack_out) & (2'd3 == input_AX_ALGpalma0_keep_V_0_state)) | ((1'b0 == input_AX_ALGpalma0_keep_V_0_ack_out) & (2'd1 == input_AX_ALGpalma0_keep_V_0_state)))) begin
            input_AX_ALGpalma0_keep_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGpalma0_keep_V_0_vld_in) & (2'd2 == input_AX_ALGpalma0_keep_V_0_state)) | ((1'b1 == input_AX_ALGpalma0_keep_V_0_ack_out) & (2'd1 == input_AX_ALGpalma0_keep_V_0_state)) | ((2'd3 == input_AX_ALGpalma0_keep_V_0_state) & ~((1'b1 == input_AX_ALGpalma0_keep_V_0_vld_in) & (1'b0 == input_AX_ALGpalma0_keep_V_0_ack_out)) & ~((1'b0 == input_AX_ALGpalma0_keep_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_keep_V_0_ack_out))))) begin
            input_AX_ALGpalma0_keep_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGpalma0_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma0_last_V_0_ack_out) & (1'b1 == input_AX_ALGpalma0_last_V_0_vld_out))) begin
            input_AX_ALGpalma0_last_V_0_sel_rd <= ~input_AX_ALGpalma0_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma0_last_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_last_V_0_ack_in))) begin
            input_AX_ALGpalma0_last_V_0_sel_wr <= ~input_AX_ALGpalma0_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGpalma0_last_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_last_V_0_ack_out) & (2'd3 == input_AX_ALGpalma0_last_V_0_state)) | ((1'b0 == input_AX_ALGpalma0_last_V_0_vld_in) & (2'd2 == input_AX_ALGpalma0_last_V_0_state)))) begin
            input_AX_ALGpalma0_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGpalma0_last_V_0_vld_in) & (1'b0 == input_AX_ALGpalma0_last_V_0_ack_out) & (2'd3 == input_AX_ALGpalma0_last_V_0_state)) | ((1'b0 == input_AX_ALGpalma0_last_V_0_ack_out) & (2'd1 == input_AX_ALGpalma0_last_V_0_state)))) begin
            input_AX_ALGpalma0_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGpalma0_last_V_0_vld_in) & (2'd2 == input_AX_ALGpalma0_last_V_0_state)) | ((1'b1 == input_AX_ALGpalma0_last_V_0_ack_out) & (2'd1 == input_AX_ALGpalma0_last_V_0_state)) | ((2'd3 == input_AX_ALGpalma0_last_V_0_state) & ~((1'b1 == input_AX_ALGpalma0_last_V_0_vld_in) & (1'b0 == input_AX_ALGpalma0_last_V_0_ack_out)) & ~((1'b0 == input_AX_ALGpalma0_last_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_last_V_0_ack_out))))) begin
            input_AX_ALGpalma0_last_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGpalma0_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma0_strb_V_0_ack_out) & (1'b1 == input_AX_ALGpalma0_strb_V_0_vld_out))) begin
            input_AX_ALGpalma0_strb_V_0_sel_rd <= ~input_AX_ALGpalma0_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma0_strb_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_strb_V_0_ack_in))) begin
            input_AX_ALGpalma0_strb_V_0_sel_wr <= ~input_AX_ALGpalma0_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_strb_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGpalma0_strb_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_strb_V_0_ack_out) & (2'd3 == input_AX_ALGpalma0_strb_V_0_state)) | ((1'b0 == input_AX_ALGpalma0_strb_V_0_vld_in) & (2'd2 == input_AX_ALGpalma0_strb_V_0_state)))) begin
            input_AX_ALGpalma0_strb_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGpalma0_strb_V_0_vld_in) & (1'b0 == input_AX_ALGpalma0_strb_V_0_ack_out) & (2'd3 == input_AX_ALGpalma0_strb_V_0_state)) | ((1'b0 == input_AX_ALGpalma0_strb_V_0_ack_out) & (2'd1 == input_AX_ALGpalma0_strb_V_0_state)))) begin
            input_AX_ALGpalma0_strb_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGpalma0_strb_V_0_vld_in) & (2'd2 == input_AX_ALGpalma0_strb_V_0_state)) | ((1'b1 == input_AX_ALGpalma0_strb_V_0_ack_out) & (2'd1 == input_AX_ALGpalma0_strb_V_0_state)) | ((2'd3 == input_AX_ALGpalma0_strb_V_0_state) & ~((1'b1 == input_AX_ALGpalma0_strb_V_0_vld_in) & (1'b0 == input_AX_ALGpalma0_strb_V_0_ack_out)) & ~((1'b0 == input_AX_ALGpalma0_strb_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_strb_V_0_ack_out))))) begin
            input_AX_ALGpalma0_strb_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGpalma0_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma0_user_V_0_ack_out) & (1'b1 == input_AX_ALGpalma0_user_V_0_vld_out))) begin
            input_AX_ALGpalma0_user_V_0_sel_rd <= ~input_AX_ALGpalma0_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma0_user_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_user_V_0_ack_in))) begin
            input_AX_ALGpalma0_user_V_0_sel_wr <= ~input_AX_ALGpalma0_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma0_user_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGpalma0_user_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_user_V_0_ack_out) & (2'd3 == input_AX_ALGpalma0_user_V_0_state)) | ((1'b0 == input_AX_ALGpalma0_user_V_0_vld_in) & (2'd2 == input_AX_ALGpalma0_user_V_0_state)))) begin
            input_AX_ALGpalma0_user_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGpalma0_user_V_0_vld_in) & (1'b0 == input_AX_ALGpalma0_user_V_0_ack_out) & (2'd3 == input_AX_ALGpalma0_user_V_0_state)) | ((1'b0 == input_AX_ALGpalma0_user_V_0_ack_out) & (2'd1 == input_AX_ALGpalma0_user_V_0_state)))) begin
            input_AX_ALGpalma0_user_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGpalma0_user_V_0_vld_in) & (2'd2 == input_AX_ALGpalma0_user_V_0_state)) | ((1'b1 == input_AX_ALGpalma0_user_V_0_ack_out) & (2'd1 == input_AX_ALGpalma0_user_V_0_state)) | ((2'd3 == input_AX_ALGpalma0_user_V_0_state) & ~((1'b1 == input_AX_ALGpalma0_user_V_0_vld_in) & (1'b0 == input_AX_ALGpalma0_user_V_0_ack_out)) & ~((1'b0 == input_AX_ALGpalma0_user_V_0_vld_in) & (1'b1 == input_AX_ALGpalma0_user_V_0_ack_out))))) begin
            input_AX_ALGpalma0_user_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGpalma0_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma1_data_V_0_ack_out) & (1'b1 == input_AX_ALGpalma1_data_V_0_vld_out))) begin
            input_AX_ALGpalma1_data_V_0_sel_rd <= ~input_AX_ALGpalma1_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma1_data_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_data_V_0_ack_in))) begin
            input_AX_ALGpalma1_data_V_0_sel_wr <= ~input_AX_ALGpalma1_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGpalma1_data_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_data_V_0_ack_out) & (2'd3 == input_AX_ALGpalma1_data_V_0_state)) | ((1'b0 == input_AX_ALGpalma1_data_V_0_vld_in) & (2'd2 == input_AX_ALGpalma1_data_V_0_state)))) begin
            input_AX_ALGpalma1_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGpalma1_data_V_0_vld_in) & (1'b0 == input_AX_ALGpalma1_data_V_0_ack_out) & (2'd3 == input_AX_ALGpalma1_data_V_0_state)) | ((1'b0 == input_AX_ALGpalma1_data_V_0_ack_out) & (2'd1 == input_AX_ALGpalma1_data_V_0_state)))) begin
            input_AX_ALGpalma1_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGpalma1_data_V_0_vld_in) & (2'd2 == input_AX_ALGpalma1_data_V_0_state)) | ((1'b1 == input_AX_ALGpalma1_data_V_0_ack_out) & (2'd1 == input_AX_ALGpalma1_data_V_0_state)) | ((2'd3 == input_AX_ALGpalma1_data_V_0_state) & ~((1'b1 == input_AX_ALGpalma1_data_V_0_vld_in) & (1'b0 == input_AX_ALGpalma1_data_V_0_ack_out)) & ~((1'b0 == input_AX_ALGpalma1_data_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_data_V_0_ack_out))))) begin
            input_AX_ALGpalma1_data_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGpalma1_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma1_dest_V_0_ack_out) & (1'b1 == input_AX_ALGpalma1_dest_V_0_vld_out))) begin
            input_AX_ALGpalma1_dest_V_0_sel_rd <= ~input_AX_ALGpalma1_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma1_dest_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_dest_V_0_ack_in))) begin
            input_AX_ALGpalma1_dest_V_0_sel_wr <= ~input_AX_ALGpalma1_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_dest_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGpalma1_dest_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_dest_V_0_ack_out) & (2'd3 == input_AX_ALGpalma1_dest_V_0_state)) | ((1'b0 == input_AX_ALGpalma1_dest_V_0_vld_in) & (2'd2 == input_AX_ALGpalma1_dest_V_0_state)))) begin
            input_AX_ALGpalma1_dest_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGpalma1_dest_V_0_vld_in) & (1'b0 == input_AX_ALGpalma1_dest_V_0_ack_out) & (2'd3 == input_AX_ALGpalma1_dest_V_0_state)) | ((1'b0 == input_AX_ALGpalma1_dest_V_0_ack_out) & (2'd1 == input_AX_ALGpalma1_dest_V_0_state)))) begin
            input_AX_ALGpalma1_dest_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGpalma1_dest_V_0_vld_in) & (2'd2 == input_AX_ALGpalma1_dest_V_0_state)) | ((1'b1 == input_AX_ALGpalma1_dest_V_0_ack_out) & (2'd1 == input_AX_ALGpalma1_dest_V_0_state)) | ((2'd3 == input_AX_ALGpalma1_dest_V_0_state) & ~((1'b1 == input_AX_ALGpalma1_dest_V_0_vld_in) & (1'b0 == input_AX_ALGpalma1_dest_V_0_ack_out)) & ~((1'b0 == input_AX_ALGpalma1_dest_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_dest_V_0_ack_out))))) begin
            input_AX_ALGpalma1_dest_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGpalma1_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma1_id_V_0_ack_out) & (1'b1 == input_AX_ALGpalma1_id_V_0_vld_out))) begin
            input_AX_ALGpalma1_id_V_0_sel_rd <= ~input_AX_ALGpalma1_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma1_id_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_id_V_0_ack_in))) begin
            input_AX_ALGpalma1_id_V_0_sel_wr <= ~input_AX_ALGpalma1_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_id_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGpalma1_id_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_id_V_0_ack_out) & (2'd3 == input_AX_ALGpalma1_id_V_0_state)) | ((1'b0 == input_AX_ALGpalma1_id_V_0_vld_in) & (2'd2 == input_AX_ALGpalma1_id_V_0_state)))) begin
            input_AX_ALGpalma1_id_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGpalma1_id_V_0_vld_in) & (1'b0 == input_AX_ALGpalma1_id_V_0_ack_out) & (2'd3 == input_AX_ALGpalma1_id_V_0_state)) | ((1'b0 == input_AX_ALGpalma1_id_V_0_ack_out) & (2'd1 == input_AX_ALGpalma1_id_V_0_state)))) begin
            input_AX_ALGpalma1_id_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGpalma1_id_V_0_vld_in) & (2'd2 == input_AX_ALGpalma1_id_V_0_state)) | ((1'b1 == input_AX_ALGpalma1_id_V_0_ack_out) & (2'd1 == input_AX_ALGpalma1_id_V_0_state)) | ((2'd3 == input_AX_ALGpalma1_id_V_0_state) & ~((1'b1 == input_AX_ALGpalma1_id_V_0_vld_in) & (1'b0 == input_AX_ALGpalma1_id_V_0_ack_out)) & ~((1'b0 == input_AX_ALGpalma1_id_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_id_V_0_ack_out))))) begin
            input_AX_ALGpalma1_id_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGpalma1_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma1_keep_V_0_ack_out) & (1'b1 == input_AX_ALGpalma1_keep_V_0_vld_out))) begin
            input_AX_ALGpalma1_keep_V_0_sel_rd <= ~input_AX_ALGpalma1_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma1_keep_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_keep_V_0_ack_in))) begin
            input_AX_ALGpalma1_keep_V_0_sel_wr <= ~input_AX_ALGpalma1_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_keep_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGpalma1_keep_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_keep_V_0_ack_out) & (2'd3 == input_AX_ALGpalma1_keep_V_0_state)) | ((1'b0 == input_AX_ALGpalma1_keep_V_0_vld_in) & (2'd2 == input_AX_ALGpalma1_keep_V_0_state)))) begin
            input_AX_ALGpalma1_keep_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGpalma1_keep_V_0_vld_in) & (1'b0 == input_AX_ALGpalma1_keep_V_0_ack_out) & (2'd3 == input_AX_ALGpalma1_keep_V_0_state)) | ((1'b0 == input_AX_ALGpalma1_keep_V_0_ack_out) & (2'd1 == input_AX_ALGpalma1_keep_V_0_state)))) begin
            input_AX_ALGpalma1_keep_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGpalma1_keep_V_0_vld_in) & (2'd2 == input_AX_ALGpalma1_keep_V_0_state)) | ((1'b1 == input_AX_ALGpalma1_keep_V_0_ack_out) & (2'd1 == input_AX_ALGpalma1_keep_V_0_state)) | ((2'd3 == input_AX_ALGpalma1_keep_V_0_state) & ~((1'b1 == input_AX_ALGpalma1_keep_V_0_vld_in) & (1'b0 == input_AX_ALGpalma1_keep_V_0_ack_out)) & ~((1'b0 == input_AX_ALGpalma1_keep_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_keep_V_0_ack_out))))) begin
            input_AX_ALGpalma1_keep_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGpalma1_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma1_last_V_0_ack_out) & (1'b1 == input_AX_ALGpalma1_last_V_0_vld_out))) begin
            input_AX_ALGpalma1_last_V_0_sel_rd <= ~input_AX_ALGpalma1_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma1_last_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_last_V_0_ack_in))) begin
            input_AX_ALGpalma1_last_V_0_sel_wr <= ~input_AX_ALGpalma1_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGpalma1_last_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_last_V_0_ack_out) & (2'd3 == input_AX_ALGpalma1_last_V_0_state)) | ((1'b0 == input_AX_ALGpalma1_last_V_0_vld_in) & (2'd2 == input_AX_ALGpalma1_last_V_0_state)))) begin
            input_AX_ALGpalma1_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGpalma1_last_V_0_vld_in) & (1'b0 == input_AX_ALGpalma1_last_V_0_ack_out) & (2'd3 == input_AX_ALGpalma1_last_V_0_state)) | ((1'b0 == input_AX_ALGpalma1_last_V_0_ack_out) & (2'd1 == input_AX_ALGpalma1_last_V_0_state)))) begin
            input_AX_ALGpalma1_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGpalma1_last_V_0_vld_in) & (2'd2 == input_AX_ALGpalma1_last_V_0_state)) | ((1'b1 == input_AX_ALGpalma1_last_V_0_ack_out) & (2'd1 == input_AX_ALGpalma1_last_V_0_state)) | ((2'd3 == input_AX_ALGpalma1_last_V_0_state) & ~((1'b1 == input_AX_ALGpalma1_last_V_0_vld_in) & (1'b0 == input_AX_ALGpalma1_last_V_0_ack_out)) & ~((1'b0 == input_AX_ALGpalma1_last_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_last_V_0_ack_out))))) begin
            input_AX_ALGpalma1_last_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGpalma1_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma1_strb_V_0_ack_out) & (1'b1 == input_AX_ALGpalma1_strb_V_0_vld_out))) begin
            input_AX_ALGpalma1_strb_V_0_sel_rd <= ~input_AX_ALGpalma1_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma1_strb_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_strb_V_0_ack_in))) begin
            input_AX_ALGpalma1_strb_V_0_sel_wr <= ~input_AX_ALGpalma1_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_strb_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGpalma1_strb_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_strb_V_0_ack_out) & (2'd3 == input_AX_ALGpalma1_strb_V_0_state)) | ((1'b0 == input_AX_ALGpalma1_strb_V_0_vld_in) & (2'd2 == input_AX_ALGpalma1_strb_V_0_state)))) begin
            input_AX_ALGpalma1_strb_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGpalma1_strb_V_0_vld_in) & (1'b0 == input_AX_ALGpalma1_strb_V_0_ack_out) & (2'd3 == input_AX_ALGpalma1_strb_V_0_state)) | ((1'b0 == input_AX_ALGpalma1_strb_V_0_ack_out) & (2'd1 == input_AX_ALGpalma1_strb_V_0_state)))) begin
            input_AX_ALGpalma1_strb_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGpalma1_strb_V_0_vld_in) & (2'd2 == input_AX_ALGpalma1_strb_V_0_state)) | ((1'b1 == input_AX_ALGpalma1_strb_V_0_ack_out) & (2'd1 == input_AX_ALGpalma1_strb_V_0_state)) | ((2'd3 == input_AX_ALGpalma1_strb_V_0_state) & ~((1'b1 == input_AX_ALGpalma1_strb_V_0_vld_in) & (1'b0 == input_AX_ALGpalma1_strb_V_0_ack_out)) & ~((1'b0 == input_AX_ALGpalma1_strb_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_strb_V_0_ack_out))))) begin
            input_AX_ALGpalma1_strb_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGpalma1_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma1_user_V_0_ack_out) & (1'b1 == input_AX_ALGpalma1_user_V_0_vld_out))) begin
            input_AX_ALGpalma1_user_V_0_sel_rd <= ~input_AX_ALGpalma1_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == input_AX_ALGpalma1_user_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_user_V_0_ack_in))) begin
            input_AX_ALGpalma1_user_V_0_sel_wr <= ~input_AX_ALGpalma1_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_AX_ALGpalma1_user_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == input_AX_ALGpalma1_user_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_user_V_0_ack_out) & (2'd3 == input_AX_ALGpalma1_user_V_0_state)) | ((1'b0 == input_AX_ALGpalma1_user_V_0_vld_in) & (2'd2 == input_AX_ALGpalma1_user_V_0_state)))) begin
            input_AX_ALGpalma1_user_V_0_state <= 2'd2;
        end else if ((((1'b1 == input_AX_ALGpalma1_user_V_0_vld_in) & (1'b0 == input_AX_ALGpalma1_user_V_0_ack_out) & (2'd3 == input_AX_ALGpalma1_user_V_0_state)) | ((1'b0 == input_AX_ALGpalma1_user_V_0_ack_out) & (2'd1 == input_AX_ALGpalma1_user_V_0_state)))) begin
            input_AX_ALGpalma1_user_V_0_state <= 2'd1;
        end else if ((((1'b1 == input_AX_ALGpalma1_user_V_0_vld_in) & (2'd2 == input_AX_ALGpalma1_user_V_0_state)) | ((1'b1 == input_AX_ALGpalma1_user_V_0_ack_out) & (2'd1 == input_AX_ALGpalma1_user_V_0_state)) | ((2'd3 == input_AX_ALGpalma1_user_V_0_state) & ~((1'b1 == input_AX_ALGpalma1_user_V_0_vld_in) & (1'b0 == input_AX_ALGpalma1_user_V_0_ack_out)) & ~((1'b0 == input_AX_ALGpalma1_user_V_0_vld_in) & (1'b1 == input_AX_ALGpalma1_user_V_0_ack_out))))) begin
            input_AX_ALGpalma1_user_V_0_state <= 2'd3;
        end else begin
            input_AX_ALGpalma1_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_data_V_1_ack_out) & (1'b1 == output_AX_ALG_data_V_1_vld_out))) begin
            output_AX_ALG_data_V_1_sel_rd <= ~output_AX_ALG_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_data_V_1_vld_in) & (1'b1 == output_AX_ALG_data_V_1_ack_in))) begin
            output_AX_ALG_data_V_1_sel_wr <= ~output_AX_ALG_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_AX_ALG_data_V_1_vld_in) & (1'b1 == output_AX_ALG_data_V_1_ack_out) & (2'd3 == output_AX_ALG_data_V_1_state)) | ((1'b0 == output_AX_ALG_data_V_1_vld_in) & (2'd2 == output_AX_ALG_data_V_1_state)))) begin
            output_AX_ALG_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_AX_ALG_data_V_1_vld_in) & (1'b0 == output_AX_ALG_data_V_1_ack_out) & (2'd3 == output_AX_ALG_data_V_1_state)) | ((1'b0 == output_AX_ALG_data_V_1_ack_out) & (2'd1 == output_AX_ALG_data_V_1_state)))) begin
            output_AX_ALG_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_AX_ALG_data_V_1_vld_in) & (2'd2 == output_AX_ALG_data_V_1_state)) | ((1'b1 == output_AX_ALG_data_V_1_ack_out) & (2'd1 == output_AX_ALG_data_V_1_state)) | ((2'd3 == output_AX_ALG_data_V_1_state) & ~((1'b1 == output_AX_ALG_data_V_1_vld_in) & (1'b0 == output_AX_ALG_data_V_1_ack_out)) & ~((1'b0 == output_AX_ALG_data_V_1_vld_in) & (1'b1 == output_AX_ALG_data_V_1_ack_out))))) begin
            output_AX_ALG_data_V_1_state <= 2'd3;
        end else begin
            output_AX_ALG_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_dest_V_1_ack_out) & (1'b1 == output_AX_ALG_dest_V_1_vld_out))) begin
            output_AX_ALG_dest_V_1_sel_rd <= ~output_AX_ALG_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_dest_V_1_vld_in) & (1'b1 == output_AX_ALG_dest_V_1_ack_in))) begin
            output_AX_ALG_dest_V_1_sel_wr <= ~output_AX_ALG_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_dest_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_AX_ALG_dest_V_1_vld_in) & (1'b1 == output_AX_ALG_dest_V_1_ack_out) & (2'd3 == output_AX_ALG_dest_V_1_state)) | ((1'b0 == output_AX_ALG_dest_V_1_vld_in) & (2'd2 == output_AX_ALG_dest_V_1_state)))) begin
            output_AX_ALG_dest_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_AX_ALG_dest_V_1_vld_in) & (1'b0 == output_AX_ALG_dest_V_1_ack_out) & (2'd3 == output_AX_ALG_dest_V_1_state)) | ((1'b0 == output_AX_ALG_dest_V_1_ack_out) & (2'd1 == output_AX_ALG_dest_V_1_state)))) begin
            output_AX_ALG_dest_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_AX_ALG_dest_V_1_vld_in) & (2'd2 == output_AX_ALG_dest_V_1_state)) | ((1'b1 == output_AX_ALG_dest_V_1_ack_out) & (2'd1 == output_AX_ALG_dest_V_1_state)) | ((2'd3 == output_AX_ALG_dest_V_1_state) & ~((1'b1 == output_AX_ALG_dest_V_1_vld_in) & (1'b0 == output_AX_ALG_dest_V_1_ack_out)) & ~((1'b0 == output_AX_ALG_dest_V_1_vld_in) & (1'b1 == output_AX_ALG_dest_V_1_ack_out))))) begin
            output_AX_ALG_dest_V_1_state <= 2'd3;
        end else begin
            output_AX_ALG_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_id_V_1_ack_out) & (1'b1 == output_AX_ALG_id_V_1_vld_out))) begin
            output_AX_ALG_id_V_1_sel_rd <= ~output_AX_ALG_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_id_V_1_vld_in) & (1'b1 == output_AX_ALG_id_V_1_ack_in))) begin
            output_AX_ALG_id_V_1_sel_wr <= ~output_AX_ALG_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_id_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_AX_ALG_id_V_1_vld_in) & (1'b1 == output_AX_ALG_id_V_1_ack_out) & (2'd3 == output_AX_ALG_id_V_1_state)) | ((1'b0 == output_AX_ALG_id_V_1_vld_in) & (2'd2 == output_AX_ALG_id_V_1_state)))) begin
            output_AX_ALG_id_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_AX_ALG_id_V_1_vld_in) & (1'b0 == output_AX_ALG_id_V_1_ack_out) & (2'd3 == output_AX_ALG_id_V_1_state)) | ((1'b0 == output_AX_ALG_id_V_1_ack_out) & (2'd1 == output_AX_ALG_id_V_1_state)))) begin
            output_AX_ALG_id_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_AX_ALG_id_V_1_vld_in) & (2'd2 == output_AX_ALG_id_V_1_state)) | ((1'b1 == output_AX_ALG_id_V_1_ack_out) & (2'd1 == output_AX_ALG_id_V_1_state)) | ((2'd3 == output_AX_ALG_id_V_1_state) & ~((1'b1 == output_AX_ALG_id_V_1_vld_in) & (1'b0 == output_AX_ALG_id_V_1_ack_out)) & ~((1'b0 == output_AX_ALG_id_V_1_vld_in) & (1'b1 == output_AX_ALG_id_V_1_ack_out))))) begin
            output_AX_ALG_id_V_1_state <= 2'd3;
        end else begin
            output_AX_ALG_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_keep_V_1_ack_out) & (1'b1 == output_AX_ALG_keep_V_1_vld_out))) begin
            output_AX_ALG_keep_V_1_sel_rd <= ~output_AX_ALG_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_keep_V_1_vld_in) & (1'b1 == output_AX_ALG_keep_V_1_ack_in))) begin
            output_AX_ALG_keep_V_1_sel_wr <= ~output_AX_ALG_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_AX_ALG_keep_V_1_vld_in) & (1'b1 == output_AX_ALG_keep_V_1_ack_out) & (2'd3 == output_AX_ALG_keep_V_1_state)) | ((1'b0 == output_AX_ALG_keep_V_1_vld_in) & (2'd2 == output_AX_ALG_keep_V_1_state)))) begin
            output_AX_ALG_keep_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_AX_ALG_keep_V_1_vld_in) & (1'b0 == output_AX_ALG_keep_V_1_ack_out) & (2'd3 == output_AX_ALG_keep_V_1_state)) | ((1'b0 == output_AX_ALG_keep_V_1_ack_out) & (2'd1 == output_AX_ALG_keep_V_1_state)))) begin
            output_AX_ALG_keep_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_AX_ALG_keep_V_1_vld_in) & (2'd2 == output_AX_ALG_keep_V_1_state)) | ((1'b1 == output_AX_ALG_keep_V_1_ack_out) & (2'd1 == output_AX_ALG_keep_V_1_state)) | ((2'd3 == output_AX_ALG_keep_V_1_state) & ~((1'b1 == output_AX_ALG_keep_V_1_vld_in) & (1'b0 == output_AX_ALG_keep_V_1_ack_out)) & ~((1'b0 == output_AX_ALG_keep_V_1_vld_in) & (1'b1 == output_AX_ALG_keep_V_1_ack_out))))) begin
            output_AX_ALG_keep_V_1_state <= 2'd3;
        end else begin
            output_AX_ALG_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_last_V_1_ack_out) & (1'b1 == output_AX_ALG_last_V_1_vld_out))) begin
            output_AX_ALG_last_V_1_sel_rd <= ~output_AX_ALG_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_last_V_1_vld_in) & (1'b1 == output_AX_ALG_last_V_1_ack_in))) begin
            output_AX_ALG_last_V_1_sel_wr <= ~output_AX_ALG_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_AX_ALG_last_V_1_vld_in) & (1'b1 == output_AX_ALG_last_V_1_ack_out) & (2'd3 == output_AX_ALG_last_V_1_state)) | ((1'b0 == output_AX_ALG_last_V_1_vld_in) & (2'd2 == output_AX_ALG_last_V_1_state)))) begin
            output_AX_ALG_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_AX_ALG_last_V_1_vld_in) & (1'b0 == output_AX_ALG_last_V_1_ack_out) & (2'd3 == output_AX_ALG_last_V_1_state)) | ((1'b0 == output_AX_ALG_last_V_1_ack_out) & (2'd1 == output_AX_ALG_last_V_1_state)))) begin
            output_AX_ALG_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_AX_ALG_last_V_1_vld_in) & (2'd2 == output_AX_ALG_last_V_1_state)) | ((1'b1 == output_AX_ALG_last_V_1_ack_out) & (2'd1 == output_AX_ALG_last_V_1_state)) | ((2'd3 == output_AX_ALG_last_V_1_state) & ~((1'b1 == output_AX_ALG_last_V_1_vld_in) & (1'b0 == output_AX_ALG_last_V_1_ack_out)) & ~((1'b0 == output_AX_ALG_last_V_1_vld_in) & (1'b1 == output_AX_ALG_last_V_1_ack_out))))) begin
            output_AX_ALG_last_V_1_state <= 2'd3;
        end else begin
            output_AX_ALG_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_strb_V_1_ack_out) & (1'b1 == output_AX_ALG_strb_V_1_vld_out))) begin
            output_AX_ALG_strb_V_1_sel_rd <= ~output_AX_ALG_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_strb_V_1_vld_in) & (1'b1 == output_AX_ALG_strb_V_1_ack_in))) begin
            output_AX_ALG_strb_V_1_sel_wr <= ~output_AX_ALG_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_strb_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_AX_ALG_strb_V_1_vld_in) & (1'b1 == output_AX_ALG_strb_V_1_ack_out) & (2'd3 == output_AX_ALG_strb_V_1_state)) | ((1'b0 == output_AX_ALG_strb_V_1_vld_in) & (2'd2 == output_AX_ALG_strb_V_1_state)))) begin
            output_AX_ALG_strb_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_AX_ALG_strb_V_1_vld_in) & (1'b0 == output_AX_ALG_strb_V_1_ack_out) & (2'd3 == output_AX_ALG_strb_V_1_state)) | ((1'b0 == output_AX_ALG_strb_V_1_ack_out) & (2'd1 == output_AX_ALG_strb_V_1_state)))) begin
            output_AX_ALG_strb_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_AX_ALG_strb_V_1_vld_in) & (2'd2 == output_AX_ALG_strb_V_1_state)) | ((1'b1 == output_AX_ALG_strb_V_1_ack_out) & (2'd1 == output_AX_ALG_strb_V_1_state)) | ((2'd3 == output_AX_ALG_strb_V_1_state) & ~((1'b1 == output_AX_ALG_strb_V_1_vld_in) & (1'b0 == output_AX_ALG_strb_V_1_ack_out)) & ~((1'b0 == output_AX_ALG_strb_V_1_vld_in) & (1'b1 == output_AX_ALG_strb_V_1_ack_out))))) begin
            output_AX_ALG_strb_V_1_state <= 2'd3;
        end else begin
            output_AX_ALG_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_user_V_1_ack_out) & (1'b1 == output_AX_ALG_user_V_1_vld_out))) begin
            output_AX_ALG_user_V_1_sel_rd <= ~output_AX_ALG_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == output_AX_ALG_user_V_1_vld_in) & (1'b1 == output_AX_ALG_user_V_1_ack_in))) begin
            output_AX_ALG_user_V_1_sel_wr <= ~output_AX_ALG_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_AX_ALG_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == output_AX_ALG_user_V_1_vld_in) & (1'b1 == output_AX_ALG_user_V_1_ack_out) & (2'd3 == output_AX_ALG_user_V_1_state)) | ((1'b0 == output_AX_ALG_user_V_1_vld_in) & (2'd2 == output_AX_ALG_user_V_1_state)))) begin
            output_AX_ALG_user_V_1_state <= 2'd2;
        end else if ((((1'b1 == output_AX_ALG_user_V_1_vld_in) & (1'b0 == output_AX_ALG_user_V_1_ack_out) & (2'd3 == output_AX_ALG_user_V_1_state)) | ((1'b0 == output_AX_ALG_user_V_1_ack_out) & (2'd1 == output_AX_ALG_user_V_1_state)))) begin
            output_AX_ALG_user_V_1_state <= 2'd1;
        end else if ((((1'b1 == output_AX_ALG_user_V_1_vld_in) & (2'd2 == output_AX_ALG_user_V_1_state)) | ((1'b1 == output_AX_ALG_user_V_1_ack_out) & (2'd1 == output_AX_ALG_user_V_1_state)) | ((2'd3 == output_AX_ALG_user_V_1_state) & ~((1'b1 == output_AX_ALG_user_V_1_vld_in) & (1'b0 == output_AX_ALG_user_V_1_ack_out)) & ~((1'b0 == output_AX_ALG_user_V_1_vld_in) & (1'b1 == output_AX_ALG_user_V_1_ack_out))))) begin
            output_AX_ALG_user_V_1_state <= 2'd3;
        end else begin
            output_AX_ALG_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)))) begin
        dedo0_0_V_reg_194 <= dedo0_0_V_read_data_fu_118_ap_return;
        dedo1_0_V_reg_204 <= dedo1_0_V_read_data_fu_156_ap_return;
        palma0_0_V_reg_199 <= palma0_0_V_read_data_fu_137_ap_return;
        palma1_0_V_reg_209 <= palma1_0_V_read_data_fu_175_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo0_data_V_0_load_A)) begin
        input_AX_ALGdedo0_data_V_0_payload_A <= input_AX_ALGdedo0_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo0_data_V_0_load_B)) begin
        input_AX_ALGdedo0_data_V_0_payload_B <= input_AX_ALGdedo0_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo0_dest_V_0_load_A)) begin
        input_AX_ALGdedo0_dest_V_0_payload_A <= input_AX_ALGdedo0_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo0_dest_V_0_load_B)) begin
        input_AX_ALGdedo0_dest_V_0_payload_B <= input_AX_ALGdedo0_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo0_id_V_0_load_A)) begin
        input_AX_ALGdedo0_id_V_0_payload_A <= input_AX_ALGdedo0_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo0_id_V_0_load_B)) begin
        input_AX_ALGdedo0_id_V_0_payload_B <= input_AX_ALGdedo0_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo0_keep_V_0_load_A)) begin
        input_AX_ALGdedo0_keep_V_0_payload_A <= input_AX_ALGdedo0_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo0_keep_V_0_load_B)) begin
        input_AX_ALGdedo0_keep_V_0_payload_B <= input_AX_ALGdedo0_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo0_last_V_0_load_A)) begin
        input_AX_ALGdedo0_last_V_0_payload_A <= input_AX_ALGdedo0_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo0_last_V_0_load_B)) begin
        input_AX_ALGdedo0_last_V_0_payload_B <= input_AX_ALGdedo0_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo0_strb_V_0_load_A)) begin
        input_AX_ALGdedo0_strb_V_0_payload_A <= input_AX_ALGdedo0_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo0_strb_V_0_load_B)) begin
        input_AX_ALGdedo0_strb_V_0_payload_B <= input_AX_ALGdedo0_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo0_user_V_0_load_A)) begin
        input_AX_ALGdedo0_user_V_0_payload_A <= input_AX_ALGdedo0_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo0_user_V_0_load_B)) begin
        input_AX_ALGdedo0_user_V_0_payload_B <= input_AX_ALGdedo0_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo1_data_V_0_load_A)) begin
        input_AX_ALGdedo1_data_V_0_payload_A <= input_AX_ALGdedo1_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo1_data_V_0_load_B)) begin
        input_AX_ALGdedo1_data_V_0_payload_B <= input_AX_ALGdedo1_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo1_dest_V_0_load_A)) begin
        input_AX_ALGdedo1_dest_V_0_payload_A <= input_AX_ALGdedo1_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo1_dest_V_0_load_B)) begin
        input_AX_ALGdedo1_dest_V_0_payload_B <= input_AX_ALGdedo1_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo1_id_V_0_load_A)) begin
        input_AX_ALGdedo1_id_V_0_payload_A <= input_AX_ALGdedo1_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo1_id_V_0_load_B)) begin
        input_AX_ALGdedo1_id_V_0_payload_B <= input_AX_ALGdedo1_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo1_keep_V_0_load_A)) begin
        input_AX_ALGdedo1_keep_V_0_payload_A <= input_AX_ALGdedo1_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo1_keep_V_0_load_B)) begin
        input_AX_ALGdedo1_keep_V_0_payload_B <= input_AX_ALGdedo1_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo1_last_V_0_load_A)) begin
        input_AX_ALGdedo1_last_V_0_payload_A <= input_AX_ALGdedo1_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo1_last_V_0_load_B)) begin
        input_AX_ALGdedo1_last_V_0_payload_B <= input_AX_ALGdedo1_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo1_strb_V_0_load_A)) begin
        input_AX_ALGdedo1_strb_V_0_payload_A <= input_AX_ALGdedo1_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo1_strb_V_0_load_B)) begin
        input_AX_ALGdedo1_strb_V_0_payload_B <= input_AX_ALGdedo1_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo1_user_V_0_load_A)) begin
        input_AX_ALGdedo1_user_V_0_payload_A <= input_AX_ALGdedo1_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGdedo1_user_V_0_load_B)) begin
        input_AX_ALGdedo1_user_V_0_payload_B <= input_AX_ALGdedo1_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma0_data_V_0_load_A)) begin
        input_AX_ALGpalma0_data_V_0_payload_A <= input_AX_ALGpalma0_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma0_data_V_0_load_B)) begin
        input_AX_ALGpalma0_data_V_0_payload_B <= input_AX_ALGpalma0_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma0_dest_V_0_load_A)) begin
        input_AX_ALGpalma0_dest_V_0_payload_A <= input_AX_ALGpalma0_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma0_dest_V_0_load_B)) begin
        input_AX_ALGpalma0_dest_V_0_payload_B <= input_AX_ALGpalma0_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma0_id_V_0_load_A)) begin
        input_AX_ALGpalma0_id_V_0_payload_A <= input_AX_ALGpalma0_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma0_id_V_0_load_B)) begin
        input_AX_ALGpalma0_id_V_0_payload_B <= input_AX_ALGpalma0_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma0_keep_V_0_load_A)) begin
        input_AX_ALGpalma0_keep_V_0_payload_A <= input_AX_ALGpalma0_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma0_keep_V_0_load_B)) begin
        input_AX_ALGpalma0_keep_V_0_payload_B <= input_AX_ALGpalma0_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma0_last_V_0_load_A)) begin
        input_AX_ALGpalma0_last_V_0_payload_A <= input_AX_ALGpalma0_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma0_last_V_0_load_B)) begin
        input_AX_ALGpalma0_last_V_0_payload_B <= input_AX_ALGpalma0_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma0_strb_V_0_load_A)) begin
        input_AX_ALGpalma0_strb_V_0_payload_A <= input_AX_ALGpalma0_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma0_strb_V_0_load_B)) begin
        input_AX_ALGpalma0_strb_V_0_payload_B <= input_AX_ALGpalma0_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma0_user_V_0_load_A)) begin
        input_AX_ALGpalma0_user_V_0_payload_A <= input_AX_ALGpalma0_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma0_user_V_0_load_B)) begin
        input_AX_ALGpalma0_user_V_0_payload_B <= input_AX_ALGpalma0_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma1_data_V_0_load_A)) begin
        input_AX_ALGpalma1_data_V_0_payload_A <= input_AX_ALGpalma1_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma1_data_V_0_load_B)) begin
        input_AX_ALGpalma1_data_V_0_payload_B <= input_AX_ALGpalma1_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma1_dest_V_0_load_A)) begin
        input_AX_ALGpalma1_dest_V_0_payload_A <= input_AX_ALGpalma1_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma1_dest_V_0_load_B)) begin
        input_AX_ALGpalma1_dest_V_0_payload_B <= input_AX_ALGpalma1_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma1_id_V_0_load_A)) begin
        input_AX_ALGpalma1_id_V_0_payload_A <= input_AX_ALGpalma1_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma1_id_V_0_load_B)) begin
        input_AX_ALGpalma1_id_V_0_payload_B <= input_AX_ALGpalma1_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma1_keep_V_0_load_A)) begin
        input_AX_ALGpalma1_keep_V_0_payload_A <= input_AX_ALGpalma1_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma1_keep_V_0_load_B)) begin
        input_AX_ALGpalma1_keep_V_0_payload_B <= input_AX_ALGpalma1_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma1_last_V_0_load_A)) begin
        input_AX_ALGpalma1_last_V_0_payload_A <= input_AX_ALGpalma1_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma1_last_V_0_load_B)) begin
        input_AX_ALGpalma1_last_V_0_payload_B <= input_AX_ALGpalma1_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma1_strb_V_0_load_A)) begin
        input_AX_ALGpalma1_strb_V_0_payload_A <= input_AX_ALGpalma1_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma1_strb_V_0_load_B)) begin
        input_AX_ALGpalma1_strb_V_0_payload_B <= input_AX_ALGpalma1_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma1_user_V_0_load_A)) begin
        input_AX_ALGpalma1_user_V_0_payload_A <= input_AX_ALGpalma1_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == input_AX_ALGpalma1_user_V_0_load_B)) begin
        input_AX_ALGpalma1_user_V_0_payload_B <= input_AX_ALGpalma1_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_data_V_1_load_A)) begin
        output_AX_ALG_data_V_1_payload_A <= grp_write_data_fu_96_output_AX_ALG_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_data_V_1_load_B)) begin
        output_AX_ALG_data_V_1_payload_B <= grp_write_data_fu_96_output_AX_ALG_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_dest_V_1_load_A)) begin
        output_AX_ALG_dest_V_1_payload_A <= grp_write_data_fu_96_output_AX_ALG_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_dest_V_1_load_B)) begin
        output_AX_ALG_dest_V_1_payload_B <= grp_write_data_fu_96_output_AX_ALG_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_id_V_1_load_A)) begin
        output_AX_ALG_id_V_1_payload_A <= grp_write_data_fu_96_output_AX_ALG_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_id_V_1_load_B)) begin
        output_AX_ALG_id_V_1_payload_B <= grp_write_data_fu_96_output_AX_ALG_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_keep_V_1_load_A)) begin
        output_AX_ALG_keep_V_1_payload_A <= grp_write_data_fu_96_output_AX_ALG_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_keep_V_1_load_B)) begin
        output_AX_ALG_keep_V_1_payload_B <= grp_write_data_fu_96_output_AX_ALG_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_last_V_1_load_A)) begin
        output_AX_ALG_last_V_1_payload_A <= grp_write_data_fu_96_output_AX_ALG_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_last_V_1_load_B)) begin
        output_AX_ALG_last_V_1_payload_B <= grp_write_data_fu_96_output_AX_ALG_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_strb_V_1_load_A)) begin
        output_AX_ALG_strb_V_1_payload_A <= grp_write_data_fu_96_output_AX_ALG_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_strb_V_1_load_B)) begin
        output_AX_ALG_strb_V_1_payload_B <= grp_write_data_fu_96_output_AX_ALG_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_user_V_1_load_A)) begin
        output_AX_ALG_user_V_1_payload_A <= grp_write_data_fu_96_output_AX_ALG_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == output_AX_ALG_user_V_1_load_B)) begin
        output_AX_ALG_user_V_1_payload_B <= grp_write_data_fu_96_output_AX_ALG_TUSER;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)))) begin
        dedo0_0_V_read_data_fu_118_ap_start = 1'b1;
    end else begin
        dedo0_0_V_read_data_fu_118_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)))) begin
        dedo1_0_V_read_data_fu_156_ap_start = 1'b1;
    end else begin
        dedo1_0_V_read_data_fu_156_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_AX_ALGdedo0_TDATA_blk_n = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n;
    end else begin
        input_AX_ALGdedo0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGdedo0_data_V_0_sel)) begin
        input_AX_ALGdedo0_data_V_0_data_out = input_AX_ALGdedo0_data_V_0_payload_B;
    end else begin
        input_AX_ALGdedo0_data_V_0_data_out = input_AX_ALGdedo0_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGdedo0_dest_V_0_sel)) begin
        input_AX_ALGdedo0_dest_V_0_data_out = input_AX_ALGdedo0_dest_V_0_payload_B;
    end else begin
        input_AX_ALGdedo0_dest_V_0_data_out = input_AX_ALGdedo0_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGdedo0_id_V_0_sel)) begin
        input_AX_ALGdedo0_id_V_0_data_out = input_AX_ALGdedo0_id_V_0_payload_B;
    end else begin
        input_AX_ALGdedo0_id_V_0_data_out = input_AX_ALGdedo0_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGdedo0_keep_V_0_sel)) begin
        input_AX_ALGdedo0_keep_V_0_data_out = input_AX_ALGdedo0_keep_V_0_payload_B;
    end else begin
        input_AX_ALGdedo0_keep_V_0_data_out = input_AX_ALGdedo0_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGdedo0_last_V_0_sel)) begin
        input_AX_ALGdedo0_last_V_0_data_out = input_AX_ALGdedo0_last_V_0_payload_B;
    end else begin
        input_AX_ALGdedo0_last_V_0_data_out = input_AX_ALGdedo0_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGdedo0_strb_V_0_sel)) begin
        input_AX_ALGdedo0_strb_V_0_data_out = input_AX_ALGdedo0_strb_V_0_payload_B;
    end else begin
        input_AX_ALGdedo0_strb_V_0_data_out = input_AX_ALGdedo0_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGdedo0_user_V_0_sel)) begin
        input_AX_ALGdedo0_user_V_0_data_out = input_AX_ALGdedo0_user_V_0_payload_B;
    end else begin
        input_AX_ALGdedo0_user_V_0_data_out = input_AX_ALGdedo0_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_AX_ALGdedo1_TDATA_blk_n = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n;
    end else begin
        input_AX_ALGdedo1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGdedo1_data_V_0_sel)) begin
        input_AX_ALGdedo1_data_V_0_data_out = input_AX_ALGdedo1_data_V_0_payload_B;
    end else begin
        input_AX_ALGdedo1_data_V_0_data_out = input_AX_ALGdedo1_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGdedo1_dest_V_0_sel)) begin
        input_AX_ALGdedo1_dest_V_0_data_out = input_AX_ALGdedo1_dest_V_0_payload_B;
    end else begin
        input_AX_ALGdedo1_dest_V_0_data_out = input_AX_ALGdedo1_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGdedo1_id_V_0_sel)) begin
        input_AX_ALGdedo1_id_V_0_data_out = input_AX_ALGdedo1_id_V_0_payload_B;
    end else begin
        input_AX_ALGdedo1_id_V_0_data_out = input_AX_ALGdedo1_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGdedo1_keep_V_0_sel)) begin
        input_AX_ALGdedo1_keep_V_0_data_out = input_AX_ALGdedo1_keep_V_0_payload_B;
    end else begin
        input_AX_ALGdedo1_keep_V_0_data_out = input_AX_ALGdedo1_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGdedo1_last_V_0_sel)) begin
        input_AX_ALGdedo1_last_V_0_data_out = input_AX_ALGdedo1_last_V_0_payload_B;
    end else begin
        input_AX_ALGdedo1_last_V_0_data_out = input_AX_ALGdedo1_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGdedo1_strb_V_0_sel)) begin
        input_AX_ALGdedo1_strb_V_0_data_out = input_AX_ALGdedo1_strb_V_0_payload_B;
    end else begin
        input_AX_ALGdedo1_strb_V_0_data_out = input_AX_ALGdedo1_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGdedo1_user_V_0_sel)) begin
        input_AX_ALGdedo1_user_V_0_data_out = input_AX_ALGdedo1_user_V_0_payload_B;
    end else begin
        input_AX_ALGdedo1_user_V_0_data_out = input_AX_ALGdedo1_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_AX_ALGpalma0_TDATA_blk_n = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n;
    end else begin
        input_AX_ALGpalma0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGpalma0_data_V_0_sel)) begin
        input_AX_ALGpalma0_data_V_0_data_out = input_AX_ALGpalma0_data_V_0_payload_B;
    end else begin
        input_AX_ALGpalma0_data_V_0_data_out = input_AX_ALGpalma0_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGpalma0_dest_V_0_sel)) begin
        input_AX_ALGpalma0_dest_V_0_data_out = input_AX_ALGpalma0_dest_V_0_payload_B;
    end else begin
        input_AX_ALGpalma0_dest_V_0_data_out = input_AX_ALGpalma0_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGpalma0_id_V_0_sel)) begin
        input_AX_ALGpalma0_id_V_0_data_out = input_AX_ALGpalma0_id_V_0_payload_B;
    end else begin
        input_AX_ALGpalma0_id_V_0_data_out = input_AX_ALGpalma0_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGpalma0_keep_V_0_sel)) begin
        input_AX_ALGpalma0_keep_V_0_data_out = input_AX_ALGpalma0_keep_V_0_payload_B;
    end else begin
        input_AX_ALGpalma0_keep_V_0_data_out = input_AX_ALGpalma0_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGpalma0_last_V_0_sel)) begin
        input_AX_ALGpalma0_last_V_0_data_out = input_AX_ALGpalma0_last_V_0_payload_B;
    end else begin
        input_AX_ALGpalma0_last_V_0_data_out = input_AX_ALGpalma0_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGpalma0_strb_V_0_sel)) begin
        input_AX_ALGpalma0_strb_V_0_data_out = input_AX_ALGpalma0_strb_V_0_payload_B;
    end else begin
        input_AX_ALGpalma0_strb_V_0_data_out = input_AX_ALGpalma0_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGpalma0_user_V_0_sel)) begin
        input_AX_ALGpalma0_user_V_0_data_out = input_AX_ALGpalma0_user_V_0_payload_B;
    end else begin
        input_AX_ALGpalma0_user_V_0_data_out = input_AX_ALGpalma0_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_AX_ALGpalma1_TDATA_blk_n = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n;
    end else begin
        input_AX_ALGpalma1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGpalma1_data_V_0_sel)) begin
        input_AX_ALGpalma1_data_V_0_data_out = input_AX_ALGpalma1_data_V_0_payload_B;
    end else begin
        input_AX_ALGpalma1_data_V_0_data_out = input_AX_ALGpalma1_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGpalma1_dest_V_0_sel)) begin
        input_AX_ALGpalma1_dest_V_0_data_out = input_AX_ALGpalma1_dest_V_0_payload_B;
    end else begin
        input_AX_ALGpalma1_dest_V_0_data_out = input_AX_ALGpalma1_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGpalma1_id_V_0_sel)) begin
        input_AX_ALGpalma1_id_V_0_data_out = input_AX_ALGpalma1_id_V_0_payload_B;
    end else begin
        input_AX_ALGpalma1_id_V_0_data_out = input_AX_ALGpalma1_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGpalma1_keep_V_0_sel)) begin
        input_AX_ALGpalma1_keep_V_0_data_out = input_AX_ALGpalma1_keep_V_0_payload_B;
    end else begin
        input_AX_ALGpalma1_keep_V_0_data_out = input_AX_ALGpalma1_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGpalma1_last_V_0_sel)) begin
        input_AX_ALGpalma1_last_V_0_data_out = input_AX_ALGpalma1_last_V_0_payload_B;
    end else begin
        input_AX_ALGpalma1_last_V_0_data_out = input_AX_ALGpalma1_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGpalma1_strb_V_0_sel)) begin
        input_AX_ALGpalma1_strb_V_0_data_out = input_AX_ALGpalma1_strb_V_0_payload_B;
    end else begin
        input_AX_ALGpalma1_strb_V_0_data_out = input_AX_ALGpalma1_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == input_AX_ALGpalma1_user_V_0_sel)) begin
        input_AX_ALGpalma1_user_V_0_data_out = input_AX_ALGpalma1_user_V_0_payload_B;
    end else begin
        input_AX_ALGpalma1_user_V_0_data_out = input_AX_ALGpalma1_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == output_AX_ALG_data_V_1_sel)) begin
        output_AX_ALG_data_V_1_data_out = output_AX_ALG_data_V_1_payload_B;
    end else begin
        output_AX_ALG_data_V_1_data_out = output_AX_ALG_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == output_AX_ALG_dest_V_1_sel)) begin
        output_AX_ALG_dest_V_1_data_out = output_AX_ALG_dest_V_1_payload_B;
    end else begin
        output_AX_ALG_dest_V_1_data_out = output_AX_ALG_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == output_AX_ALG_id_V_1_sel)) begin
        output_AX_ALG_id_V_1_data_out = output_AX_ALG_id_V_1_payload_B;
    end else begin
        output_AX_ALG_id_V_1_data_out = output_AX_ALG_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == output_AX_ALG_keep_V_1_sel)) begin
        output_AX_ALG_keep_V_1_data_out = output_AX_ALG_keep_V_1_payload_B;
    end else begin
        output_AX_ALG_keep_V_1_data_out = output_AX_ALG_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == output_AX_ALG_last_V_1_sel)) begin
        output_AX_ALG_last_V_1_data_out = output_AX_ALG_last_V_1_payload_B;
    end else begin
        output_AX_ALG_last_V_1_data_out = output_AX_ALG_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == output_AX_ALG_strb_V_1_sel)) begin
        output_AX_ALG_strb_V_1_data_out = output_AX_ALG_strb_V_1_payload_B;
    end else begin
        output_AX_ALG_strb_V_1_data_out = output_AX_ALG_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == output_AX_ALG_user_V_1_sel)) begin
        output_AX_ALG_user_V_1_data_out = output_AX_ALG_user_V_1_payload_B;
    end else begin
        output_AX_ALG_user_V_1_data_out = output_AX_ALG_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)))) begin
        palma0_0_V_read_data_fu_137_ap_start = 1'b1;
    end else begin
        palma0_0_V_read_data_fu_137_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n)))) begin
        palma1_0_V_read_data_fu_175_ap_start = 1'b1;
    end else begin
        palma1_0_V_read_data_fu_175_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_write_data_fu_96_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == output_AX_ALG_data_V_1_ack_in) | (1'b0 == output_AX_ALG_keep_V_1_ack_in) | (1'b0 == output_AX_ALG_strb_V_1_ack_in) | (1'b0 == output_AX_ALG_user_V_1_ack_in) | (1'b0 == output_AX_ALG_last_V_1_ack_in) | (1'b0 == output_AX_ALG_id_V_1_ack_in) | (1'b0 == output_AX_ALG_dest_V_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state2 = ((1'b0 == dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n));
end

always @ (*) begin
    ap_block_state2_ignore_call42 = ((1'b0 == palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n));
end

always @ (*) begin
    ap_block_state2_ignore_call43 = ((1'b0 == dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n));
end

always @ (*) begin
    ap_block_state2_ignore_call44 = ((1'b0 == dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n));
end

always @ (*) begin
    ap_block_state2_ignore_call45 = ((1'b0 == dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n));
end

always @ (*) begin
    ap_block_state2_ignore_call46 = ((1'b0 == dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TDATA_blk_n) | (1'b0 == palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TDATA_blk_n));
end

always @ (*) begin
    ap_block_state4 = ((1'b0 == output_AX_ALG_data_V_1_ack_in) | (1'b0 == output_AX_ALG_keep_V_1_ack_in) | (1'b0 == output_AX_ALG_strb_V_1_ack_in) | (1'b0 == output_AX_ALG_user_V_1_ack_in) | (1'b0 == output_AX_ALG_last_V_1_ack_in) | (1'b0 == output_AX_ALG_id_V_1_ack_in) | (1'b0 == output_AX_ALG_dest_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TVALID = input_AX_ALGdedo0_dest_V_0_state[1'd0];

assign dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TVALID = input_AX_ALGdedo1_dest_V_0_state[1'd0];

assign grp_write_data_fu_96_ap_start = ap_reg_grp_write_data_fu_96_ap_start;

assign grp_write_data_fu_96_output_AX_ALG_TREADY = output_AX_ALG_dest_V_1_state[1'd1];

assign input_AX_ALGdedo0_TREADY = input_AX_ALGdedo0_dest_V_0_state[1'd1];

assign input_AX_ALGdedo0_data_V_0_ack_in = input_AX_ALGdedo0_data_V_0_state[1'd1];

assign input_AX_ALGdedo0_data_V_0_ack_out = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGdedo0_data_V_0_load_A = (input_AX_ALGdedo0_data_V_0_state_cmp_full & ~input_AX_ALGdedo0_data_V_0_sel_wr);

assign input_AX_ALGdedo0_data_V_0_load_B = (input_AX_ALGdedo0_data_V_0_sel_wr & input_AX_ALGdedo0_data_V_0_state_cmp_full);

assign input_AX_ALGdedo0_data_V_0_sel = input_AX_ALGdedo0_data_V_0_sel_rd;

assign input_AX_ALGdedo0_data_V_0_state_cmp_full = ((input_AX_ALGdedo0_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGdedo0_data_V_0_vld_in = input_AX_ALGdedo0_TVALID;

assign input_AX_ALGdedo0_data_V_0_vld_out = input_AX_ALGdedo0_data_V_0_state[1'd0];

assign input_AX_ALGdedo0_dest_V_0_ack_in = input_AX_ALGdedo0_dest_V_0_state[1'd1];

assign input_AX_ALGdedo0_dest_V_0_ack_out = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGdedo0_dest_V_0_load_A = (input_AX_ALGdedo0_dest_V_0_state_cmp_full & ~input_AX_ALGdedo0_dest_V_0_sel_wr);

assign input_AX_ALGdedo0_dest_V_0_load_B = (input_AX_ALGdedo0_dest_V_0_sel_wr & input_AX_ALGdedo0_dest_V_0_state_cmp_full);

assign input_AX_ALGdedo0_dest_V_0_sel = input_AX_ALGdedo0_dest_V_0_sel_rd;

assign input_AX_ALGdedo0_dest_V_0_state_cmp_full = ((input_AX_ALGdedo0_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGdedo0_dest_V_0_vld_in = input_AX_ALGdedo0_TVALID;

assign input_AX_ALGdedo0_dest_V_0_vld_out = input_AX_ALGdedo0_dest_V_0_state[1'd0];

assign input_AX_ALGdedo0_id_V_0_ack_in = input_AX_ALGdedo0_id_V_0_state[1'd1];

assign input_AX_ALGdedo0_id_V_0_ack_out = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGdedo0_id_V_0_load_A = (input_AX_ALGdedo0_id_V_0_state_cmp_full & ~input_AX_ALGdedo0_id_V_0_sel_wr);

assign input_AX_ALGdedo0_id_V_0_load_B = (input_AX_ALGdedo0_id_V_0_sel_wr & input_AX_ALGdedo0_id_V_0_state_cmp_full);

assign input_AX_ALGdedo0_id_V_0_sel = input_AX_ALGdedo0_id_V_0_sel_rd;

assign input_AX_ALGdedo0_id_V_0_state_cmp_full = ((input_AX_ALGdedo0_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGdedo0_id_V_0_vld_in = input_AX_ALGdedo0_TVALID;

assign input_AX_ALGdedo0_id_V_0_vld_out = input_AX_ALGdedo0_id_V_0_state[1'd0];

assign input_AX_ALGdedo0_keep_V_0_ack_in = input_AX_ALGdedo0_keep_V_0_state[1'd1];

assign input_AX_ALGdedo0_keep_V_0_ack_out = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGdedo0_keep_V_0_load_A = (input_AX_ALGdedo0_keep_V_0_state_cmp_full & ~input_AX_ALGdedo0_keep_V_0_sel_wr);

assign input_AX_ALGdedo0_keep_V_0_load_B = (input_AX_ALGdedo0_keep_V_0_sel_wr & input_AX_ALGdedo0_keep_V_0_state_cmp_full);

assign input_AX_ALGdedo0_keep_V_0_sel = input_AX_ALGdedo0_keep_V_0_sel_rd;

assign input_AX_ALGdedo0_keep_V_0_state_cmp_full = ((input_AX_ALGdedo0_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGdedo0_keep_V_0_vld_in = input_AX_ALGdedo0_TVALID;

assign input_AX_ALGdedo0_keep_V_0_vld_out = input_AX_ALGdedo0_keep_V_0_state[1'd0];

assign input_AX_ALGdedo0_last_V_0_ack_in = input_AX_ALGdedo0_last_V_0_state[1'd1];

assign input_AX_ALGdedo0_last_V_0_ack_out = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGdedo0_last_V_0_load_A = (input_AX_ALGdedo0_last_V_0_state_cmp_full & ~input_AX_ALGdedo0_last_V_0_sel_wr);

assign input_AX_ALGdedo0_last_V_0_load_B = (input_AX_ALGdedo0_last_V_0_sel_wr & input_AX_ALGdedo0_last_V_0_state_cmp_full);

assign input_AX_ALGdedo0_last_V_0_sel = input_AX_ALGdedo0_last_V_0_sel_rd;

assign input_AX_ALGdedo0_last_V_0_state_cmp_full = ((input_AX_ALGdedo0_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGdedo0_last_V_0_vld_in = input_AX_ALGdedo0_TVALID;

assign input_AX_ALGdedo0_last_V_0_vld_out = input_AX_ALGdedo0_last_V_0_state[1'd0];

assign input_AX_ALGdedo0_strb_V_0_ack_in = input_AX_ALGdedo0_strb_V_0_state[1'd1];

assign input_AX_ALGdedo0_strb_V_0_ack_out = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGdedo0_strb_V_0_load_A = (input_AX_ALGdedo0_strb_V_0_state_cmp_full & ~input_AX_ALGdedo0_strb_V_0_sel_wr);

assign input_AX_ALGdedo0_strb_V_0_load_B = (input_AX_ALGdedo0_strb_V_0_sel_wr & input_AX_ALGdedo0_strb_V_0_state_cmp_full);

assign input_AX_ALGdedo0_strb_V_0_sel = input_AX_ALGdedo0_strb_V_0_sel_rd;

assign input_AX_ALGdedo0_strb_V_0_state_cmp_full = ((input_AX_ALGdedo0_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGdedo0_strb_V_0_vld_in = input_AX_ALGdedo0_TVALID;

assign input_AX_ALGdedo0_strb_V_0_vld_out = input_AX_ALGdedo0_strb_V_0_state[1'd0];

assign input_AX_ALGdedo0_user_V_0_ack_in = input_AX_ALGdedo0_user_V_0_state[1'd1];

assign input_AX_ALGdedo0_user_V_0_ack_out = dedo0_0_V_read_data_fu_118_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGdedo0_user_V_0_load_A = (input_AX_ALGdedo0_user_V_0_state_cmp_full & ~input_AX_ALGdedo0_user_V_0_sel_wr);

assign input_AX_ALGdedo0_user_V_0_load_B = (input_AX_ALGdedo0_user_V_0_sel_wr & input_AX_ALGdedo0_user_V_0_state_cmp_full);

assign input_AX_ALGdedo0_user_V_0_sel = input_AX_ALGdedo0_user_V_0_sel_rd;

assign input_AX_ALGdedo0_user_V_0_state_cmp_full = ((input_AX_ALGdedo0_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGdedo0_user_V_0_vld_in = input_AX_ALGdedo0_TVALID;

assign input_AX_ALGdedo0_user_V_0_vld_out = input_AX_ALGdedo0_user_V_0_state[1'd0];

assign input_AX_ALGdedo1_TREADY = input_AX_ALGdedo1_dest_V_0_state[1'd1];

assign input_AX_ALGdedo1_data_V_0_ack_in = input_AX_ALGdedo1_data_V_0_state[1'd1];

assign input_AX_ALGdedo1_data_V_0_ack_out = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGdedo1_data_V_0_load_A = (input_AX_ALGdedo1_data_V_0_state_cmp_full & ~input_AX_ALGdedo1_data_V_0_sel_wr);

assign input_AX_ALGdedo1_data_V_0_load_B = (input_AX_ALGdedo1_data_V_0_sel_wr & input_AX_ALGdedo1_data_V_0_state_cmp_full);

assign input_AX_ALGdedo1_data_V_0_sel = input_AX_ALGdedo1_data_V_0_sel_rd;

assign input_AX_ALGdedo1_data_V_0_state_cmp_full = ((input_AX_ALGdedo1_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGdedo1_data_V_0_vld_in = input_AX_ALGdedo1_TVALID;

assign input_AX_ALGdedo1_data_V_0_vld_out = input_AX_ALGdedo1_data_V_0_state[1'd0];

assign input_AX_ALGdedo1_dest_V_0_ack_in = input_AX_ALGdedo1_dest_V_0_state[1'd1];

assign input_AX_ALGdedo1_dest_V_0_ack_out = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGdedo1_dest_V_0_load_A = (input_AX_ALGdedo1_dest_V_0_state_cmp_full & ~input_AX_ALGdedo1_dest_V_0_sel_wr);

assign input_AX_ALGdedo1_dest_V_0_load_B = (input_AX_ALGdedo1_dest_V_0_sel_wr & input_AX_ALGdedo1_dest_V_0_state_cmp_full);

assign input_AX_ALGdedo1_dest_V_0_sel = input_AX_ALGdedo1_dest_V_0_sel_rd;

assign input_AX_ALGdedo1_dest_V_0_state_cmp_full = ((input_AX_ALGdedo1_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGdedo1_dest_V_0_vld_in = input_AX_ALGdedo1_TVALID;

assign input_AX_ALGdedo1_dest_V_0_vld_out = input_AX_ALGdedo1_dest_V_0_state[1'd0];

assign input_AX_ALGdedo1_id_V_0_ack_in = input_AX_ALGdedo1_id_V_0_state[1'd1];

assign input_AX_ALGdedo1_id_V_0_ack_out = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGdedo1_id_V_0_load_A = (input_AX_ALGdedo1_id_V_0_state_cmp_full & ~input_AX_ALGdedo1_id_V_0_sel_wr);

assign input_AX_ALGdedo1_id_V_0_load_B = (input_AX_ALGdedo1_id_V_0_sel_wr & input_AX_ALGdedo1_id_V_0_state_cmp_full);

assign input_AX_ALGdedo1_id_V_0_sel = input_AX_ALGdedo1_id_V_0_sel_rd;

assign input_AX_ALGdedo1_id_V_0_state_cmp_full = ((input_AX_ALGdedo1_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGdedo1_id_V_0_vld_in = input_AX_ALGdedo1_TVALID;

assign input_AX_ALGdedo1_id_V_0_vld_out = input_AX_ALGdedo1_id_V_0_state[1'd0];

assign input_AX_ALGdedo1_keep_V_0_ack_in = input_AX_ALGdedo1_keep_V_0_state[1'd1];

assign input_AX_ALGdedo1_keep_V_0_ack_out = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGdedo1_keep_V_0_load_A = (input_AX_ALGdedo1_keep_V_0_state_cmp_full & ~input_AX_ALGdedo1_keep_V_0_sel_wr);

assign input_AX_ALGdedo1_keep_V_0_load_B = (input_AX_ALGdedo1_keep_V_0_sel_wr & input_AX_ALGdedo1_keep_V_0_state_cmp_full);

assign input_AX_ALGdedo1_keep_V_0_sel = input_AX_ALGdedo1_keep_V_0_sel_rd;

assign input_AX_ALGdedo1_keep_V_0_state_cmp_full = ((input_AX_ALGdedo1_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGdedo1_keep_V_0_vld_in = input_AX_ALGdedo1_TVALID;

assign input_AX_ALGdedo1_keep_V_0_vld_out = input_AX_ALGdedo1_keep_V_0_state[1'd0];

assign input_AX_ALGdedo1_last_V_0_ack_in = input_AX_ALGdedo1_last_V_0_state[1'd1];

assign input_AX_ALGdedo1_last_V_0_ack_out = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGdedo1_last_V_0_load_A = (input_AX_ALGdedo1_last_V_0_state_cmp_full & ~input_AX_ALGdedo1_last_V_0_sel_wr);

assign input_AX_ALGdedo1_last_V_0_load_B = (input_AX_ALGdedo1_last_V_0_sel_wr & input_AX_ALGdedo1_last_V_0_state_cmp_full);

assign input_AX_ALGdedo1_last_V_0_sel = input_AX_ALGdedo1_last_V_0_sel_rd;

assign input_AX_ALGdedo1_last_V_0_state_cmp_full = ((input_AX_ALGdedo1_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGdedo1_last_V_0_vld_in = input_AX_ALGdedo1_TVALID;

assign input_AX_ALGdedo1_last_V_0_vld_out = input_AX_ALGdedo1_last_V_0_state[1'd0];

assign input_AX_ALGdedo1_strb_V_0_ack_in = input_AX_ALGdedo1_strb_V_0_state[1'd1];

assign input_AX_ALGdedo1_strb_V_0_ack_out = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGdedo1_strb_V_0_load_A = (input_AX_ALGdedo1_strb_V_0_state_cmp_full & ~input_AX_ALGdedo1_strb_V_0_sel_wr);

assign input_AX_ALGdedo1_strb_V_0_load_B = (input_AX_ALGdedo1_strb_V_0_sel_wr & input_AX_ALGdedo1_strb_V_0_state_cmp_full);

assign input_AX_ALGdedo1_strb_V_0_sel = input_AX_ALGdedo1_strb_V_0_sel_rd;

assign input_AX_ALGdedo1_strb_V_0_state_cmp_full = ((input_AX_ALGdedo1_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGdedo1_strb_V_0_vld_in = input_AX_ALGdedo1_TVALID;

assign input_AX_ALGdedo1_strb_V_0_vld_out = input_AX_ALGdedo1_strb_V_0_state[1'd0];

assign input_AX_ALGdedo1_user_V_0_ack_in = input_AX_ALGdedo1_user_V_0_state[1'd1];

assign input_AX_ALGdedo1_user_V_0_ack_out = dedo1_0_V_read_data_fu_156_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGdedo1_user_V_0_load_A = (input_AX_ALGdedo1_user_V_0_state_cmp_full & ~input_AX_ALGdedo1_user_V_0_sel_wr);

assign input_AX_ALGdedo1_user_V_0_load_B = (input_AX_ALGdedo1_user_V_0_sel_wr & input_AX_ALGdedo1_user_V_0_state_cmp_full);

assign input_AX_ALGdedo1_user_V_0_sel = input_AX_ALGdedo1_user_V_0_sel_rd;

assign input_AX_ALGdedo1_user_V_0_state_cmp_full = ((input_AX_ALGdedo1_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGdedo1_user_V_0_vld_in = input_AX_ALGdedo1_TVALID;

assign input_AX_ALGdedo1_user_V_0_vld_out = input_AX_ALGdedo1_user_V_0_state[1'd0];

assign input_AX_ALGpalma0_TREADY = input_AX_ALGpalma0_dest_V_0_state[1'd1];

assign input_AX_ALGpalma0_data_V_0_ack_in = input_AX_ALGpalma0_data_V_0_state[1'd1];

assign input_AX_ALGpalma0_data_V_0_ack_out = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGpalma0_data_V_0_load_A = (input_AX_ALGpalma0_data_V_0_state_cmp_full & ~input_AX_ALGpalma0_data_V_0_sel_wr);

assign input_AX_ALGpalma0_data_V_0_load_B = (input_AX_ALGpalma0_data_V_0_sel_wr & input_AX_ALGpalma0_data_V_0_state_cmp_full);

assign input_AX_ALGpalma0_data_V_0_sel = input_AX_ALGpalma0_data_V_0_sel_rd;

assign input_AX_ALGpalma0_data_V_0_state_cmp_full = ((input_AX_ALGpalma0_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGpalma0_data_V_0_vld_in = input_AX_ALGpalma0_TVALID;

assign input_AX_ALGpalma0_data_V_0_vld_out = input_AX_ALGpalma0_data_V_0_state[1'd0];

assign input_AX_ALGpalma0_dest_V_0_ack_in = input_AX_ALGpalma0_dest_V_0_state[1'd1];

assign input_AX_ALGpalma0_dest_V_0_ack_out = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGpalma0_dest_V_0_load_A = (input_AX_ALGpalma0_dest_V_0_state_cmp_full & ~input_AX_ALGpalma0_dest_V_0_sel_wr);

assign input_AX_ALGpalma0_dest_V_0_load_B = (input_AX_ALGpalma0_dest_V_0_sel_wr & input_AX_ALGpalma0_dest_V_0_state_cmp_full);

assign input_AX_ALGpalma0_dest_V_0_sel = input_AX_ALGpalma0_dest_V_0_sel_rd;

assign input_AX_ALGpalma0_dest_V_0_state_cmp_full = ((input_AX_ALGpalma0_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGpalma0_dest_V_0_vld_in = input_AX_ALGpalma0_TVALID;

assign input_AX_ALGpalma0_dest_V_0_vld_out = input_AX_ALGpalma0_dest_V_0_state[1'd0];

assign input_AX_ALGpalma0_id_V_0_ack_in = input_AX_ALGpalma0_id_V_0_state[1'd1];

assign input_AX_ALGpalma0_id_V_0_ack_out = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGpalma0_id_V_0_load_A = (input_AX_ALGpalma0_id_V_0_state_cmp_full & ~input_AX_ALGpalma0_id_V_0_sel_wr);

assign input_AX_ALGpalma0_id_V_0_load_B = (input_AX_ALGpalma0_id_V_0_sel_wr & input_AX_ALGpalma0_id_V_0_state_cmp_full);

assign input_AX_ALGpalma0_id_V_0_sel = input_AX_ALGpalma0_id_V_0_sel_rd;

assign input_AX_ALGpalma0_id_V_0_state_cmp_full = ((input_AX_ALGpalma0_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGpalma0_id_V_0_vld_in = input_AX_ALGpalma0_TVALID;

assign input_AX_ALGpalma0_id_V_0_vld_out = input_AX_ALGpalma0_id_V_0_state[1'd0];

assign input_AX_ALGpalma0_keep_V_0_ack_in = input_AX_ALGpalma0_keep_V_0_state[1'd1];

assign input_AX_ALGpalma0_keep_V_0_ack_out = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGpalma0_keep_V_0_load_A = (input_AX_ALGpalma0_keep_V_0_state_cmp_full & ~input_AX_ALGpalma0_keep_V_0_sel_wr);

assign input_AX_ALGpalma0_keep_V_0_load_B = (input_AX_ALGpalma0_keep_V_0_sel_wr & input_AX_ALGpalma0_keep_V_0_state_cmp_full);

assign input_AX_ALGpalma0_keep_V_0_sel = input_AX_ALGpalma0_keep_V_0_sel_rd;

assign input_AX_ALGpalma0_keep_V_0_state_cmp_full = ((input_AX_ALGpalma0_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGpalma0_keep_V_0_vld_in = input_AX_ALGpalma0_TVALID;

assign input_AX_ALGpalma0_keep_V_0_vld_out = input_AX_ALGpalma0_keep_V_0_state[1'd0];

assign input_AX_ALGpalma0_last_V_0_ack_in = input_AX_ALGpalma0_last_V_0_state[1'd1];

assign input_AX_ALGpalma0_last_V_0_ack_out = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGpalma0_last_V_0_load_A = (input_AX_ALGpalma0_last_V_0_state_cmp_full & ~input_AX_ALGpalma0_last_V_0_sel_wr);

assign input_AX_ALGpalma0_last_V_0_load_B = (input_AX_ALGpalma0_last_V_0_sel_wr & input_AX_ALGpalma0_last_V_0_state_cmp_full);

assign input_AX_ALGpalma0_last_V_0_sel = input_AX_ALGpalma0_last_V_0_sel_rd;

assign input_AX_ALGpalma0_last_V_0_state_cmp_full = ((input_AX_ALGpalma0_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGpalma0_last_V_0_vld_in = input_AX_ALGpalma0_TVALID;

assign input_AX_ALGpalma0_last_V_0_vld_out = input_AX_ALGpalma0_last_V_0_state[1'd0];

assign input_AX_ALGpalma0_strb_V_0_ack_in = input_AX_ALGpalma0_strb_V_0_state[1'd1];

assign input_AX_ALGpalma0_strb_V_0_ack_out = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGpalma0_strb_V_0_load_A = (input_AX_ALGpalma0_strb_V_0_state_cmp_full & ~input_AX_ALGpalma0_strb_V_0_sel_wr);

assign input_AX_ALGpalma0_strb_V_0_load_B = (input_AX_ALGpalma0_strb_V_0_sel_wr & input_AX_ALGpalma0_strb_V_0_state_cmp_full);

assign input_AX_ALGpalma0_strb_V_0_sel = input_AX_ALGpalma0_strb_V_0_sel_rd;

assign input_AX_ALGpalma0_strb_V_0_state_cmp_full = ((input_AX_ALGpalma0_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGpalma0_strb_V_0_vld_in = input_AX_ALGpalma0_TVALID;

assign input_AX_ALGpalma0_strb_V_0_vld_out = input_AX_ALGpalma0_strb_V_0_state[1'd0];

assign input_AX_ALGpalma0_user_V_0_ack_in = input_AX_ALGpalma0_user_V_0_state[1'd1];

assign input_AX_ALGpalma0_user_V_0_ack_out = palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGpalma0_user_V_0_load_A = (input_AX_ALGpalma0_user_V_0_state_cmp_full & ~input_AX_ALGpalma0_user_V_0_sel_wr);

assign input_AX_ALGpalma0_user_V_0_load_B = (input_AX_ALGpalma0_user_V_0_sel_wr & input_AX_ALGpalma0_user_V_0_state_cmp_full);

assign input_AX_ALGpalma0_user_V_0_sel = input_AX_ALGpalma0_user_V_0_sel_rd;

assign input_AX_ALGpalma0_user_V_0_state_cmp_full = ((input_AX_ALGpalma0_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGpalma0_user_V_0_vld_in = input_AX_ALGpalma0_TVALID;

assign input_AX_ALGpalma0_user_V_0_vld_out = input_AX_ALGpalma0_user_V_0_state[1'd0];

assign input_AX_ALGpalma1_TREADY = input_AX_ALGpalma1_dest_V_0_state[1'd1];

assign input_AX_ALGpalma1_data_V_0_ack_in = input_AX_ALGpalma1_data_V_0_state[1'd1];

assign input_AX_ALGpalma1_data_V_0_ack_out = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGpalma1_data_V_0_load_A = (input_AX_ALGpalma1_data_V_0_state_cmp_full & ~input_AX_ALGpalma1_data_V_0_sel_wr);

assign input_AX_ALGpalma1_data_V_0_load_B = (input_AX_ALGpalma1_data_V_0_sel_wr & input_AX_ALGpalma1_data_V_0_state_cmp_full);

assign input_AX_ALGpalma1_data_V_0_sel = input_AX_ALGpalma1_data_V_0_sel_rd;

assign input_AX_ALGpalma1_data_V_0_state_cmp_full = ((input_AX_ALGpalma1_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGpalma1_data_V_0_vld_in = input_AX_ALGpalma1_TVALID;

assign input_AX_ALGpalma1_data_V_0_vld_out = input_AX_ALGpalma1_data_V_0_state[1'd0];

assign input_AX_ALGpalma1_dest_V_0_ack_in = input_AX_ALGpalma1_dest_V_0_state[1'd1];

assign input_AX_ALGpalma1_dest_V_0_ack_out = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGpalma1_dest_V_0_load_A = (input_AX_ALGpalma1_dest_V_0_state_cmp_full & ~input_AX_ALGpalma1_dest_V_0_sel_wr);

assign input_AX_ALGpalma1_dest_V_0_load_B = (input_AX_ALGpalma1_dest_V_0_sel_wr & input_AX_ALGpalma1_dest_V_0_state_cmp_full);

assign input_AX_ALGpalma1_dest_V_0_sel = input_AX_ALGpalma1_dest_V_0_sel_rd;

assign input_AX_ALGpalma1_dest_V_0_state_cmp_full = ((input_AX_ALGpalma1_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGpalma1_dest_V_0_vld_in = input_AX_ALGpalma1_TVALID;

assign input_AX_ALGpalma1_dest_V_0_vld_out = input_AX_ALGpalma1_dest_V_0_state[1'd0];

assign input_AX_ALGpalma1_id_V_0_ack_in = input_AX_ALGpalma1_id_V_0_state[1'd1];

assign input_AX_ALGpalma1_id_V_0_ack_out = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGpalma1_id_V_0_load_A = (input_AX_ALGpalma1_id_V_0_state_cmp_full & ~input_AX_ALGpalma1_id_V_0_sel_wr);

assign input_AX_ALGpalma1_id_V_0_load_B = (input_AX_ALGpalma1_id_V_0_sel_wr & input_AX_ALGpalma1_id_V_0_state_cmp_full);

assign input_AX_ALGpalma1_id_V_0_sel = input_AX_ALGpalma1_id_V_0_sel_rd;

assign input_AX_ALGpalma1_id_V_0_state_cmp_full = ((input_AX_ALGpalma1_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGpalma1_id_V_0_vld_in = input_AX_ALGpalma1_TVALID;

assign input_AX_ALGpalma1_id_V_0_vld_out = input_AX_ALGpalma1_id_V_0_state[1'd0];

assign input_AX_ALGpalma1_keep_V_0_ack_in = input_AX_ALGpalma1_keep_V_0_state[1'd1];

assign input_AX_ALGpalma1_keep_V_0_ack_out = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGpalma1_keep_V_0_load_A = (input_AX_ALGpalma1_keep_V_0_state_cmp_full & ~input_AX_ALGpalma1_keep_V_0_sel_wr);

assign input_AX_ALGpalma1_keep_V_0_load_B = (input_AX_ALGpalma1_keep_V_0_sel_wr & input_AX_ALGpalma1_keep_V_0_state_cmp_full);

assign input_AX_ALGpalma1_keep_V_0_sel = input_AX_ALGpalma1_keep_V_0_sel_rd;

assign input_AX_ALGpalma1_keep_V_0_state_cmp_full = ((input_AX_ALGpalma1_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGpalma1_keep_V_0_vld_in = input_AX_ALGpalma1_TVALID;

assign input_AX_ALGpalma1_keep_V_0_vld_out = input_AX_ALGpalma1_keep_V_0_state[1'd0];

assign input_AX_ALGpalma1_last_V_0_ack_in = input_AX_ALGpalma1_last_V_0_state[1'd1];

assign input_AX_ALGpalma1_last_V_0_ack_out = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGpalma1_last_V_0_load_A = (input_AX_ALGpalma1_last_V_0_state_cmp_full & ~input_AX_ALGpalma1_last_V_0_sel_wr);

assign input_AX_ALGpalma1_last_V_0_load_B = (input_AX_ALGpalma1_last_V_0_sel_wr & input_AX_ALGpalma1_last_V_0_state_cmp_full);

assign input_AX_ALGpalma1_last_V_0_sel = input_AX_ALGpalma1_last_V_0_sel_rd;

assign input_AX_ALGpalma1_last_V_0_state_cmp_full = ((input_AX_ALGpalma1_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGpalma1_last_V_0_vld_in = input_AX_ALGpalma1_TVALID;

assign input_AX_ALGpalma1_last_V_0_vld_out = input_AX_ALGpalma1_last_V_0_state[1'd0];

assign input_AX_ALGpalma1_strb_V_0_ack_in = input_AX_ALGpalma1_strb_V_0_state[1'd1];

assign input_AX_ALGpalma1_strb_V_0_ack_out = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGpalma1_strb_V_0_load_A = (input_AX_ALGpalma1_strb_V_0_state_cmp_full & ~input_AX_ALGpalma1_strb_V_0_sel_wr);

assign input_AX_ALGpalma1_strb_V_0_load_B = (input_AX_ALGpalma1_strb_V_0_sel_wr & input_AX_ALGpalma1_strb_V_0_state_cmp_full);

assign input_AX_ALGpalma1_strb_V_0_sel = input_AX_ALGpalma1_strb_V_0_sel_rd;

assign input_AX_ALGpalma1_strb_V_0_state_cmp_full = ((input_AX_ALGpalma1_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGpalma1_strb_V_0_vld_in = input_AX_ALGpalma1_TVALID;

assign input_AX_ALGpalma1_strb_V_0_vld_out = input_AX_ALGpalma1_strb_V_0_state[1'd0];

assign input_AX_ALGpalma1_user_V_0_ack_in = input_AX_ALGpalma1_user_V_0_state[1'd1];

assign input_AX_ALGpalma1_user_V_0_ack_out = palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TREADY;

assign input_AX_ALGpalma1_user_V_0_load_A = (input_AX_ALGpalma1_user_V_0_state_cmp_full & ~input_AX_ALGpalma1_user_V_0_sel_wr);

assign input_AX_ALGpalma1_user_V_0_load_B = (input_AX_ALGpalma1_user_V_0_sel_wr & input_AX_ALGpalma1_user_V_0_state_cmp_full);

assign input_AX_ALGpalma1_user_V_0_sel = input_AX_ALGpalma1_user_V_0_sel_rd;

assign input_AX_ALGpalma1_user_V_0_state_cmp_full = ((input_AX_ALGpalma1_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_AX_ALGpalma1_user_V_0_vld_in = input_AX_ALGpalma1_TVALID;

assign input_AX_ALGpalma1_user_V_0_vld_out = input_AX_ALGpalma1_user_V_0_state[1'd0];

assign output_AX_ALG_TDATA = output_AX_ALG_data_V_1_data_out;

assign output_AX_ALG_TDEST = output_AX_ALG_dest_V_1_data_out;

assign output_AX_ALG_TID = output_AX_ALG_id_V_1_data_out;

assign output_AX_ALG_TKEEP = output_AX_ALG_keep_V_1_data_out;

assign output_AX_ALG_TLAST = output_AX_ALG_last_V_1_data_out;

assign output_AX_ALG_TSTRB = output_AX_ALG_strb_V_1_data_out;

assign output_AX_ALG_TUSER = output_AX_ALG_user_V_1_data_out;

assign output_AX_ALG_TVALID = output_AX_ALG_dest_V_1_state[1'd0];

assign output_AX_ALG_data_V_1_ack_in = output_AX_ALG_data_V_1_state[1'd1];

assign output_AX_ALG_data_V_1_ack_out = output_AX_ALG_TREADY;

assign output_AX_ALG_data_V_1_load_A = (output_AX_ALG_data_V_1_state_cmp_full & ~output_AX_ALG_data_V_1_sel_wr);

assign output_AX_ALG_data_V_1_load_B = (output_AX_ALG_data_V_1_sel_wr & output_AX_ALG_data_V_1_state_cmp_full);

assign output_AX_ALG_data_V_1_sel = output_AX_ALG_data_V_1_sel_rd;

assign output_AX_ALG_data_V_1_state_cmp_full = ((output_AX_ALG_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_AX_ALG_data_V_1_vld_in = grp_write_data_fu_96_output_AX_ALG_TVALID;

assign output_AX_ALG_data_V_1_vld_out = output_AX_ALG_data_V_1_state[1'd0];

assign output_AX_ALG_dest_V_1_ack_in = output_AX_ALG_dest_V_1_state[1'd1];

assign output_AX_ALG_dest_V_1_ack_out = output_AX_ALG_TREADY;

assign output_AX_ALG_dest_V_1_load_A = (output_AX_ALG_dest_V_1_state_cmp_full & ~output_AX_ALG_dest_V_1_sel_wr);

assign output_AX_ALG_dest_V_1_load_B = (output_AX_ALG_dest_V_1_sel_wr & output_AX_ALG_dest_V_1_state_cmp_full);

assign output_AX_ALG_dest_V_1_sel = output_AX_ALG_dest_V_1_sel_rd;

assign output_AX_ALG_dest_V_1_state_cmp_full = ((output_AX_ALG_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_AX_ALG_dest_V_1_vld_in = grp_write_data_fu_96_output_AX_ALG_TVALID;

assign output_AX_ALG_dest_V_1_vld_out = output_AX_ALG_dest_V_1_state[1'd0];

assign output_AX_ALG_id_V_1_ack_in = output_AX_ALG_id_V_1_state[1'd1];

assign output_AX_ALG_id_V_1_ack_out = output_AX_ALG_TREADY;

assign output_AX_ALG_id_V_1_load_A = (output_AX_ALG_id_V_1_state_cmp_full & ~output_AX_ALG_id_V_1_sel_wr);

assign output_AX_ALG_id_V_1_load_B = (output_AX_ALG_id_V_1_sel_wr & output_AX_ALG_id_V_1_state_cmp_full);

assign output_AX_ALG_id_V_1_sel = output_AX_ALG_id_V_1_sel_rd;

assign output_AX_ALG_id_V_1_state_cmp_full = ((output_AX_ALG_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_AX_ALG_id_V_1_vld_in = grp_write_data_fu_96_output_AX_ALG_TVALID;

assign output_AX_ALG_id_V_1_vld_out = output_AX_ALG_id_V_1_state[1'd0];

assign output_AX_ALG_keep_V_1_ack_in = output_AX_ALG_keep_V_1_state[1'd1];

assign output_AX_ALG_keep_V_1_ack_out = output_AX_ALG_TREADY;

assign output_AX_ALG_keep_V_1_load_A = (output_AX_ALG_keep_V_1_state_cmp_full & ~output_AX_ALG_keep_V_1_sel_wr);

assign output_AX_ALG_keep_V_1_load_B = (output_AX_ALG_keep_V_1_sel_wr & output_AX_ALG_keep_V_1_state_cmp_full);

assign output_AX_ALG_keep_V_1_sel = output_AX_ALG_keep_V_1_sel_rd;

assign output_AX_ALG_keep_V_1_state_cmp_full = ((output_AX_ALG_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_AX_ALG_keep_V_1_vld_in = grp_write_data_fu_96_output_AX_ALG_TVALID;

assign output_AX_ALG_keep_V_1_vld_out = output_AX_ALG_keep_V_1_state[1'd0];

assign output_AX_ALG_last_V_1_ack_in = output_AX_ALG_last_V_1_state[1'd1];

assign output_AX_ALG_last_V_1_ack_out = output_AX_ALG_TREADY;

assign output_AX_ALG_last_V_1_load_A = (output_AX_ALG_last_V_1_state_cmp_full & ~output_AX_ALG_last_V_1_sel_wr);

assign output_AX_ALG_last_V_1_load_B = (output_AX_ALG_last_V_1_sel_wr & output_AX_ALG_last_V_1_state_cmp_full);

assign output_AX_ALG_last_V_1_sel = output_AX_ALG_last_V_1_sel_rd;

assign output_AX_ALG_last_V_1_state_cmp_full = ((output_AX_ALG_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_AX_ALG_last_V_1_vld_in = grp_write_data_fu_96_output_AX_ALG_TVALID;

assign output_AX_ALG_last_V_1_vld_out = output_AX_ALG_last_V_1_state[1'd0];

assign output_AX_ALG_strb_V_1_ack_in = output_AX_ALG_strb_V_1_state[1'd1];

assign output_AX_ALG_strb_V_1_ack_out = output_AX_ALG_TREADY;

assign output_AX_ALG_strb_V_1_load_A = (output_AX_ALG_strb_V_1_state_cmp_full & ~output_AX_ALG_strb_V_1_sel_wr);

assign output_AX_ALG_strb_V_1_load_B = (output_AX_ALG_strb_V_1_sel_wr & output_AX_ALG_strb_V_1_state_cmp_full);

assign output_AX_ALG_strb_V_1_sel = output_AX_ALG_strb_V_1_sel_rd;

assign output_AX_ALG_strb_V_1_state_cmp_full = ((output_AX_ALG_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_AX_ALG_strb_V_1_vld_in = grp_write_data_fu_96_output_AX_ALG_TVALID;

assign output_AX_ALG_strb_V_1_vld_out = output_AX_ALG_strb_V_1_state[1'd0];

assign output_AX_ALG_user_V_1_ack_in = output_AX_ALG_user_V_1_state[1'd1];

assign output_AX_ALG_user_V_1_ack_out = output_AX_ALG_TREADY;

assign output_AX_ALG_user_V_1_load_A = (output_AX_ALG_user_V_1_state_cmp_full & ~output_AX_ALG_user_V_1_sel_wr);

assign output_AX_ALG_user_V_1_load_B = (output_AX_ALG_user_V_1_sel_wr & output_AX_ALG_user_V_1_state_cmp_full);

assign output_AX_ALG_user_V_1_sel = output_AX_ALG_user_V_1_sel_rd;

assign output_AX_ALG_user_V_1_state_cmp_full = ((output_AX_ALG_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_AX_ALG_user_V_1_vld_in = grp_write_data_fu_96_output_AX_ALG_TVALID;

assign output_AX_ALG_user_V_1_vld_out = output_AX_ALG_user_V_1_state[1'd0];

assign palma0_0_V_read_data_fu_137_input_AX_ALGpalma1_TVALID = input_AX_ALGpalma0_dest_V_0_state[1'd0];

assign palma1_0_V_read_data_fu_175_input_AX_ALGpalma1_TVALID = input_AX_ALGpalma1_dest_V_0_state[1'd0];

endmodule //opcionA
